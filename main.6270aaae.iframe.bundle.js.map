{"version":3,"file":"main.6270aaae.iframe.bundle.js","mappings":"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","sources":["webpack://@navikt/sif-common-pleiepenger/./src/storybook/styles/navFrontendOverride.css","webpack://@navikt/sif-common-pleiepenger/./.storybook/preview.js","webpack://@navikt/sif-common-pleiepenger/./.storybook/preview.js-generated-config-entry.js","webpack://@navikt/sif-common-pleiepenger/./generated-stories-entry.js","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/common/duration-text/DurationText.stories.tsx","webpack://@navikt/sif-common-pleiepenger/./src/storybook/stories/ArbeidstidPeriodeForm.stories.tsx","webpack://@navikt/sif-common-pleiepenger/./src/storybook/stories/TidEnkeltdagForm.stories.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-enkeltdag-dialog/arbeidstidEnkeltdagMessages.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-periode-dialog/i18n/arbeidstidPeriodeMessages.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/common/duration-text/DurationText.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/common/dager-med-tid-liste/DagerMedTidListe.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-enkeltdager-liste/ArbeidstidEnkeltdagerListe.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tid-enkeltdag-dialog/tidEnkeltdagUtils.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tid-enkeltdag-dialog/tidEnkeltdagValidation.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tid-enkeltdag-dialog/TidEnkeltdagForm.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tid-enkeltdag-dialog/TidEnkeltdagDialog.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-enkeltdag-dialog/ArbeidstidEnkeltdagDialog.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-faste-dager-liste/ArbeidstidFasteDagerListe.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/common/calendar-grid/CalendarGridDate.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/common/calendar-grid/CalendarGrid.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/common/label-input-info-layout/LabelInputInfoLayout.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/common/timer-og-minutter/TimerOgMinutter.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tid-faste-ukedager-input/tidFasteUkerdagerInputMessages.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-faste-ukedager-input/ArbeidstidFasteUkedagerInput.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-måned/components/arbeidstid-enkeltdag-tekst/ArbeidstidEnkeltdagTekst.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-måned/components/arbeidstid-måned-tittel/ArbeidstidMånedTittel.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-måned/ArbeidstidMåned.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/dager-med-tid/TidEnkeltdager.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/dager-med-tid/TidFasteDager.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tid-faste-ukedager-input/TidFasteUkedagerInput.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tid-uker-input/tidUkerUtils.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tid-uke-input/TidUkeInput.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tid-uker-input/TidUkerInput.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tid-kalender-form/TidKalenderForm.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tidsbruk-kalender/TidsbrukKalenderDag.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tidsbruk-kalender/TidsbrukKalender.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/types/index.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-periode-dialog/components/arbeidstid-periode-form/arbeidstidPeriodeFormValidation.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-periode-dialog/components/arbeidstid-periode-form/ArbeidstidPeriodeForm.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-periode-dialog/components/arbeidstid-periode-dialog/ArbeidstidPeriodeDialog.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-uke-input/ArbeidstidUkeInput.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-uker-input/ArbeidstidUkerInput.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/omsorgstilbud/omsorgstilbud-enkeltdag/OmsorgstilbudEnkeltdagDialog.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/omsorgstilbud/omsorgstilbud-enkeltdag/omsorgstilbudEnkeltdagFormMessages.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/omsorgstilbud/omsorgstilbud-periode/components/omsorgstilbud-periode-form/OmsorgstilbudPeriodeForm.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/omsorgstilbud/omsorgstilbud-periode/components/omsorgstilbud-periode-form/omsorgstilbudFormValidation.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/omsorgstilbud/omsorgstilbud-periode/components/omsorgstilbud-periode-dialog/OmsorgstilbudPeriodeDialog.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/omsorgstilbud/omsorgstilbud-periode/OmsorgstilbudMåned.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/omsorgstilbud/omsorgstilbud-periode/i18n/omsorgstilbudPeriodeMessages.ts","webpack://@navikt/sif-common-pleiepenger/./src/storybook/styles/navFrontendOverride.css?ee50","webpack://@navikt/sif-common-pleiepenger/./src/storybook/decorators/withDialogWrapper.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/common/timer-og-minutter/timerOgMinutterMessages.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-måned/i18n/arbeidstidMånedMessages.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tid-enkeltdag-dialog/tidEnkeltdagMessages.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/i18n/index.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/common/calendar-grid/calendarGridMessages.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/common/dager-med-tid-liste/dagerMedTidMessages.ts","webpack://@navikt/sif-common-pleiepenger/./src/storybook/decorators/withIntlProvider.tsx","webpack://@navikt/sif-common-pleiepenger/./src/ sync ^\\.(?7dd6","webpack://@navikt/sif-common-pleiepenger/./src/ sync ^\\.("],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".panel {\\n    background-color: #f1f2f2;\\n    padding: 2rem;\\n}\\n.panel--border {\\n    background-color: transparent;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/storybook/styles/navFrontendOverride.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,yBAAyB;IACzB,aAAa;AACjB;AACA;IACI,6BAA6B;AACjC\",\"sourcesContent\":[\".panel {\\n    background-color: #f1f2f2;\\n    padding: 2rem;\\n}\\n.panel--border {\\n    background-color: transparent;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","export const parameters = {\n  actions: { argTypesRegex: \"^on[A-Z].*\" },\n  controls: {\n    matchers: {\n      color: /(background|color)$/i,\n      date: /Date$/,\n    },\n  },\n}","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable import/no-unresolved */\nimport { addDecorator, addParameters, addLoader, addArgsEnhancer, addArgTypesEnhancer, setGlobalRender } from '/Users/frodehansen/prosjekter/git/sif-common-pleiepenger/node_modules/@storybook/client-api';\nimport { logger } from '/Users/frodehansen/prosjekter/git/sif-common-pleiepenger/node_modules/@storybook/client-logger';\nimport * as config from '/Users/frodehansen/prosjekter/git/sif-common-pleiepenger/.storybook/preview.js';\nObject.keys(config).forEach(function (key) {\n  var value = config[key];\n\n  switch (key) {\n    case 'args':\n    case 'argTypes':\n      {\n        return logger.warn('Invalid args/argTypes in config, ignoring.', JSON.stringify(value));\n      }\n\n    case 'decorators':\n      {\n        return value.forEach(function (decorator) {\n          return addDecorator(decorator, false);\n        });\n      }\n\n    case 'loaders':\n      {\n        return value.forEach(function (loader) {\n          return addLoader(loader, false);\n        });\n      }\n\n    case 'parameters':\n      {\n        return addParameters(_objectSpread({}, value), false);\n      }\n\n    case 'argTypesEnhancers':\n      {\n        return value.forEach(function (enhancer) {\n          return addArgTypesEnhancer(enhancer);\n        });\n      }\n\n    case 'argsEnhancers':\n      {\n        return value.forEach(function (enhancer) {\n          return addArgsEnhancer(enhancer);\n        });\n      }\n\n    case 'render':\n      {\n        return setGlobalRender(value);\n      }\n\n    case 'globals':\n    case 'globalTypes':\n      {\n        var v = {};\n        v[key] = value;\n        return addParameters(v, false);\n      }\n\n    case '__namedExportsOrder':\n    case 'decorateStory':\n    case 'renderToDOM':\n      {\n        return null; // This key is not handled directly in v6 mode.\n      }\n\n    default:\n      {\n        // eslint-disable-next-line prefer-template\n        return console.log(key + ' was not supported :( !');\n      }\n  }\n});","\"use strict\";\n\nvar _frameworkImportPath = require(\"@storybook/react\");\n\n/* eslint-disable import/no-unresolved */\n(0, _frameworkImportPath.configure)([require.context('./src', true, /^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stories\\.mdx)$/),require.context('./src', true, /^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stories\\.(js|jsx|ts|tsx))$/)], module, false);","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { ComponentMeta, ComponentStory } from '@storybook/react';\\nimport React from 'react';\\nimport withIntlProvider from '../../../storybook/decorators/withIntlProvider';\\nimport DurationText from './DurationText';\\n\\nexport default {\\n    title: 'Example/DurationText',\\n    component: DurationText,\\n    decorators: [withIntlProvider],\\n} as ComponentMeta<typeof DurationText>;\\n\\nconst Template: ComponentStory<typeof DurationText> = (args) => <DurationText {...args} />;\\n\\nexport const Default = Template.bind({});\\nDefault.args = {\\n    duration: { hours: '2', minutes: '20' },\\n};\\nDefault.parameters = {\\n    formik: {\\n        initialValues: {\\n            DurationText1: true,\\n        },\\n    },\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":54,\"line\":12},\"endLoc\":{\"col\":90,\"line\":12},\"startBody\":{\"col\":54,\"line\":12},\"endBody\":{\"col\":90,\"line\":12}}};\n    \nimport { ComponentMeta, ComponentStory } from '@storybook/react';\nimport React from 'react';\nimport withIntlProvider from '../../../storybook/decorators/withIntlProvider';\nimport DurationText from './DurationText';\n\nexport default {\n    title: 'Example/DurationText',\n    component: DurationText,\n    decorators: [withIntlProvider],\n} as ComponentMeta<typeof DurationText>;\n\nconst Template: ComponentStory<typeof DurationText> = (args) => <DurationText {...args} />;\n\nexport const Default = Template.bind({});\nDefault.args = {\n    duration: { hours: '2', minutes: '20' },\n};\nDefault.parameters = {\n    formik: {\n        initialValues: {\n            DurationText1: true,\n        },\n    },\n};\n\n\n\nDefault.parameters = { storySource: { source: \"(args) => <DurationText {...args} />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { ComponentMeta, ComponentStory } from '@storybook/react';\\nimport React from 'react';\\nimport { DateRange, ISODateToDate } from '@navikt/sif-common-utils/lib';\\nimport { ArbeidstidPeriodeForm, ArbeidstidPeriodeFormProps } from '../../sif-common-pleiepenger';\\nimport withIntlProvider from '../decorators/withIntlProvider';\\nimport { withDialogWrapperMedium } from '../decorators/withDialogWrapper';\\n\\nexport default {\\n    title: 'ArbeidstidPeriodeForm',\\n    component: ArbeidstidPeriodeForm,\\n    decorators: [withIntlProvider, withDialogWrapperMedium],\\n} as ComponentMeta<typeof ArbeidstidPeriodeForm>;\\n\\nconst Template: ComponentStory<typeof ArbeidstidPeriodeForm> = (args) => <ArbeidstidPeriodeForm {...args} />;\\n\\nconst testSøknadsperiode: DateRange = {\\n    from: ISODateToDate('2022-01-01'),\\n    to: ISODateToDate('2022-04-01'),\\n};\\n\\nconst defaultFormProps: Partial<ArbeidstidPeriodeFormProps> = {\\n    periode: testSøknadsperiode,\\n    arbeidsstedNavn: 'NAV',\\n    intlValues: {\\n        fra: 'fra-tekst',\\n        til: 'til-tekst',\\n        hvor: 'hos NAV',\\n        iPerioden: 'i perioden',\\n        skalEllerHarJobbet: 'jobber',\\n        timer: 'timer',\\n    },\\n    visAlleSpørsmål: false,\\n};\\nexport const Default = Template.bind({});\\nDefault.args = {\\n    ...defaultFormProps,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":63,\"line\":14},\"endLoc\":{\"col\":108,\"line\":14},\"startBody\":{\"col\":63,\"line\":14},\"endBody\":{\"col\":108,\"line\":14}}};\n    \nimport { ComponentMeta, ComponentStory } from '@storybook/react';\nimport React from 'react';\nimport { DateRange, ISODateToDate } from '@navikt/sif-common-utils/lib';\nimport { ArbeidstidPeriodeForm, ArbeidstidPeriodeFormProps } from '../../sif-common-pleiepenger';\nimport withIntlProvider from '../decorators/withIntlProvider';\nimport { withDialogWrapperMedium } from '../decorators/withDialogWrapper';\n\nexport default {\n    title: 'ArbeidstidPeriodeForm',\n    component: ArbeidstidPeriodeForm,\n    decorators: [withIntlProvider, withDialogWrapperMedium],\n} as ComponentMeta<typeof ArbeidstidPeriodeForm>;\n\nconst Template: ComponentStory<typeof ArbeidstidPeriodeForm> = (args) => <ArbeidstidPeriodeForm {...args} />;\n\nconst testSøknadsperiode: DateRange = {\n    from: ISODateToDate('2022-01-01'),\n    to: ISODateToDate('2022-04-01'),\n};\n\nconst defaultFormProps: Partial<ArbeidstidPeriodeFormProps> = {\n    periode: testSøknadsperiode,\n    arbeidsstedNavn: 'NAV',\n    intlValues: {\n        fra: 'fra-tekst',\n        til: 'til-tekst',\n        hvor: 'hos NAV',\n        iPerioden: 'i perioden',\n        skalEllerHarJobbet: 'jobber',\n        timer: 'timer',\n    },\n    visAlleSpørsmål: false,\n};\nexport const Default = Template.bind({});\nDefault.args = {\n    ...defaultFormProps,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"(args) => <ArbeidstidPeriodeForm {...args} />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { ComponentMeta, ComponentStory } from '@storybook/react';\\nimport React from 'react';\\nimport { DateRange, ISODateToDate } from '@navikt/sif-common-utils/lib';\\nimport { TidEnkeltdagForm } from '../../sif-common-pleiepenger';\\nimport withIntlProvider from '../decorators/withIntlProvider';\\nimport { TidEnkeltdagFormProps } from '../../sif-common-pleiepenger/tid/tid-enkeltdag-dialog/TidEnkeltdagForm';\\nimport { withDialogWrapperSmall } from '../decorators/withDialogWrapper';\\n\\nexport default {\\n    title: 'TidEnkeltdagForm',\\n    component: TidEnkeltdagForm,\\n    decorators: [withIntlProvider, withDialogWrapperSmall],\\n} as ComponentMeta<typeof TidEnkeltdagForm>;\\n\\nconst Template: ComponentStory<typeof TidEnkeltdagForm> = (args) => <TidEnkeltdagForm {...args} />;\\n\\nconst testSøknadsperiode: DateRange = {\\n    from: ISODateToDate('2022-01-03'),\\n    to: ISODateToDate('2022-04-01'),\\n};\\n\\nconst defaultFormProps: Partial<TidEnkeltdagFormProps> = {\\n    periode: testSøknadsperiode,\\n    dato: testSøknadsperiode.from,\\n    hvorMyeSpørsmålRenderer: () => 'Hvor mye jobbet du hos Karis Gullfisker mandag 3. januar 2020?',\\n    // onSubmit: () => null, Tas ikke med pga actions-addon outputer submit-data i storybook ved commit\\n};\\n\\nexport const Default = Template.bind({});\\nDefault.args = {\\n    ...defaultFormProps,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":58,\"line\":15},\"endLoc\":{\"col\":98,\"line\":15},\"startBody\":{\"col\":58,\"line\":15},\"endBody\":{\"col\":98,\"line\":15}}};\n    \nimport { ComponentMeta, ComponentStory } from '@storybook/react';\nimport React from 'react';\nimport { DateRange, ISODateToDate } from '@navikt/sif-common-utils/lib';\nimport { TidEnkeltdagForm } from '../../sif-common-pleiepenger';\nimport withIntlProvider from '../decorators/withIntlProvider';\nimport { TidEnkeltdagFormProps } from '../../sif-common-pleiepenger/tid/tid-enkeltdag-dialog/TidEnkeltdagForm';\nimport { withDialogWrapperSmall } from '../decorators/withDialogWrapper';\n\nexport default {\n    title: 'TidEnkeltdagForm',\n    component: TidEnkeltdagForm,\n    decorators: [withIntlProvider, withDialogWrapperSmall],\n} as ComponentMeta<typeof TidEnkeltdagForm>;\n\nconst Template: ComponentStory<typeof TidEnkeltdagForm> = (args) => <TidEnkeltdagForm {...args} />;\n\nconst testSøknadsperiode: DateRange = {\n    from: ISODateToDate('2022-01-03'),\n    to: ISODateToDate('2022-04-01'),\n};\n\nconst defaultFormProps: Partial<TidEnkeltdagFormProps> = {\n    periode: testSøknadsperiode,\n    dato: testSøknadsperiode.from,\n    hvorMyeSpørsmålRenderer: () => 'Hvor mye jobbet du hos Karis Gullfisker mandag 3. januar 2020?',\n    // onSubmit: () => null, Tas ikke med pga actions-addon outputer submit-data i storybook ved commit\n};\n\nexport const Default = Template.bind({});\nDefault.args = {\n    ...defaultFormProps,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"(args) => <TidEnkeltdagForm {...args} />\" }, ...Default.parameters };","const arbeidstidEnkeltdagFormMessages = {\n    nb: {\n        'arbeidstidEnkeltdagDialog.contentTitle': 'Arbeidstid',\n        'arbeidstidEnkeltdagForm.tid.spm': 'Hvor mye {skalEllerHarJobbet} {hvor} {når}',\n        'arbeidstidEnkeltdagForm.som.ANSATT': 'hos {navn}',\n        'arbeidstidEnkeltdagForm.som.FRILANSER': 'som frilanser',\n        'arbeidstidEnkeltdagForm.som.SELVSTENDIG': 'som selvstendig næringsdrivende',\n        'arbeidstidEnkeltdagForm.skalJobbe': 'skal du jobbe',\n        'arbeidstidEnkeltdagForm.jobbet': 'jobbet du',\n    },\n};\n\nexport default arbeidstidEnkeltdagFormMessages;\n","import { IntlShape } from 'react-intl';\nimport { typedIntlHelper } from '@navikt/sif-common-core/lib/utils/intlUtils';\n\nconst arbeidstidPeriodeFormFormMessages = {\n    nb: {\n        'arbeidstidPeriodeForm.tittel': `Periode med jobb - {arbeidsstedNavn}`,\n        'arbeidstidPeriodeForm.submitButtonLabel': 'Ok',\n        'arbeidstidPeriodeForm.cancelButtonLabel': 'Avbryt',\n        'arbeidstidPeriodeForm.fraOgMed.label': 'Fra og med',\n        'arbeidstidPeriodeForm.tilOgMed.label': 'Til og med',\n        'arbeidstidPeriodeForm.velgHelePerioden': 'Velg hele søknadsperioden',\n        'arbeidstidPeriodeForm.tidFasteDager.label': `Fyll ut hvor mye du jobber i uken i perioden:`,\n        'arbeidstidPeriodeForm.tidFasteUkedager.label': `Fyll ut hvor mye du jobber de ulike ukedagene i perioden:`,\n        'arbeidstidPeriodeForm.arbeiderIPerioden.spm': 'Hvordan jobber du {hvor} i denne perioden?',\n        'arbeidstidPeriodeForm.arbeiderIPerioden.svar.jobberIkke': 'Jeg er helt borte fra jobb på grunn av pleiepenger',\n        'arbeidstidPeriodeForm.arbeiderIPerioden.svar.jobberRedusert': 'Jeg kombinerer delvis jobb med pleiepenger',\n        'arbeidstidPeriodeForm.arbeiderIPerioden.svar.jobberVanlig':\n            'Jeg jobber som vanlig og har ikke fravær fra jobb på grunn av pleiepenger',\n        'arbeidstidPeriodeForm.validation.fom.dateHasNoValue': 'Du må fylle ut periodens fra-dato.',\n        'arbeidstidPeriodeForm.validation.fom.dateHasInvalidFormat':\n            'Du må oppgi periodens fra-dato i et gyldig datoformat. Gyldig format er dd.mm.åååå.',\n        'arbeidstidPeriodeForm.validation.fom.fromDateIsAfterToDate':\n            'Fra-datoen kan ikke være etter til-datoen. Skriv inn eller velg dato fra kalenderen.',\n        'arbeidstidPeriodeForm.validation.fom.dateIsBeforeMin': 'Fra-datoen kan ikke være før perioden du har søkt om.',\n        'arbeidstidPeriodeForm.validation.tom.dateIsBeforeMin': 'Til-datoen kan ikke være før perioden du har søkt om.',\n        'arbeidstidPeriodeForm.validation.fom.dateIsAfterMax':\n            'Fra-datoen kan ikke være etter perioden du har søkt for.',\n        'arbeidstidPeriodeForm.validation.fom.dateIsNotWeekday':\n            'Fra-dato må være en ukedag, det kan ikke være en lørdag eller søndag. Skriv inn eller velg dato fra kalenderen.',\n        'arbeidstidPeriodeForm.validation.tom.dateHasNoValue': 'Du må fylle ut periodens til-dato.',\n        'arbeidstidPeriodeForm.validation.tom.dateHasInvalidFormat':\n            'Du må oppgi periodens til-dato i et gyldig datoformat. Gyldig format er dd.mm.åååå.',\n        'arbeidstidPeriodeForm.validation.tom.toDateIsBeforeFromDate':\n            'Til-datoen kan ikke være før fra-datoen. Skriv inn eller velg dato fra kalenderen.',\n        'arbeidstidPeriodeForm.validation.tom.dateIsAfterMax':\n            'Til-datoen kan ikke være etter perioden du har søkt for.',\n        'arbeidstidPeriodeForm.validation.tom.dateIsNotWeekday':\n            'Til-dato må være en ukedag, det kan ikke være en lørdag eller søndag. Skriv inn eller velg dato fra kalenderen.',\n        'arbeidstidPeriodeForm.validation.fasteDager.gruppe.ingenTidRegistrert':\n            'Du må oppgi hvor mange timer du jobber i uken.',\n        'arbeidstidPeriodeForm.validation.fasteDager.gruppe.forMangeTimer':\n            'Du kan ikke oppgi mer enn 24 timer for én dag.',\n        'arbeidstidPeriodeForm.validation.arbeiderHvordan.noValue':\n            'Du må svare på hvordan du jobber {hvor} i denne perioden.',\n\n        'arbeidstidPeriodeForm.validation.tidFasteDager.tid.timeHasNoValue':\n            'Du må fylle ut timer og minutter for {dag}.',\n        'arbeidstidPeriodeForm.validation.tidFasteDager.tid.hoursAreInvalid':\n            'Antall timer på {dag} er ikke et gyldig tall.',\n        'arbeidstidPeriodeForm.validation.tidFasteDager.tid.minutesAreInvalid':\n            'Antall minutter på {dag} er ikke et gyldig tall.',\n        'arbeidstidPeriodeForm.validation.tidFasteDager.tid.tooManyHours':\n            'Antall timer på {dag} kan ikke overstige 24 timer.',\n        'arbeidstidPeriodeForm.validation.tidFasteDager.tid.tooManyMinutes':\n            'Antall minutter på {dag}  kan ikke overstige 59 minutter.',\n        'arbeidstidPeriodeForm.validation.tidFasteDager.tid.durationIsTooLong':\n            'Antall timer og minutter registrert {dag} er for høyt. Tiden kan ikke overstige 24 timer hver ukedag.',\n        'arbeidstidPeriodeForm.validation.tidFasteDager.tid.durationIsTooShort':\n            'Antall timer og minutter {dag}  kan ikke være mindre enn 0 timer og 0 minutter.',\n        'arbeidstidPeriodeForm.validation.tidFasteDager.tid.minutesAreNegative':\n            'Antall timer og minutter {dag}  kan ikke være mindre enn 0 timer og 0 minutter.',\n        'arbeidstidPeriodeForm.validation.tidFasteDager.tid.hoursAreNegative':\n            'Antall timer og minutter {dag}  kan ikke være mindre enn 0 timer og 0 minutter.',\n    },\n};\n\nconst arbeidIPeriodeIntlValuesMessages = {\n    nb: {\n        'arbeidstidPeriode.arbeidIPeriodeIntlValues.harJobbet': 'har jobbet',\n        'arbeidstidPeriode.arbeidIPeriodeIntlValues.skalJobbe': 'skal jobbe',\n        'arbeidstidPeriode.arbeidIPeriodeIntlValues.somAnsatt': `hos {arbeidsstedNavn}`,\n        'arbeidstidPeriode.arbeidIPeriodeIntlValues.somFrilanser': 'som frilanser',\n        'arbeidstidPeriode.arbeidIPeriodeIntlValues.somSN': 'som selvstendig næringsdrivende',\n        'arbeidstidPeriode.arbeidIPeriodeIntlValues.iPerioden': `i perioden {fra} til {til}`,\n    },\n};\n\nexport const arbeidstidPeriodeMessages = {\n    nb: {\n        ...arbeidstidPeriodeFormFormMessages.nb,\n        ...arbeidIPeriodeIntlValuesMessages.nb,\n        'arbeidstidPeriodeDialog.contentLabel': 'Registrer jobb for en periode',\n        'arbeidstidPeriode.timer': '{timer, plural, one {# time} other {# timer}}',\n        'arbeidstidPeriode.timer.ikkeTall': `{timer} timer`,\n    },\n};\n\ntype ArbeidstidPeriodeMessagesType = keyof typeof arbeidstidPeriodeMessages.nb;\n\nexport const getArbeidstidPeriodeIntl = (intl: IntlShape) => typedIntlHelper<ArbeidstidPeriodeMessagesType>(intl);\n","import React from 'react';\nimport { FormattedNumber, useIntl } from 'react-intl';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { Duration, durationToDecimalDuration, ensureDuration } from '@navikt/sif-common-utils';\n\nconst DurationText = ({\n    duration,\n    fullText,\n    hideEmptyValues = false,\n    type,\n}: {\n    duration: Partial<Duration>;\n    fullText?: boolean;\n    hideEmptyValues?: boolean;\n    type?: 'digital' | 'decimal' | 'standard';\n}): JSX.Element => {\n    const timer = duration.hours || '0';\n    const minutter = duration.minutes || '0';\n    const intl = useIntl();\n\n    if (type === 'decimal') {\n        return (\n            <>\n                <FormattedNumber\n                    value={durationToDecimalDuration(ensureDuration(duration))}\n                    maximumFractionDigits={2}\n                />\n                {` `}t.\n            </>\n        );\n    } else if (type === 'digital') {\n        return (\n            <>\n                {timer}:{minutter}\n            </>\n        );\n    }\n\n    return (\n        <span style={{ whiteSpace: 'nowrap' }}>\n            {hideEmptyValues && timer === '0' && minutter !== '0' ? null : (\n                <span style={{ whiteSpace: 'nowrap' }}>\n                    {fullText ? (\n                        intlHelper(intl, 'timer', { timer })\n                    ) : (\n                        <>\n                            {timer}{' '}\n                            <span aria-label=\"timer\" style={{ marginLeft: '-.125rem' }}>\n                                t.{' '}\n                            </span>\n                        </>\n                    )}\n                </span>\n            )}\n            {` `}\n            {hideEmptyValues && minutter === '0' && timer !== '0' ? null : (\n                <span style={{ whiteSpace: 'nowrap' }}>\n                    {fullText ? (\n                        intlHelper(intl, 'minutter', { minutter })\n                    ) : (\n                        <>\n                            {minutter}{' '}\n                            <span aria-label=\"minutter\" style={{ marginLeft: '-.125rem' }}>\n                                m.\n                            </span>\n                        </>\n                    )}\n                </span>\n            )}\n        </span>\n    );\n};\n\nexport default DurationText;\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport dayjs from 'dayjs';\nimport { groupBy } from 'lodash';\nimport { Element, Undertittel } from 'nav-frontend-typografi';\nimport { DagMedTid } from '../..';\nimport DurationText from '../duration-text/DurationText';\nimport './dagerMedTidListe.less';\n\ninterface Props {\n    dagerMedTid: DagMedTid[];\n    visMåned?: boolean;\n    viseUke?: boolean;\n    visNormaltid?: boolean;\n}\n\nconst sortDays = (d1: DagMedTid, d2: DagMedTid): number => (dayjs(d1.dato).isSameOrBefore(d2.dato, 'day') ? -1 : 1);\n\nconst bem = bemUtils('dagerMedTidListe');\n\nexport const DagerMedTidListe = ({ dagerMedTid, viseUke, visMåned, visNormaltid }: Props) => {\n    const weeksWithDays = groupBy(dagerMedTid, (dag) => `${dag.dato.getFullYear()}-${dayjs(dag.dato).isoWeek()}`);\n    return (\n        <div className={bem.block}>\n            {visMåned && <Undertittel className=\"m-caps\">{dayjs(dagerMedTid[0].dato).format('MMM YYYY')}</Undertittel>}\n            <div className={bem.element('uker')}>\n                {Object.keys(weeksWithDays).map((key) => {\n                    const days = weeksWithDays[key];\n                    return (\n                        <div key={key} className={bem.element('uke')}>\n                            {viseUke && (\n                                <Element tag=\"h4\" className={bem.element('uketittel')}>\n                                    <FormattedMessage\n                                        id=\"dagerMedTid.uke\"\n                                        values={{ uke: dayjs(days[0].dato).isoWeek() }}\n                                    />\n                                </Element>\n                            )}\n                            <ol className={bem.element('dager')}>\n                                {days.sort(sortDays).map((dag, idx) => {\n                                    const timer = dag.tid.hours || '0';\n                                    const minutter = dag.tid.minutes || '0';\n\n                                    return (\n                                        <li key={idx}>\n                                            <div className={bem.element('dag')}>\n                                                <span className={bem.element('dag__dato')}>\n                                                    {dayjs(dag.dato).format('dddd DD.MM.YYYY')}:\n                                                </span>\n                                                <span className={bem.element('dag__tid')}>\n                                                    <DurationText\n                                                        duration={{ hours: timer, minutes: minutter }}\n                                                        fullText={true}\n                                                    />\n                                                    {visNormaltid && dag.normaltid && (\n                                                        <>\n                                                            . Normalt{' '}\n                                                            <DurationText duration={dag.normaltid} fullText={true} />.\n                                                        </>\n                                                    )}\n                                                </span>\n                                            </div>\n                                        </li>\n                                    );\n                                })}\n                            </ol>\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n};\n\nexport default DagerMedTidListe;\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { ISODateToDate, ISODurationToDuration } from '@navikt/sif-common-utils';\nimport dayjs from 'dayjs';\nimport groupBy from 'lodash.groupby';\nimport EkspanderbartPanel from 'nav-frontend-ekspanderbartpanel';\nimport DagerMedTidListe from '../../common/dager-med-tid-liste/DagerMedTidListe';\nimport { ArbeidstidEnkeltdagApiData, DagMedTid } from '../../types';\n\ninterface Props {\n    dager: ArbeidstidEnkeltdagApiData[];\n    visNormaltid?: boolean;\n}\n\nconst ArbeidstidEnkeltdagerListe: React.FunctionComponent<Props> = ({ dager, visNormaltid }) => {\n    const arbeidsdager: DagMedTid[] = [];\n    dager.forEach((dag) => {\n        const dato = ISODateToDate(dag.dato);\n        const tid = ISODurationToDuration(dag.arbeidstimer.faktiskTimer);\n        const normaltid = ISODurationToDuration(dag.arbeidstimer.normalTimer);\n        if (dato !== undefined && tid !== undefined) {\n            arbeidsdager.push({ dato, tid, normaltid });\n        }\n    });\n\n    const ingenDagerRegistrertMelding = <FormattedMessage id=\"dagerMedTid.ingenDagerRegistrert\" />;\n    if (dager.length === 0) {\n        return ingenDagerRegistrertMelding;\n    }\n\n    const months = groupBy(arbeidsdager, ({ dato }) => `${dato.getFullYear()}.${dato.getMonth()}`);\n    return (\n        <div>\n            {Object.keys(months).map((key) => {\n                const dagerMedTid = months[key];\n                if (dagerMedTid.length === 0) {\n                    return ingenDagerRegistrertMelding;\n                }\n                return (\n                    <Box margin=\"m\" key={key}>\n                        <EkspanderbartPanel\n                            tittel={\n                                <span style={{ textTransform: 'capitalize', fontSize: '1rem' }}>\n                                    {dayjs(dagerMedTid[0].dato).format('MMMM YYYY')}\n                                </span>\n                            }>\n                            <DagerMedTidListe dagerMedTid={dagerMedTid} viseUke={true} visNormaltid={visNormaltid} />\n                        </EkspanderbartPanel>\n                    </Box>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default ArbeidstidEnkeltdagerListe;\n","import datepickerUtils from '@navikt/sif-common-formik/lib/components/formik-datepicker/datepickerUtils';\nimport {\n    DateDurationMap,\n    DateRange,\n    dateToISODate,\n    Duration,\n    getDatesInDateRange,\n    getFirstWeekdayOnOrAfterDate,\n    getLastWeekdayOnOrBeforeDate,\n    getMonthDateRange,\n    getWeekDateRange,\n    isDateWeekDay,\n    ISODate,\n    nthItemFilter,\n} from '@navikt/sif-common-utils';\nimport dayjs from 'dayjs';\nimport { GjentagelseEnkeltdag, GjentagelseType, TidEnkeltdagFormValues } from './TidEnkeltdagForm';\n\nconst getDagerMedInterval = (interval: number, periode: DateRange) => {\n    const ukedag = dayjs(periode.from).isoWeekday();\n    const datoer = getDatesInDateRange(periode, true);\n    const dager = datoer.filter((dato) => dayjs(dato).isoWeekday() === ukedag);\n    return dager.filter((_, index) => {\n        return nthItemFilter(index, interval);\n    });\n};\n\nconst getGjentagendeDager = (endringsperiode: DateRange, dato: Date, gjentagelse?: GjentagelseEnkeltdag): ISODate[] => {\n    if (gjentagelse) {\n        let gjentagendeDatoer: Date[] = [];\n        const periode: DateRange = {\n            from: dato,\n            to: gjentagelse.tom || endringsperiode.to,\n        };\n        if (gjentagelse.gjentagelsetype === GjentagelseType.hverUke) {\n            gjentagendeDatoer = getDagerMedInterval(1, periode);\n        }\n        if (gjentagelse.gjentagelsetype === GjentagelseType.hverAndreUke) {\n            gjentagendeDatoer = getDagerMedInterval(2, periode);\n        }\n        if (gjentagelse.gjentagelsetype === GjentagelseType.heleUken) {\n            gjentagendeDatoer = getDatesInDateRange(getWeekDateRange(periode.from), true);\n        }\n        if (gjentagelse.gjentagelsetype === GjentagelseType.heleMåneden) {\n            gjentagendeDatoer = getDatesInDateRange(getMonthDateRange(periode.from), true);\n        }\n        return gjentagendeDatoer.filter(isDateWeekDay).map((date) => dateToISODate(date));\n    }\n    return [dateToISODate(dato)];\n};\n\nexport const getDagerMedNyTid = (\n    endringsperiode: DateRange,\n    dato: Date,\n    varighet: Duration,\n    gjentagelse?: GjentagelseEnkeltdag\n): DateDurationMap => {\n    const datoerMedTid: DateDurationMap = {};\n    const datoerSomSkalEndres = getGjentagendeDager(endringsperiode, dato, gjentagelse);\n    datoerSomSkalEndres.forEach((isoDate) => {\n        datoerMedTid[isoDate] = { ...varighet };\n    });\n    datoerMedTid[dateToISODate(dato)] = { ...varighet };\n    return datoerMedTid;\n};\n\nexport const getGjentagelseEnkeltdagFraFormValues = (\n    values: Partial<TidEnkeltdagFormValues>\n): GjentagelseEnkeltdag | undefined => {\n    const gjentagelse: GjentagelseEnkeltdag | undefined =\n        values.gjentagelse && values.skalGjentas === true\n            ? {\n                  gjentagelsetype: values.gjentagelse,\n                  tom: values.stopDato ? datepickerUtils.getDateFromDateString(values.stopDato) : undefined,\n              }\n            : undefined;\n    return gjentagelse;\n};\n\nexport const getDateRangeWithinDateRange = (range: DateRange, limitRange: DateRange): DateRange => {\n    return {\n        from: dayjs.max(dayjs(range.from), dayjs(limitRange.from)).toDate(),\n        to: dayjs.min(dayjs(range.to), dayjs(limitRange.to)).toDate(),\n    };\n};\nexport const trimDateRangeToWeekdays = (range: DateRange): DateRange => {\n    return {\n        from: getFirstWeekdayOnOrAfterDate(range.from),\n        to: getLastWeekdayOnOrBeforeDate(range.to),\n    };\n};\n","import { InputTime } from '@navikt/sif-common-formik/lib';\nimport getTimeValidator from '@navikt/sif-common-formik/lib/validation/getTimeValidator';\nimport { ValidationError, ValidationResult } from '@navikt/sif-common-formik/lib/validation/types';\nimport { NumberDuration } from '@navikt/sif-common-utils/lib';\n\nexport const getTidEnkeltdagFormTidValidator =\n    (maksTid: NumberDuration, minTid: NumberDuration = { hours: 0, minutes: 0 }) =>\n    (time: InputTime): ValidationResult<ValidationError> => {\n        const error = getTimeValidator({ required: true, max: maksTid, min: minTid })(time);\n        if (error) {\n            return {\n                key: `tidEnkeltdagForm.validation.tid.${error}`,\n                keepKeyUnaltered: true,\n                values: {\n                    maksTimer: maksTid.hours,\n                    maksMinutter: maksTid.minutes,\n                    minTimer: minTid.hours,\n                    minMinutter: minTid.minutes,\n                },\n            };\n        }\n        return undefined;\n    };\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { DateRange, getTypedFormComponents, InputTime } from '@navikt/sif-common-formik/lib';\nimport { getDateValidator, getRequiredFieldValidator } from '@navikt/sif-common-formik/lib/validation';\nimport getIntlFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport {\n    DateDurationMap,\n    dateFormatter,\n    Duration,\n    durationsAreEqual,\n    ensureDuration,\n    getLastWeekdayOnOrBeforeDate,\n    getMonthDateRange,\n    getNumberOfDaysInDateRange,\n    getWeekDateRange,\n    NumberDuration,\n} from '@navikt/sif-common-utils';\nimport dayjs from 'dayjs';\nimport minMax from 'dayjs/plugin/minMax';\nimport { InputDateString } from 'nav-datovelger/lib/types';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { DurationText } from '../..';\nimport {\n    getDagerMedNyTid,\n    getDateRangeWithinDateRange,\n    getGjentagelseEnkeltdagFraFormValues,\n    trimDateRangeToWeekdays,\n} from './tidEnkeltdagUtils';\nimport { getTidEnkeltdagFormTidValidator } from './tidEnkeltdagValidation';\nimport ResponsivePanel from '@navikt/sif-common-core/lib/components/responsive-panel/ResponsivePanel';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\n\ndayjs.extend(minMax);\n\nexport interface TidEnkeltdagFormProps {\n    periode: DateRange;\n    dato: Date;\n    tid?: Partial<Duration>;\n    tidOpprinnelig?: Duration;\n    maksTid?: NumberDuration;\n    minTid?: NumberDuration;\n    hvorMyeSpørsmålRenderer: (date: Date) => string;\n    onSubmit: (dagerMedTid: TidEnkeltdagEndring) => void;\n    onCancel: () => void;\n}\n\nexport interface GjentagelseEnkeltdag {\n    gjentagelsetype: GjentagelseType;\n    tom?: Date;\n}\n\nexport interface TidEnkeltdagEndring {\n    dagerMedTid: DateDurationMap;\n}\n\nconst visStoppGjentagelse = false;\n\nenum FormFields {\n    'tid' = 'tid',\n    'skalGjentas' = 'skalGjentas',\n    'gjentagelse' = 'gjentagelse',\n    'stoppGjentagelse' = 'stoppGjentagelse',\n    'stopDato' = 'stopDato',\n}\n\nexport enum GjentagelseType {\n    hverUke = 'hverUke',\n    hverAndreUke = 'hverAndreUke',\n    heleUken = 'heleUken',\n    heleMåneden = 'heleMåneden',\n}\n\nexport interface TidEnkeltdagFormValues {\n    [FormFields.tid]: InputTime;\n    [FormFields.skalGjentas]: boolean;\n    [FormFields.gjentagelse]: GjentagelseType;\n    [FormFields.stoppGjentagelse]: boolean;\n    [FormFields.stopDato]: InputDateString;\n}\n\nconst FormComponents = getTypedFormComponents<FormFields, TidEnkeltdagFormValues, ValidationError>();\n\nconst bem = bemUtils('tidEnkeltdagForm');\n\nconst TidEnkeltdagForm: React.FunctionComponent<TidEnkeltdagFormProps> = ({\n    dato,\n    tid,\n    tidOpprinnelig,\n    periode,\n    maksTid = { hours: 24, minutes: 0 },\n    minTid = { hours: 0, minutes: 0 },\n    hvorMyeSpørsmålRenderer,\n    onSubmit,\n    onCancel,\n}) => {\n    const intl = useIntl();\n\n    const onValidSubmit = (values: Partial<TidEnkeltdagFormValues>) => {\n        if (values.tid) {\n            onSubmit({\n                dagerMedTid: getDagerMedNyTid(periode, dato, values.tid, getGjentagelseEnkeltdagFraFormValues(values)),\n            });\n        }\n    };\n\n    const erEndret = durationsAreEqual(tid, tidOpprinnelig) === false;\n    const dagNavn = dayjs(dato).format('dddd');\n    const dagerNavn = `${dayjs(dato).format('dddd')}er`;\n    const valgtDatoTxt = dateFormatter.dayDateMonthYear(dato);\n\n    const ukePeriode: DateRange = trimDateRangeToWeekdays(\n        getDateRangeWithinDateRange(getWeekDateRange(dato, true), periode)\n    );\n    const ukeErHel = dayjs(ukePeriode.from).isoWeekday() === 1 && dayjs(ukePeriode.to).isoWeekday() === 5;\n    const månedPeriode: DateRange = trimDateRangeToWeekdays(\n        getDateRangeWithinDateRange(getMonthDateRange(dato, true), periode)\n    );\n    const månedErHel =\n        dayjs(periode.from).isBefore(månedPeriode.from, 'month') && dayjs(periode.to).isAfter(månedPeriode.to, 'month');\n\n    const ukePeriodeStartTxt = dateFormatter.dayDateShortMonth(ukePeriode.from);\n    const ukePeriodeSluttTxt = dateFormatter.dayDateShortMonth(ukePeriode.to);\n\n    const månedPeriodeStartTxt = dateFormatter.dayDateShortMonth(månedPeriode.from);\n    const månedPeriodeSluttTxt = dateFormatter.dayDateShortMonth(månedPeriode.to);\n\n    const ukeNavn = `${dayjs(dato).isoWeek()}`;\n    const månedNavn = dayjs(dato).format('MMMM YYYY');\n\n    const sluttDatoTxt = dateFormatter.dayDateShortMonth(getLastWeekdayOnOrBeforeDate(periode.to));\n\n    const skalViseValgetGjelderFlereDager = getNumberOfDaysInDateRange(periode) > 2;\n\n    const renderGjentagelseRadioLabel = (\n        key: string,\n        periode?: { fra: string; til: string },\n        values?: any\n    ): JSX.Element => (\n        <>\n            <FormattedMessage id={`tidEnkeltdagForm.gjentagelse.${key}`} values={{ ...values, ...periode }} />\n            {/* <div style={{ fontSize: '0.9rem' }}>\n                <FormattedMessage\n                    id=\"tidEnkeltdagForm.gjentagelse.periode\"\n                    values={{\n                        ...values,\n                        ...periode,\n                    }}\n                />\n            </div> */}\n        </>\n    );\n\n    return (\n        <div>\n            <Undertittel tag=\"h1\" className=\"dialogFormTitle\">\n                <span className=\"m-caps\">{dagNavn}</span> {dateFormatter.full(dato)}\n            </Undertittel>\n            <FormBlock margin=\"l\">\n                <FormComponents.FormikWrapper\n                    enableReinitialize={true}\n                    initialValues={{\n                        tid: tid ? ensureDuration(tid) : undefined,\n                    }}\n                    onSubmit={onValidSubmit}\n                    renderForm={({ values: { skalGjentas, stoppGjentagelse, gjentagelse } }) => {\n                        return (\n                            <FormComponents.Form\n                                onCancel={onCancel}\n                                formErrorHandler={getIntlFormErrorHandler(intl, 'tidEnkeltdagForm.validation')}\n                                includeValidationSummary={false}\n                                includeButtons={true}\n                                submitButtonLabel=\"Lagre\"\n                                cancelButtonLabel=\"Avbryt\">\n                                <FormComponents.TimeInput\n                                    name={FormFields.tid}\n                                    label={hvorMyeSpørsmålRenderer(dato)}\n                                    validate={getTidEnkeltdagFormTidValidator(maksTid, minTid)}\n                                    timeInputLayout={{ justifyContent: 'left', compact: false, direction: 'vertical' }}\n                                />\n                                {tidOpprinnelig && erEndret && (\n                                    <p>\n                                        <FormattedMessage id=\"tidEnkeltdagForm.endretFra\" />{' '}\n                                        <DurationText duration={tidOpprinnelig} fullText={true} />\n                                    </p>\n                                )}\n                                {skalViseValgetGjelderFlereDager && (\n                                    <FormBlock margin=\"l\">\n                                        <FormComponents.Checkbox\n                                            label={intlHelper(intl, 'tidEnkeltdagForm.gjelderFlereDager.label')}\n                                            name={FormFields.skalGjentas}\n                                        />\n                                    </FormBlock>\n                                )}\n                                {skalGjentas === true && (\n                                    <Box margin=\"l\">\n                                        <ResponsivePanel>\n                                            {/* <div style={{ paddingLeft: '1.5rem' }}> */}\n\n                                            <FormComponents.RadioGroup\n                                                legend={intlHelper(intl, 'tidEnkeltdagForm.gjelderFlereDager.info')}\n                                                className={bem.element('gjentagelseOptions')}\n                                                name={FormFields.gjentagelse}\n                                                validate={getRequiredFieldValidator()}\n                                                radios={[\n                                                    {\n                                                        label: renderGjentagelseRadioLabel(\n                                                            ukeErHel ? 'helUke' : 'delAvUke',\n                                                            {\n                                                                fra: ukePeriodeStartTxt,\n                                                                til: ukePeriodeSluttTxt,\n                                                            },\n                                                            { ukeNavn }\n                                                        ),\n                                                        value: GjentagelseType.heleUken,\n                                                    },\n                                                    {\n                                                        label: renderGjentagelseRadioLabel(\n                                                            månedErHel ? 'helMåned' : 'delAvMåned',\n                                                            {\n                                                                fra: månedPeriodeStartTxt,\n                                                                til: månedPeriodeSluttTxt,\n                                                            },\n                                                            { månedNavn }\n                                                        ),\n                                                        value: GjentagelseType.heleMåneden,\n                                                    },\n                                                    {\n                                                        label: renderGjentagelseRadioLabel(\n                                                            'dagerFremover',\n                                                            {\n                                                                fra: valgtDatoTxt,\n                                                                til: sluttDatoTxt,\n                                                            },\n                                                            { dagerNavn }\n                                                        ),\n\n                                                        value: GjentagelseType.hverUke,\n                                                    },\n                                                ]}\n                                            />\n                                            {visStoppGjentagelse && (\n                                                <>\n                                                    {(gjentagelse === GjentagelseType.hverUke ||\n                                                        gjentagelse === GjentagelseType.hverAndreUke) && (\n                                                        <div style={{ marginLeft: '1.5rem' }}>\n                                                            <FormBlock margin=\"m\">\n                                                                <FormComponents.Checkbox\n                                                                    label={intlHelper(\n                                                                        intl,\n                                                                        'tidEnkeltdagForm.stoppGjentagelse.label'\n                                                                    )}\n                                                                    name={FormFields.stoppGjentagelse}\n                                                                />\n                                                            </FormBlock>\n                                                            {stoppGjentagelse && (\n                                                                <FormBlock margin=\"l\">\n                                                                    <FormComponents.DatePicker\n                                                                        label={intlHelper(\n                                                                            intl,\n                                                                            'tidEnkeltdagForm.stopDato.label'\n                                                                        )}\n                                                                        minDate={dato}\n                                                                        maxDate={periode.to}\n                                                                        validate={getDateValidator({\n                                                                            min: dato,\n                                                                            max: periode.to,\n                                                                            required: true,\n                                                                        })}\n                                                                        disableWeekend={true}\n                                                                        fullScreenOnMobile={true}\n                                                                        fullscreenOverlay={true}\n                                                                        dayPickerProps={{\n                                                                            initialMonth: dato,\n                                                                        }}\n                                                                        name={FormFields.stopDato}\n                                                                    />\n                                                                </FormBlock>\n                                                            )}\n                                                        </div>\n                                                    )}\n                                                </>\n                                            )}\n                                        </ResponsivePanel>\n                                    </Box>\n                                )}\n                            </FormComponents.Form>\n                        );\n                    }}\n                />\n            </FormBlock>\n        </div>\n    );\n};\n\nexport default TidEnkeltdagForm;\n","import React from 'react';\nimport { dateFormatter } from '@navikt/sif-common-utils/lib/dateFormatter';\nimport Modal from 'nav-frontend-modal';\nimport TidEnkeltdagForm, { TidEnkeltdagFormProps } from './TidEnkeltdagForm';\nimport './tidEnkeltdagDialog.less';\n\nexport interface TidEnkeltdagDialogProps {\n    isOpen?: boolean;\n    dialogTitle: string;\n    formProps: TidEnkeltdagFormProps;\n}\n\nconst TidEnkeltdagDialog: React.FunctionComponent<TidEnkeltdagDialogProps> = ({\n    isOpen = false,\n    dialogTitle,\n    formProps,\n}) => {\n    if (!isOpen) {\n        return null;\n    }\n    return isOpen ? (\n        <Modal\n            isOpen={isOpen}\n            contentLabel={`${dialogTitle} ${dateFormatter.dayDateMonthYear(formProps.dato)}`}\n            onRequestClose={formProps.onCancel}\n            shouldCloseOnOverlayClick={false}\n            className=\"tidEnkeltdagDialog\">\n            <TidEnkeltdagForm {...formProps} />\n        </Modal>\n    ) : null;\n};\n\nexport default TidEnkeltdagDialog;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { dateFormatter, dateToday } from '@navikt/sif-common-utils/lib';\nimport dayjs from 'dayjs';\nimport TidEnkeltdagDialog, { TidEnkeltdagDialogProps } from '../../tid/tid-enkeltdag-dialog/TidEnkeltdagDialog';\nimport { TidEnkeltdagFormProps } from '../../tid/tid-enkeltdag-dialog/TidEnkeltdagForm';\nimport { ArbeidsforholdType } from '../../types';\n\ninterface Props extends Omit<TidEnkeltdagDialogProps, 'dialogTitle' | 'formProps'> {\n    arbeidsstedNavn: string;\n    arbeidsforholdType: ArbeidsforholdType;\n    formProps: Omit<TidEnkeltdagFormProps, 'hvorMyeSpørsmålRenderer'>;\n}\n\nconst ArbeidstidEnkeltdagDialog: React.FunctionComponent<Props> = ({\n    isOpen,\n    arbeidsforholdType,\n    arbeidsstedNavn,\n    formProps,\n}: Props) => {\n    const intl = useIntl();\n    const hvorMyeSpørsmålRenderer = (dato: Date): string => {\n        const erHistorisk = dayjs(dato).isBefore(dateToday, 'day');\n        const intlValues = {\n            skalEllerHarJobbet: intlHelper(\n                intl,\n                erHistorisk ? 'arbeidstidEnkeltdagForm.jobbet' : 'arbeidstidEnkeltdagForm.skalJobbe'\n            ),\n            hvor: intlHelper(intl, `arbeidstidEnkeltdagForm.som.${arbeidsforholdType}`, { navn: arbeidsstedNavn }),\n            når: dateFormatter.dayDateShortMonthYear(dato),\n        };\n        return intlHelper(intl, 'arbeidstidEnkeltdagForm.tid.spm', intlValues);\n    };\n    return (\n        <TidEnkeltdagDialog\n            isOpen={isOpen}\n            dialogTitle={intlHelper(intl, 'arbeidstidEnkeltdagDialog.contentTitle')}\n            formProps={{ ...formProps, hvorMyeSpørsmålRenderer, maksTid: { hours: 24, minutes: 0 } }}\n        />\n    );\n};\n\nexport default ArbeidstidEnkeltdagDialog;\n","import React from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport { Time } from '@navikt/sif-common-core/lib/types/Time';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { ISODurationToDuration } from '@navikt/sif-common-utils';\nimport { ArbeidstimerApiData, ArbeidstimerFasteDagerApiData } from '../../types';\n\ninterface Props {\n    fasteDager?: ArbeidstimerFasteDagerApiData;\n    visNormaltid?: boolean;\n}\n\nconst formatTime = (intl: IntlShape, time: Partial<Time>): string => {\n    const timer = time.hours || '0';\n    const minutter = time.minutes || '0';\n    return intlHelper(intl, 'timerOgMinutter', { timer, minutter });\n};\n\nconst ArbeidstidFasteDagerListe: React.FunctionComponent<Props> = ({ fasteDager, visNormaltid }) => {\n    const intl = useIntl();\n\n    if (fasteDager) {\n        const ukedager = Object.keys(fasteDager).filter((day) => fasteDager[day] !== undefined);\n        if (ukedager.length > 0) {\n            return (\n                <ul style={{ marginTop: 0 }}>\n                    {ukedager.map((ukedag, idx) => {\n                        const arbeidstimer: ArbeidstimerApiData = fasteDager[ukedag];\n                        const durationFaktiskTimer = ISODurationToDuration(arbeidstimer.faktiskTimer);\n                        const durationNormalTimer = ISODurationToDuration(arbeidstimer.normalTimer);\n                        return (\n                            <li key={idx} style={{ marginBottom: '.25rem' }}>\n                                {`${intlHelper(intl, `dagerMedTid.${ukedag}er`)}: ${\n                                    durationFaktiskTimer ? formatTime(intl, durationFaktiskTimer) : 0\n                                }`}\n                                {visNormaltid && durationNormalTimer && (\n                                    <>\n                                        .\n                                        <br />\n                                        {intlHelper(intl, 'dagerMedTid.normaltTimer', {\n                                            timer: formatTime(intl, durationNormalTimer),\n                                        })}\n                                        .\n                                    </>\n                                )}\n                            </li>\n                        );\n                    })}\n                </ul>\n            );\n        }\n    }\n    return <>{intlHelper(intl, 'dagerMedTid.ingenDagerRegistrert')}</>;\n};\n\nexport default ArbeidstidFasteDagerListe;\n","import React from 'react';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { dateFormatter, dateToISODate } from '@navikt/sif-common-utils';\n\ninterface Props {\n    date: Date;\n    dateRendererShort?: (date: Date) => React.ReactNode;\n    dateRendererFull?: (date: Date) => React.ReactNode;\n}\n\nconst bem = bemUtils('calendarGrid');\n\nconst CalendarGridDate: React.FunctionComponent<Props> = ({\n    date,\n    dateRendererShort = dateFormatter.compact,\n    dateRendererFull = dateFormatter.dayDateMonth,\n}) => {\n    const id = `${dateToISODate(date)}_date`;\n\n    const content = (\n        <>\n            <span className={bem.classNames(bem.element('date__full'))}>\n                <span>{dateRendererFull(date)}</span>\n            </span>\n            <span className={bem.element('date__short')} id={id}>\n                {dateRendererShort(date)}\n            </span>\n        </>\n    );\n\n    return <span className={bem.element('date')}>{content}</span>;\n};\nexport default CalendarGridDate;\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { DateRange } from '@navikt/sif-common-formik/lib';\nimport {\n    dateFormatter,\n    dateToISODate,\n    getDatesInDateRange,\n    getDatesInMonth,\n    isDateInDates,\n} from '@navikt/sif-common-utils/';\nimport dayjs from 'dayjs';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport utc from 'dayjs/plugin/utc';\nimport { groupBy } from 'lodash';\nimport CalendarGridDate from './CalendarGridDate';\nimport './calendarGrid.less';\n\ndayjs.extend(isSameOrBefore);\ndayjs.extend(utc);\n\ninterface WeekToRender {\n    weekNumber: number;\n    dates: Date[];\n}\n\ninterface Props {\n    month: DateRange;\n    renderAsList?: boolean;\n    disabledDates?: Date[];\n    disabledDateInfo?: string;\n    hideEmptyContentInListMode?: boolean;\n    hideWeeksWithOnlyDisabledContent?: boolean;\n    onDateClick?: (date: Date) => void;\n    dateContentRenderer: (date: Date, isDisabled?: boolean) => React.ReactNode;\n    dateRendererShort?: (date: Date) => React.ReactNode;\n    dateRendererFull?: (date: Date) => React.ReactNode;\n    allDaysInWeekDisabledContentRenderer?: () => React.ReactNode;\n}\n\nconst getFullWeeksForDates = (dates: Date[], month: Date): Date[] => {\n    const dayOfWeek = dates[0].getUTCDay();\n    const firstDateInWeek = dayjs(dates[0]).startOf('isoWeek').toDate();\n    if (dayOfWeek > 0 && dayjs(firstDateInWeek).isSame(month, 'month') === false) {\n        return [\n            ...getDatesInDateRange({ from: firstDateInWeek, to: dayjs(dates[0]).subtract(1, 'day').toDate() }, true),\n            ...dates,\n        ];\n    }\n    return dates;\n};\n\nconst getWeeks = (dates: Date[], month: Date): WeekToRender[] => {\n    const datesToRender = getFullWeeksForDates(dates, month);\n    const weeksAndDays = groupBy(datesToRender, (date) => `week_${dayjs(date).isoWeek()}`);\n    const weeks: WeekToRender[] = [];\n    Object.keys(weeksAndDays).forEach((key) => {\n        const weekDates = weeksAndDays[key];\n        const weekHasDatesInMonth = weekDates.some((d) => dayjs(d).isSame(month, 'month'));\n        if (weekHasDatesInMonth && weekDates.length > 0) {\n            weeks.push({\n                weekNumber: dayjs(weekDates[0]).isoWeek(),\n                dates: weekDates,\n            });\n        }\n    });\n    return weeks;\n};\n\nconst bem = bemUtils('calendarGrid');\n\nconst CalendarGrid: React.FunctionComponent<Props> = ({\n    month,\n    disabledDates,\n    disabledDateInfo,\n    renderAsList,\n    hideEmptyContentInListMode,\n    hideWeeksWithOnlyDisabledContent,\n    onDateClick,\n    dateContentRenderer,\n    dateRendererShort = dateFormatter.compact,\n    dateRendererFull = dateFormatter.dayDateMonth,\n    allDaysInWeekDisabledContentRenderer,\n}) => {\n    const weekdatesInMonth = getDatesInMonth(month.from, true);\n    const weeks = getWeeks(weekdatesInMonth, month.from);\n\n    const renderDate = (date: Date) => {\n        const dateKey = date.toDateString();\n        const dateIsDisabled = isDateInDates(date, disabledDates);\n        const renderAsButton = onDateClick !== undefined && dateIsDisabled === false;\n\n        const ButtonOrDivComponent = renderAsButton ? 'button' : 'div';\n        return dayjs(date).isSame(month.from, 'month') === false ? (\n            <div key={dateKey} aria-hidden={true} className={bem.classNames(bem.element('day', 'outsideMonth'))} />\n        ) : (\n            <ButtonOrDivComponent\n                key={dateKey}\n                {...(renderAsButton\n                    ? {\n                          onClick: (evt) => {\n                              evt.stopPropagation();\n                              evt.preventDefault();\n                              onDateClick(date);\n                          },\n                          type: 'button',\n                      }\n                    : {})}\n                data-testid={`calendar-grid-date-${dateToISODate(date)}`}\n                title={dateIsDisabled ? disabledDateInfo : undefined}\n                aria-hidden={dateIsDisabled}\n                className={bem.classNames(\n                    bem.child('day').block,\n                    bem.child('day').modifierConditional('disabled', dateIsDisabled),\n                    bem.child('day').modifierConditional('button', renderAsButton)\n                )}>\n                <CalendarGridDate\n                    date={date}\n                    dateRendererFull={dateRendererFull}\n                    dateRendererShort={dateRendererShort}\n                />\n                <div className={bem.child('day').element('content')}>{dateContentRenderer(date, dateIsDisabled)}</div>\n            </ButtonOrDivComponent>\n        );\n    };\n\n    const renderWeek = (week: WeekToRender) => {\n        const datesInWeek = week.dates;\n        const weekNum = week.weekNumber;\n        const areAllDaysInWeekDisabledOrOutsideMonth =\n            datesInWeek.filter(\n                (date) =>\n                    isDateInDates(date, disabledDates) === true || dayjs(date).isSame(month.from, 'month') === false\n            ).length === datesInWeek.length;\n\n        if (hideWeeksWithOnlyDisabledContent && areAllDaysInWeekDisabledOrOutsideMonth) {\n            return null;\n        }\n        return [\n            <div\n                key={week.weekNumber}\n                data-testid={`calendar-grid-week-number-${week.weekNumber}`}\n                aria-hidden={true}\n                className={bem.element('weekNum', areAllDaysInWeekDisabledOrOutsideMonth ? 'empty' : undefined)}>\n                <span className={bem.element('weekNum_label')} role=\"presentation\" aria-hidden={true}>\n                    <FormattedMessage id=\"calendarGrid.Uke\" /> {` `}\n                </span>\n                <span>\n                    <span className=\"sr-only\">Uke </span>\n                    {weekNum}\n                </span>\n                {areAllDaysInWeekDisabledOrOutsideMonth && allDaysInWeekDisabledContentRenderer ? (\n                    <div className={bem.element('allWeekDisabledContent')}>\n                        {allDaysInWeekDisabledContentRenderer()}\n                    </div>\n                ) : undefined}\n            </div>,\n            datesInWeek.map(renderDate),\n        ];\n    };\n    return (\n        <div\n            className={bem.classNames(\n                bem.block,\n                bem.modifierConditional('hideEmptyContentInListMode', hideEmptyContentInListMode),\n                bem.modifier(renderAsList ? 'list' : 'grid')\n            )}>\n            <span aria-hidden={true} className={bem.element('dayHeader', 'week')}>\n                <FormattedMessage id=\"calendarGrid.Uke\" />\n            </span>\n            <span aria-hidden={true} className={bem.element('dayHeader')}>\n                <FormattedMessage id=\"calendarGrid.Mandag\" />\n            </span>\n            <span aria-hidden={true} className={bem.element('dayHeader')}>\n                <FormattedMessage id=\"calendarGrid.Tirsdag\" />\n            </span>\n            <span aria-hidden={true} className={bem.element('dayHeader')}>\n                <FormattedMessage id=\"calendarGrid.Onsdag\" />\n            </span>\n            <span aria-hidden={true} className={bem.element('dayHeader')}>\n                <FormattedMessage id=\"calendarGrid.Torsdag\" />\n            </span>\n            <span aria-hidden={true} className={bem.element('dayHeader')}>\n                <FormattedMessage id=\"calendarGrid.Fredag\" />\n            </span>\n            {weeks.map(renderWeek)}\n        </div>\n    );\n};\n\nexport default CalendarGrid;\n","import React, { ReactNode } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport './labelInputInfoLayout.less';\n\ninterface Props {\n    narrowBreakpoint?: number;\n    label: ReactNode;\n    input: ReactNode;\n    info?: ReactNode;\n}\n\nconst bem = bemUtils('labelInputInfoLayout');\n\nconst LabelInputInfoLayout: React.FunctionComponent<Props> = ({ narrowBreakpoint = 860, label, input, info }) => {\n    const isNarrow = useMediaQuery({\n        query: `(max-width: ${narrowBreakpoint}px)`,\n    });\n    return (\n        <div className={bem.classNames(bem.block, bem.modifierConditional('narrow', isNarrow))}>\n            <div className={bem.element('labelWrapper')} role=\"presentation\" aria-hidden={true}>\n                {label}\n            </div>\n            <div className={bem.element('inputWrapper')}>{input}</div>\n            {info && <div className={bem.element('infoWrapper')}>{info}</div>}\n        </div>\n    );\n};\n\nexport default LabelInputInfoLayout;\n","import React from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { InputTime } from '@navikt/sif-common-formik/lib';\n\nexport const formatTimerOgMinutter = (intl: IntlShape, time: Partial<InputTime>): string => {\n    const timer = time.hours || '0';\n    const minutter = time.minutes || '0';\n    if (minutter === '0') {\n        return intlHelper(intl, 'timer', { timer });\n    }\n    if (timer === '0') {\n        return intlHelper(intl, 'minutter', { minutter });\n    }\n    return intlHelper(intl, 'timerOgMinutter', { timer, minutter });\n};\n\ninterface Props {\n    timer?: string | number;\n    minutter?: string | number;\n}\n\nconst TimerOgMinutter: React.FunctionComponent<Props> = ({ timer, minutter }) => {\n    const intl = useIntl();\n    const numTimer = parseInt(`${timer}`, 10);\n    const numMinutter = minutter ? parseInt(`${minutter}`, 10) : 0;\n    return <span>{formatTimerOgMinutter(intl, { hours: `${numTimer}`, minutes: `${numMinutter}` })}</span>;\n};\n\nexport default TimerOgMinutter;\n","import { ComponentMessages } from '../../i18n';\n\ninterface Messages {\n    Mandager: string;\n    Tirsdager: string;\n    Onsdager: string;\n    Torsdager: string;\n    Fredager: string;\n    mandag: string;\n    tirsdag: string;\n    onsdag: string;\n    torsdag: string;\n    fredag: string;\n}\n\nconst nb: Messages = {\n    Mandager: 'Mandager',\n    Tirsdager: 'Tirsdager',\n    Onsdager: 'Onsdager',\n    Torsdager: 'Torsdager',\n    Fredager: 'Fredager',\n    mandag: 'mandag',\n    tirsdag: 'tirsdag',\n    onsdag: 'onsdag',\n    torsdag: 'torsdag',\n    fredag: 'fredag',\n};\n\nexport const tidUkerdagerInputMessages: ComponentMessages<Messages> = {\n    nb: nb,\n};\n\nexport const getTidFasteUkerdagerInputMessages = (locale: string): Messages => {\n    switch (locale) {\n        case 'nn':\n            return tidUkerdagerInputMessages.nn;\n        default:\n            return tidUkerdagerInputMessages.nb;\n    }\n};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { FormikInputGroup, FormikTimeInput, TestProps } from '@navikt/sif-common-formik';\nimport { ValidationError, ValidationResult } from '@navikt/sif-common-formik/lib/validation/types';\nimport { Weekday } from '@navikt/sif-common-utils';\nimport { LabelInputInfoLayout } from '../../common';\nimport { getTidFasteUkerdagerInputMessages } from '../../tid/tid-faste-ukedager-input/tidFasteUkerdagerInputMessages';\nimport './arbeidstidFasteUkedagerInput.less';\n\nexport interface ArbeidstidUkeTekster {\n    dag: React.ReactNode;\n    jobber: React.ReactNode;\n    ariaLabelTidInput: (dagNavn: string) => React.ReactNode;\n}\ninterface OwnProps {\n    fieldName: string;\n    utilgjengeligeUkedager?: Weekday[];\n    skjulUtilgjengeligeUkedager?: boolean;\n    tidPerDagValidator?: (weekday: Weekday, value: any) => ValidationResult<ValidationError>;\n    tekst: ArbeidstidUkeTekster;\n}\n\ntype Props = OwnProps & TestProps;\n\nconst bem = bemUtils('arbeidstidFasteUkedagerInput');\n\nconst ArbeidstidFasteUkedagerInput: React.FunctionComponent<Props> = ({\n    fieldName,\n    tidPerDagValidator,\n    utilgjengeligeUkedager,\n    skjulUtilgjengeligeUkedager,\n    tekst,\n    'data-testid': testId,\n}: Props) => {\n    const txt = getTidFasteUkerdagerInputMessages(useIntl().locale);\n\n    const renderWeekdayTimeInput = (weekday: Weekday, weekdayLabel: string) => {\n        const erUtilgjengeligUkedag = utilgjengeligeUkedager?.some((d) => d === weekday);\n        if (erUtilgjengeligUkedag && skjulUtilgjengeligeUkedager) {\n            return null;\n        }\n\n        return (\n            <FormikInputGroup\n                key={weekday}\n                legend={<span className=\"sr-only\">{weekdayLabel}</span>}\n                name={`arbeidstid_${weekday}`}\n                className={bem.element('dag', erUtilgjengeligUkedag ? 'utilgjengelig' : undefined)}>\n                <LabelInputInfoLayout\n                    label={weekdayLabel}\n                    input={\n                        <FormikTimeInput\n                            aria-describedby=\"iPerioden\"\n                            name={`${fieldName}.${weekday}`}\n                            label={\n                                <span className={'sr-only'}>{tekst.ariaLabelTidInput(weekdayLabel.toLowerCase())}</span>\n                            }\n                            timeInputLayout={{\n                                direction: 'horizontal',\n                            }}\n                            data-testid={testId ? `${testId}__${weekday}` : undefined}\n                            validate={tidPerDagValidator ? (value) => tidPerDagValidator(weekday, value) : undefined}\n                        />\n                    }\n                />\n            </FormikInputGroup>\n        );\n    };\n    return (\n        <div className={bem.classNames(bem.block)}>\n            {renderWeekdayTimeInput(Weekday.monday, txt.Mandager)}\n            {renderWeekdayTimeInput(Weekday.tuesday, txt.Tirsdager)}\n            {renderWeekdayTimeInput(Weekday.wednesday, txt.Onsdager)}\n            {renderWeekdayTimeInput(Weekday.thursday, txt.Torsdager)}\n            {renderWeekdayTimeInput(Weekday.friday, txt.Fredager)}\n        </div>\n    );\n};\n\nexport default ArbeidstidFasteUkedagerInput;\n","import React from 'react';\nimport { Duration, durationToDecimalDuration } from '@navikt/sif-common-utils/lib';\nimport DurationText from '../../../../common/duration-text/DurationText';\nimport './arbeidstidEnkeltdagTekst.less';\n\ninterface Props {\n    tid: Duration;\n    prosent?: number;\n    skjulIngenTid?: boolean;\n}\n\nconst ArbeidstidEnkeltdagTekst: React.FunctionComponent<Props> = ({ prosent, tid, skjulIngenTid }) => {\n    if (prosent !== undefined && prosent > 0) {\n        return (\n            <span className=\"arbeidstidEnkeltdagTekst\">\n                <span className={'arbeidstidEnkeltdagTekst__prosent'}>{prosent} %</span>\n                <span className=\"arbeidstidEnkeltdagTekst__timer\">\n                    (<DurationText duration={tid} />)\n                </span>\n            </span>\n        );\n    }\n    const desimaltid = durationToDecimalDuration(tid);\n    return skjulIngenTid && desimaltid === 0 ? null : <DurationText duration={tid} />;\n};\n\nexport default ArbeidstidEnkeltdagTekst;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { DateRange } from '@navikt/sif-common-utils/lib';\nimport dayjs from 'dayjs';\nimport { Element, Normaltekst } from 'nav-frontend-typografi';\n\ninterface Props {\n    headingLevel: number;\n    måned: DateRange;\n    antallDagerMedTid: number;\n}\n\nconst ArbeidstidMånedTittel: React.FunctionComponent<Props> = ({ headingLevel, måned, antallDagerMedTid }) => {\n    const intl = useIntl();\n    return (\n        <Element tag={`h${headingLevel}`}>\n            <span className=\"m-caps\">\n                {intlHelper(intl, 'arbeidstidMånedTittel.ukeOgÅr', {\n                    ukeOgÅr: dayjs(måned.from).format('MMMM YYYY'),\n                })}\n            </span>\n            <Normaltekst tag=\"div\">\n                {antallDagerMedTid === 0 ? (\n                    <FormattedMessage id=\"arbeidstidMånedTittel.iPeriodePanel.info.ingenDager\" />\n                ) : (\n                    <FormattedMessage\n                        id=\"arbeidstidMånedTittel.iPeriodePanel.info\"\n                        values={{ dager: antallDagerMedTid }}\n                    />\n                )}\n            </Normaltekst>\n        </Element>\n    );\n};\n\nexport default ArbeidstidMånedTittel;\n","import React, { useState } from 'react';\nimport { DateRange, dateToISOString, InputTime } from '@navikt/sif-common-formik/lib';\nimport {\n    DateDurationMap,\n    DurationWeekdays,\n    getDatesWithDurationLongerThanZero,\n    getDurationsInDateRange,\n    getNumberDurationForWeekday,\n    getWeekdayFromDate,\n    removeDatesFromDateDurationMap,\n} from '@navikt/sif-common-utils';\nimport Ekspanderbartpanel from 'nav-frontend-ekspanderbartpanel';\nimport { TidsbrukKalender } from '../..';\nimport { TidEnkeltdagEndring } from '../../tid/tid-enkeltdag-dialog/TidEnkeltdagForm';\nimport { ArbeidsforholdType } from '../../types';\nimport ArbeidstidEnkeltdagDialog from '../arbeidstid-enkeltdag-dialog/ArbeidstidEnkeltdagDialog';\nimport ArbeidstidEnkeltdagTekst from './components/arbeidstid-enkeltdag-tekst/ArbeidstidEnkeltdagTekst';\nimport ArbeidstidMånedTittel from './components/arbeidstid-måned-tittel/ArbeidstidMånedTittel';\n\ninterface Props {\n    måned: DateRange;\n    arbeidsstedNavn: string;\n    arbeidsforholdType: ArbeidsforholdType;\n    tidArbeidstid: DateDurationMap;\n    utilgjengeligeDatoer?: Date[];\n    månedTittelHeadingLevel?: number;\n    periode: DateRange;\n    skjulIngenTidEnkeltdag?: boolean;\n    åpentEkspanderbartPanel?: boolean;\n    arbeiderNormaltTimerFasteUkedager?: DurationWeekdays;\n    månedTittelRenderer?: (måned: DateRange) => React.ReactNode;\n    onEnkeltdagChange?: (evt: TidEnkeltdagEndring) => void;\n    onRequestEdit?: (tid: DateDurationMap) => void;\n}\n\nconst ArbeidstidMåned: React.FunctionComponent<Props> = ({\n    måned,\n    arbeidsstedNavn,\n    arbeidsforholdType,\n    tidArbeidstid,\n    utilgjengeligeDatoer,\n    månedTittelHeadingLevel = 2,\n    periode,\n    åpentEkspanderbartPanel,\n    arbeiderNormaltTimerFasteUkedager,\n    skjulIngenTidEnkeltdag,\n    månedTittelRenderer,\n    onEnkeltdagChange,\n}) => {\n    const [editDate, setEditDate] = useState<{ dato: Date; tid: Partial<InputTime> } | undefined>();\n\n    const dager: DateDurationMap = getDurationsInDateRange(tidArbeidstid, måned);\n    const dagerMedTid = getDatesWithDurationLongerThanZero(dager);\n    const weekday = editDate ? getWeekdayFromDate(editDate.dato) : undefined;\n\n    const handleKalenderDatoClick = (dato: Date) => {\n        const tid: Partial<InputTime> = dager[dateToISOString(dato)] || {\n            hours: '',\n            minutes: '',\n        };\n        setEditDate({ dato, tid });\n    };\n\n    return (\n        <Ekspanderbartpanel\n            renderContentWhenClosed={false}\n            apen={åpentEkspanderbartPanel}\n            tittel={\n                månedTittelRenderer ? (\n                    månedTittelRenderer(måned)\n                ) : (\n                    <ArbeidstidMånedTittel\n                        måned={måned}\n                        headingLevel={månedTittelHeadingLevel}\n                        antallDagerMedTid={dagerMedTid.length}\n                    />\n                )\n            }>\n            <TidsbrukKalender\n                periode={måned}\n                dager={dager}\n                utilgjengeligeDatoer={utilgjengeligeDatoer}\n                skjulTommeDagerIListe={true}\n                visOpprinneligTid={false}\n                tidRenderer={({ tid, prosent }) => (\n                    <ArbeidstidEnkeltdagTekst tid={tid} prosent={prosent} skjulIngenTid={skjulIngenTidEnkeltdag} />\n                )}\n                onDateClick={onEnkeltdagChange ? handleKalenderDatoClick : undefined}\n            />\n            {editDate && onEnkeltdagChange && (\n                <ArbeidstidEnkeltdagDialog\n                    isOpen={editDate !== undefined}\n                    formProps={{\n                        dato: editDate.dato,\n                        tid: editDate.tid,\n                        periode,\n                        maksTid:\n                            weekday && arbeiderNormaltTimerFasteUkedager\n                                ? getNumberDurationForWeekday(arbeiderNormaltTimerFasteUkedager, weekday)\n                                : undefined,\n                        onSubmit: (evt) => {\n                            setEditDate(undefined);\n                            const dagerMedTid = utilgjengeligeDatoer\n                                ? removeDatesFromDateDurationMap(evt.dagerMedTid, utilgjengeligeDatoer)\n                                : evt.dagerMedTid;\n                            setTimeout(() => {\n                                /** TimeOut pga komponent unmountes */\n                                onEnkeltdagChange({ ...evt, dagerMedTid });\n                            });\n                        },\n                        onCancel: () => setEditDate(undefined),\n                    }}\n                    arbeidsstedNavn={arbeidsstedNavn}\n                    arbeidsforholdType={arbeidsforholdType}\n                />\n            )}\n        </Ekspanderbartpanel>\n    );\n};\n\nexport default ArbeidstidMåned;\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { ISODate, ISODateToDate, ISODuration, ISODurationToDuration } from '@navikt/sif-common-utils';\nimport dayjs from 'dayjs';\nimport groupBy from 'lodash.groupby';\nimport EkspanderbartPanel from 'nav-frontend-ekspanderbartpanel';\nimport DagerMedTidListe from '../../common/dager-med-tid-liste/DagerMedTidListe';\nimport { DagMedTid } from '../../types';\n\ninterface ISODagMedTid {\n    dato: ISODate;\n    tid: ISODuration;\n}\n\ninterface Props {\n    dager: ISODagMedTid[];\n}\n\nconst TidEnkeltdager: React.FunctionComponent<Props> = ({ dager }) => {\n    const days: DagMedTid[] = [];\n    dager.forEach((dag) => {\n        const dato = ISODateToDate(dag.dato);\n        const tid = ISODurationToDuration(dag.tid);\n        if (dato && tid) {\n            days.push({ dato, tid });\n        }\n    });\n\n    const ingenDagerRegistrertMelding = <FormattedMessage id=\"dagerMedTid.ingenDagerRegistrert\" />;\n    if (dager.length === 0) {\n        return ingenDagerRegistrertMelding;\n    }\n\n    const months = groupBy(days, ({ dato }) => `${dato.getFullYear()}.${dato.getMonth()}`);\n    return (\n        <div>\n            {Object.keys(months).map((key) => {\n                const dagerMedTid = months[key];\n                if (dagerMedTid.length === 0) {\n                    return ingenDagerRegistrertMelding;\n                }\n                return (\n                    <Box margin=\"m\" key={key}>\n                        <EkspanderbartPanel\n                            tittel={\n                                <span style={{ textTransform: 'capitalize', fontSize: '1rem' }}>\n                                    {dayjs(dagerMedTid[0].dato).format('MMMM YYYY')}\n                                </span>\n                            }>\n                            <DagerMedTidListe dagerMedTid={dagerMedTid} viseUke={true} />\n                        </EkspanderbartPanel>\n                    </Box>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default TidEnkeltdager;\n","import React from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport { Time } from '@navikt/sif-common-core/lib/types/Time';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { ISODuration, ISODurationToDuration } from '@navikt/sif-common-utils';\n\ninterface TidFasteDagerType {\n    mandag?: ISODuration;\n    tirsdag?: ISODuration;\n    onsdag?: ISODuration;\n    torsdag?: ISODuration;\n    fredag?: ISODuration;\n}\n\ninterface Props {\n    fasteDager?: TidFasteDagerType;\n}\n\nconst formatTime = (intl: IntlShape, time: Partial<Time>): string => {\n    const timer = time.hours || '0';\n    const minutter = time.minutes || '0';\n    return intlHelper(intl, 'timerOgMinutter', { timer, minutter });\n};\n\nconst TidFasteDager: React.FunctionComponent<Props> = ({ fasteDager }) => {\n    const intl = useIntl();\n\n    if (fasteDager) {\n        const days = Object.keys(fasteDager).filter((day) => fasteDager[day] !== undefined);\n        if (days.length > 0) {\n            return (\n                <ul style={{ marginTop: 0 }}>\n                    {days.map((day, idx) => {\n                        const time = ISODurationToDuration(fasteDager[day]);\n                        return (\n                            <li key={idx} style={{ marginBottom: '.25rem' }}>\n                                {`${intlHelper(intl, `${day}er.caps`)}: ${time ? formatTime(intl, time) : 0}`}\n                            </li>\n                        );\n                    })}\n                </ul>\n            );\n        }\n    }\n    return <>{intlHelper(intl, 'dagerMedTid.ingenDagerRegistrert')}</>;\n};\n\nexport default TidFasteDager;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { FormikTimeInput, TestProps } from '@navikt/sif-common-formik/lib';\nimport { ValidationError, ValidationResult } from '@navikt/sif-common-formik/lib/validation/types';\nimport { Weekday } from '@navikt/sif-common-utils/lib';\nimport { getTidFasteUkerdagerInputMessages } from './tidFasteUkerdagerInputMessages';\nimport './tidFasteUkedagerInput.less';\n\ninterface OwnProps {\n    name: string;\n    disabledDays?: Weekday[];\n    hideDisabledDays?: boolean;\n    validateDag?: (dagNavn: string, value: any) => ValidationResult<ValidationError>;\n}\n\ntype Props = OwnProps & TestProps;\n\nconst bem = bemUtils('tidFasteUkedagerInput');\n\nconst isWeekdayDisabled = (disabledDays: Weekday[] | undefined, dag: Weekday): boolean =>\n    disabledDays ? disabledDays.some((d) => d === dag) : false;\n\nconst TidFasteUkedagerInput = ({ name, validateDag, disabledDays, hideDisabledDays, 'data-testid': testId }: Props) => {\n    const txt = getTidFasteUkerdagerInputMessages(useIntl().locale);\n\n    const renderWeekdayTimeInput = (weekday: Weekday, weekdayLabel: string, validationDayName: string) => {\n        const disabled = isWeekdayDisabled(disabledDays, weekday);\n        return disabled && hideDisabledDays ? null : (\n            <FormikTimeInput\n                label={weekdayLabel}\n                name={`${name}.${weekday}`}\n                disabled={disabled}\n                timeInputLayout={{\n                    direction: 'vertical',\n                    compact: true,\n                }}\n                data-testid={testId ? `${testId}__${weekday}` : undefined}\n                validate={validateDag ? (value) => validateDag(validationDayName, value) : undefined}\n            />\n        );\n    };\n    const hasHiddenDays = disabledDays !== undefined && disabledDays.length > 0 && hideDisabledDays;\n    return (\n        <Box margin=\"l\">\n            <div className={bem.classNames(bem.block, bem.modifierConditional('withHiddenDays', hasHiddenDays))}>\n                {renderWeekdayTimeInput(Weekday.monday, txt.Mandager, txt.mandag)}\n                {renderWeekdayTimeInput(Weekday.tuesday, txt.Tirsdager, txt.tirsdag)}\n                {renderWeekdayTimeInput(Weekday.wednesday, txt.Onsdager, txt.onsdag)}\n                {renderWeekdayTimeInput(Weekday.thursday, txt.Torsdager, txt.torsdag)}\n                {renderWeekdayTimeInput(Weekday.friday, txt.Fredager, txt.fredag)}\n            </div>\n        </Box>\n    );\n};\n\nexport default TidFasteUkedagerInput;\n","import React from 'react';\nimport { DateRange, dateToISOString } from '@navikt/sif-common-formik/lib';\nimport { Weekday } from '@navikt/sif-common-utils/lib';\nimport dayjs from 'dayjs';\nimport { groupBy } from 'lodash';\nimport { Daginfo, Ukeinfo } from '../../types';\n\nconst getEmptyElements = (num: number): JSX.Element[] | undefined => {\n    return num === 0\n        ? undefined\n        : Array.from({ length: num }).map((_, index) => React.createElement('span', { key: index }));\n};\n\nconst getWeekdayFromISOWeekday = (isoWeekday: number) => {\n    switch (isoWeekday) {\n        case 1:\n            return Weekday.monday;\n        case 2:\n            return Weekday.tuesday;\n        case 3:\n            return Weekday.wednesday;\n        case 4:\n            return Weekday.thursday;\n        case 5:\n            return Weekday.friday;\n        default:\n            return undefined;\n    }\n};\n\nconst getDagInfo = (date: Date): Daginfo => {\n    const dayjsDato = dayjs(date);\n    return {\n        isoDate: dateToISOString(dayjsDato.toDate()),\n        dato: dayjsDato.toDate(),\n        ukedag: dayjsDato.isoWeekday(),\n        ukenummer: dayjsDato.isoWeek(),\n        år: dayjsDato.year(),\n        årOgUke: `${dayjsDato.year()}.${dayjsDato.isoWeek()}`,\n        labelDag: `${dayjsDato.format('dddd')}`,\n        labelDato: `${dayjsDato.format('DD.MM.YYYY')}`,\n        labelFull: `${dayjsDato.format('dddd')} ${dayjsDato.format('D. MMMM')}`,\n        weekday: getWeekdayFromISOWeekday(dayjsDato.isoWeekday()),\n    };\n};\n\nconst getDagInfoForPeriode = ({ from, to }: DateRange): Daginfo[] => {\n    const dager: Daginfo[] = [];\n    let dayjsDato = dayjs(from);\n    while (dayjsDato.isSameOrBefore(to, 'day')) {\n        const ukedag = dayjsDato.isoWeekday();\n        if (ukedag <= 5) {\n            dager.push(getDagInfo(dayjsDato.toDate()));\n        }\n        dayjsDato = dayjsDato.add(1, 'day');\n    }\n    return dager;\n};\n\nconst getUkerFraDager = (dager: Daginfo[]): Ukeinfo[] => {\n    const ukerOgDager = groupBy(dager, (dag) => dag.årOgUke);\n    const uker = Object.keys(ukerOgDager).map((key): Ukeinfo => {\n        const dagerIUke = ukerOgDager[key];\n        return { år: dagerIUke[0].år, ukenummer: dagerIUke[0].ukenummer, dager: dagerIUke };\n    });\n    return uker;\n};\n\nconst getTidKalenderFieldName = (fieldName: string, dag: Daginfo): string => `${fieldName}.${dag.isoDate}`;\n\nconst getForegåendeDagerIUke = (dag: Daginfo): Daginfo[] => {\n    const dager = getEmptyElements(dag.ukedag - 1);\n    if (dager && dager.length > 0) {\n        const firstDayOfWeek = dayjs(dag.dato).subtract(dag.ukedag - 1, 'days');\n        return dager.map((c, idx) => {\n            const date = firstDayOfWeek.add(idx, 'days').toDate();\n            return getDagInfo(date);\n        });\n    }\n    return [];\n};\n\nexport const tidUkerInputUtils = {\n    getDagInfo,\n    getDagInfoForPeriode,\n    getTidKalenderFieldName,\n    getForegåendeDagerIUke,\n    getUkerFraDager,\n};\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { FormikTimeInput } from '@navikt/sif-common-formik';\nimport { DateDurationMap, isDateInDates } from '@navikt/sif-common-utils';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { TidPerDagValidator } from '../..';\nimport { Daginfo, Ukeinfo } from '../../types';\nimport { tidUkerInputUtils } from '../tid-uker-input/tidUkerUtils';\n\ntype DagLabelRenderer = (dag: Daginfo) => React.ReactNode;\n\ninterface Props {\n    getFieldName: (dag: Daginfo) => string;\n    ukeinfo: Ukeinfo;\n    opprinneligTid?: DateDurationMap;\n    isNarrow: boolean;\n    isWide: boolean;\n    utilgjengeligeDatoer?: Date[];\n    visSomListe?: boolean;\n    tidPerDagValidator?: TidPerDagValidator;\n    ukeTittelRenderer?: (uke: Ukeinfo) => React.ReactNode;\n    dagLabelRenderer?: (dag: Daginfo) => React.ReactNode;\n}\n\nconst renderDagLabel = (dag: Daginfo, customRenderer?: DagLabelRenderer): JSX.Element => {\n    return (\n        <span className={bem.element('dag__label')}>\n            {customRenderer ? (\n                customRenderer(dag)\n            ) : (\n                <>\n                    <span className={bem.element('dag__label__dagnavn')}>{dag.labelDag}</span>\n                    <span className={bem.element('dag__label__dato')}>{dag.labelDato}</span>\n                </>\n            )}\n        </span>\n    );\n};\n\nconst bem = bemUtils('tidUkerInput');\n\nconst TidUkeInput: React.FunctionComponent<Props> = ({\n    ukeinfo,\n    utilgjengeligeDatoer,\n    visSomListe,\n    getFieldName,\n    dagLabelRenderer,\n    tidPerDagValidator,\n    ukeTittelRenderer,\n    isWide,\n}) => {\n    const { dager } = ukeinfo;\n\n    return (\n        <div className={bem.element('uke')}>\n            {ukeTittelRenderer ? (\n                ukeTittelRenderer(ukeinfo)\n            ) : (\n                <Undertittel tag=\"h2\">\n                    <FormattedMessage id=\"ukeÅr\" values={{ ...ukeinfo }} />\n                </Undertittel>\n            )}\n\n            <div className={bem.element('uke__ukedager', isWide && visSomListe !== true ? 'grid' : 'liste')}>\n                {tidUkerInputUtils.getForegåendeDagerIUke(dager[0]).map((dag) => (\n                    <div className={bem.element('dag', 'utenforPeriode')} key={dag.isoDate} aria-hidden={true}>\n                        {renderDagLabel(dag, dagLabelRenderer)}\n                        <div className={bem.element('dag__utenforPeriodeIkon')}>-</div>\n                    </div>\n                ))}\n                {dager.map((dag) => {\n                    const erUtilgjengelig = isDateInDates(dag.dato, utilgjengeligeDatoer);\n                    return (\n                        <div\n                            key={dag.isoDate}\n                            className={bem.element('dag', erUtilgjengelig ? 'utilgjengelig' : undefined)}>\n                            {erUtilgjengelig ? (\n                                <span />\n                            ) : (\n                                <FormikTimeInput\n                                    name={getFieldName(dag)}\n                                    label={renderDagLabel(dag, dagLabelRenderer)}\n                                    timeInputLayout={{\n                                        direction: 'horizontal',\n                                    }}\n                                    validate={tidPerDagValidator ? tidPerDagValidator(dag.labelFull) : undefined}\n                                />\n                            )}\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n};\n\nexport default TidUkeInput;\n","import React from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport ResponsivePanel from '@navikt/sif-common-core/lib/components/responsive-panel/ResponsivePanel';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { DateRange } from '@navikt/sif-common-formik';\nimport { DateDurationMap, isDateInDates } from '@navikt/sif-common-utils/lib';\nimport { Daginfo, TidPerDagValidator, Ukeinfo } from '../../types';\nimport TidUkeInput from '../tid-uke-input/TidUkeInput';\nimport { tidUkerInputUtils } from './tidUkerUtils';\nimport './tidUkerInput.less';\n\nconst getTidKalenderFieldName = (fieldName: string, dag: Daginfo): string => `${fieldName}.${dag.isoDate}`;\n\ninterface Props {\n    fieldName: string;\n    periode: DateRange;\n    brukPanel?: boolean;\n    opprinneligTid?: DateDurationMap;\n    utilgjengeligeDatoer?: Date[];\n    ukeTittelRenderer?: (uke: Ukeinfo) => React.ReactNode;\n    tidPerDagValidator?: TidPerDagValidator;\n}\n\nconst bem = bemUtils('tidUkerInput');\n\nexport const TidUkerInput: React.FunctionComponent<Props> = ({\n    fieldName,\n    periode,\n    brukPanel,\n    opprinneligTid,\n    utilgjengeligeDatoer,\n    ukeTittelRenderer,\n    tidPerDagValidator,\n}) => {\n    const isNarrow = useMediaQuery({ maxWidth: 400 });\n    const isWide = useMediaQuery({ minWidth: 1050 });\n\n    const dager = tidUkerInputUtils.getDagInfoForPeriode(periode);\n    const uker = tidUkerInputUtils\n        .getUkerFraDager(dager)\n        .filter(\n            (uke) =>\n                uke.dager.filter((dag) => isDateInDates(dag.dato, utilgjengeligeDatoer)).length !== uke.dager.length\n        );\n\n    return (\n        <div className={bem.classNames(bem.block, bem.modifier('inlineForm'))}>\n            {uker.map((uke) => {\n                const content = (\n                    <TidUkeInput\n                        ukeTittelRenderer={ukeTittelRenderer}\n                        getFieldName={(dag) => getTidKalenderFieldName(fieldName, dag)}\n                        ukeinfo={uke}\n                        opprinneligTid={opprinneligTid}\n                        utilgjengeligeDatoer={utilgjengeligeDatoer}\n                        isNarrow={isNarrow}\n                        isWide={isWide}\n                        visSomListe={true}\n                        tidPerDagValidator={tidPerDagValidator}\n                    />\n                );\n                return (\n                    <div key={uke.ukenummer} className={bem.element('ukeWrapper')}>\n                        {brukPanel ? <ResponsivePanel>{content}</ResponsivePanel> : content}\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default TidUkerInput;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport Knapperad from '@navikt/sif-common-core/lib/components/knapperad/Knapperad';\nimport { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { getTypedFormComponents, InputTime } from '@navikt/sif-common-formik/lib';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { DateDurationMap, ensureDuration, getValidDurations, ISODate } from '@navikt/sif-common-utils';\nimport dayjs from 'dayjs';\nimport isoWeek from 'dayjs/plugin/isoWeek';\nimport weekOfYear from 'dayjs/plugin/weekOfYear';\nimport Knapp from 'nav-frontend-knapper';\nimport { Normaltekst, Systemtittel } from 'nav-frontend-typografi';\nimport { TidPerDagValidator } from '../../types';\nimport TidUkerInput from '../tid-uker-input/TidUkerInput';\n\ndayjs.extend(isoWeek);\ndayjs.extend(weekOfYear);\n\ntype FormDatoTidMap = { [isoDate: ISODate]: Partial<InputTime> };\n\ninterface Props {\n    tittel: JSX.Element;\n    intro?: JSX.Element;\n    periode: DateRange;\n    tid: DateDurationMap;\n    tidPerDagValidator: TidPerDagValidator;\n    onSubmit: (tid: DateDurationMap) => void;\n    onCancel?: () => void;\n}\n\nenum FormField {\n    tid = 'tid',\n}\ninterface FormValues {\n    [FormField.tid]: FormDatoTidMap;\n}\n\nconst Form = getTypedFormComponents<FormField, FormValues, ValidationError>();\n\nconst TidKalenderForm = ({ periode, tid, tittel, intro, tidPerDagValidator, onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n\n    if (dayjs(periode.from).isAfter(periode.to, 'day')) {\n        return <div>Fra dato er før til-dato</div>;\n    }\n\n    const onFormikSubmit = ({ tid = {} }: Partial<FormValues>) => {\n        const data: DateDurationMap = {};\n        Object.keys(tid).forEach((key) => {\n            data[key] = ensureDuration(tid[key]);\n        });\n        onSubmit(getValidDurations(data));\n    };\n\n    const mapDatoTidToFormDatoTid = (tid: DateDurationMap): FormDatoTidMap => {\n        const data: FormDatoTidMap = {};\n        Object.keys(tid).forEach((key) => {\n            data[key] = tid[key];\n        });\n        return data;\n    };\n\n    return (\n        <Normaltekst tag=\"div\">\n            <Form.FormikWrapper\n                initialValues={{ tid: mapDatoTidToFormDatoTid(tid) }}\n                onSubmit={onFormikSubmit}\n                renderForm={() => {\n                    return (\n                        <Form.Form\n                            onCancel={onCancel}\n                            formErrorHandler={getFormErrorHandler(intl, 'tidsperiodeForm')}\n                            includeValidationSummary={true}\n                            includeButtons={false}\n                            formFooter={\n                                <FormBlock margin=\"l\">\n                                    <Knapperad align=\"left\">\n                                        <Knapp htmlType=\"submit\" type=\"hoved\">\n                                            <FormattedMessage id=\"tidKalenderForm.ok.label\" />\n                                        </Knapp>\n                                        <Knapp htmlType=\"button\" type=\"standard\" onClick={onCancel}>\n                                            <FormattedMessage id=\"tidKalenderForm.avbryt.label\" />\n                                        </Knapp>\n                                    </Knapperad>\n                                </FormBlock>\n                            }>\n                            <Systemtittel tag=\"h1\">{tittel}</Systemtittel>\n                            {intro ? <Box margin=\"l\">{intro}</Box> : undefined}\n                            <TidUkerInput\n                                fieldName={FormField.tid}\n                                periode={periode}\n                                brukPanel={false}\n                                tidPerDagValidator={tidPerDagValidator}\n                            />\n                        </Form.Form>\n                    );\n                }}\n            />\n        </Normaltekst>\n    );\n};\n\nexport default TidKalenderForm;\n","import React from 'react';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { Duration, durationsAreEqual, ensureDuration } from '@navikt/sif-common-utils';\nimport { Undertekst } from 'nav-frontend-typografi';\nimport DurationText from '../../common/duration-text/DurationText';\nimport { TidRenderer } from './TidsbrukKalender';\nimport './tidsbrukKalenderDag.less';\n\nexport type TidsbrukKalenderDagFooterRenderer = (dato: Date) => JSX.Element | undefined;\n\ninterface Props {\n    dato: Date;\n    tid?: Duration;\n    prosent?: number;\n    tidOpprinnelig?: Duration;\n    visOpprinneligTid?: boolean;\n    erUtilgjengelig?: boolean;\n    tidRenderer?: TidRenderer;\n    opprinneligTidRenderer?: TidRenderer;\n    footerRenderer?: TidsbrukKalenderDagFooterRenderer;\n}\n\nconst bem = bemUtils('tidsbrukKalenderDag');\n\nconst TidsbrukKalenderDag: React.FunctionComponent<Props> = ({\n    dato,\n    prosent,\n    tid,\n    tidOpprinnelig,\n    visOpprinneligTid,\n    tidRenderer,\n    opprinneligTidRenderer,\n    footerRenderer,\n}) => {\n    const erEndret = durationsAreEqual(tid, tidOpprinnelig) === false;\n\n    const renderTid = (duration: Duration) =>\n        tidRenderer ? tidRenderer({ tid: duration, dato, prosent }) : <DurationText duration={duration} />;\n\n    const renderOpprinneligTid = (duration: Duration) =>\n        opprinneligTidRenderer ? (\n            opprinneligTidRenderer({ tid: duration, dato, prosent })\n        ) : (\n            <DurationText duration={duration} />\n        );\n\n    return (\n        <>\n            {tid && (\n                <>\n                    {erEndret ? (\n                        <>\n                            <span className={bem.block}>{renderTid(ensureDuration(tid))}</span>\n                            {visOpprinneligTid && (\n                                <>\n                                    {tidOpprinnelig ? (\n                                        <div className={bem.element('opprinneligTidWrapper')}>\n                                            <Undertekst tag=\"span\" className={bem.element('opprinneligTid')}>\n                                                (<span className=\"sr-only\">Endret fra: </span>\n                                                {renderOpprinneligTid(tidOpprinnelig)})\n                                            </Undertekst>\n                                        </div>\n                                    ) : (\n                                        <Undertekst>(lagt til)</Undertekst>\n                                    )}\n                                </>\n                            )}\n                        </>\n                    ) : (\n                        <span className={bem.block}>\n                            {renderTid(tid)} <span className=\"sr-only\">(uendret)</span>\n                        </span>\n                    )}\n                    {footerRenderer && <>{footerRenderer(dato)}</>}\n                </>\n            )}\n            {tidOpprinnelig && !tid && <>{renderTid(tidOpprinnelig)}</>}\n        </>\n    );\n};\n\nexport default TidsbrukKalenderDag;\n","import React from 'react';\nimport AriaAlternative from '@navikt/sif-common-core/lib/components/aria/AriaAlternative';\nimport { DateRange, InputTime } from '@navikt/sif-common-formik/lib';\nimport { DateDurationMap, dateToISODate, Duration, ensureDuration } from '@navikt/sif-common-utils';\nimport dayjs from 'dayjs';\nimport CalendarGrid from '../../common/calendar-grid/CalendarGrid';\nimport TidsbrukKalenderDag, { TidsbrukKalenderDagFooterRenderer } from './TidsbrukKalenderDag';\n\nexport type TidRenderer = (tid: { tid: InputTime; dato: Date; prosent?: number }) => React.ReactNode;\n\ntype KalenderDag = {\n    tid?: Partial<InputTime>;\n    prosent?: number;\n    tidOpprinnelig?: Duration;\n};\n\ntype Kalenderdager = {\n    [dato: string]: KalenderDag;\n};\ninterface Props {\n    periode: DateRange;\n    dager: DateDurationMap;\n    dagerOpprinnelig?: DateDurationMap;\n    utilgjengeligeDatoer?: Date[];\n    utilgjengeligDagInfo?: string;\n    skjulTommeDagerIListe?: boolean;\n    visOpprinneligTid?: boolean;\n    onDateClick?: (date: Date) => void;\n    tomUkeContentRenderer?: () => React.ReactNode;\n    tidRenderer?: TidRenderer;\n    opprinneligTidRenderer?: TidRenderer;\n    footerRenderer?: TidsbrukKalenderDagFooterRenderer;\n}\n\nconst TidsbrukKalender: React.FunctionComponent<Props> = ({\n    periode,\n    dager,\n    dagerOpprinnelig = {},\n    utilgjengeligeDatoer,\n    utilgjengeligDagInfo,\n    skjulTommeDagerIListe,\n    visOpprinneligTid,\n    onDateClick,\n    tidRenderer,\n    opprinneligTidRenderer,\n    tomUkeContentRenderer,\n    footerRenderer,\n}) => {\n    const kalenderdager: Kalenderdager = {};\n    Object.keys(dager).forEach((key) => {\n        const dag = dager[key];\n        kalenderdager[key] = {\n            ...kalenderdager[key],\n            tid: {\n                hours: dag.hours,\n                minutes: dag.minutes,\n            },\n            prosent: dag.percentage,\n        };\n    });\n\n    Object.keys(dagerOpprinnelig).forEach((key) => {\n        kalenderdager[key] = {\n            ...kalenderdager[key],\n            tidOpprinnelig: ensureDuration(dagerOpprinnelig[key]),\n            prosent: (dagerOpprinnelig as any)[key].prosent,\n        };\n    });\n\n    return (\n        <CalendarGrid\n            month={periode}\n            disabledDates={utilgjengeligeDatoer}\n            disabledDateInfo={utilgjengeligDagInfo}\n            hideEmptyContentInListMode={skjulTommeDagerIListe}\n            hideWeeksWithOnlyDisabledContent={true}\n            onDateClick={onDateClick}\n            allDaysInWeekDisabledContentRenderer={tomUkeContentRenderer}\n            dateRendererShort={(date: Date) => (\n                <AriaAlternative\n                    visibleText={dayjs(date).format('D.')}\n                    ariaText={dayjs(date).format('dddd DD. MMM YYYY')}\n                />\n            )}\n            dateContentRenderer={(dato) => {\n                const dag = kalenderdager[dateToISODate(dato)];\n                return dag ? (\n                    <TidsbrukKalenderDag\n                        dato={dato}\n                        tid={dag.tid ? ensureDuration(dag.tid) : undefined}\n                        prosent={dag.prosent}\n                        tidRenderer={tidRenderer}\n                        opprinneligTidRenderer={opprinneligTidRenderer}\n                        tidOpprinnelig={dag.tidOpprinnelig || { hours: '0', minutes: '0' }}\n                        visOpprinneligTid={visOpprinneligTid}\n                        footerRenderer={footerRenderer}\n                    />\n                ) : (\n                    <span />\n                );\n            }}\n        />\n    );\n};\n\nexport default TidsbrukKalender;\n","import { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { Duration, ISODate, ISODuration } from '@navikt/sif-common-utils/lib';\n\nexport * from './Daginfo';\nexport * from './Ukeinfo';\nexport * from '../arbeidstid/arbeidstid-periode-dialog/types';\n\nexport enum ArbeidsforholdType {\n    ANSATT = 'ANSATT',\n    FRILANSER = 'FRILANSER',\n    SELVSTENDIG = 'SELVSTENDIG',\n}\n\nexport type TidPerDagValidator = (dag: string) => (tid: Duration) => ValidationError | undefined;\n\nexport enum ArbeiderIPeriodenSvar {\n    'somVanlig' = 'SOM_VANLIG',\n    'redusert' = 'REDUSERT',\n    'heltFravær' = 'HELT_FRAVÆR',\n}\n\nexport type ArbeidIPeriodeIntlValues = {\n    hvor: string;\n    skalEllerHarJobbet: string;\n    timer: string;\n    fra: string;\n    til: string;\n    iPerioden: string;\n};\n\nexport interface DagMedTid {\n    dato: Date;\n    tid: Duration;\n    normaltid?: Duration;\n}\n\nexport interface ArbeidstimerApiData {\n    normalTimer: ISODuration;\n    faktiskTimer: ISODuration;\n}\n\nexport interface ArbeidstimerFasteDagerApiData {\n    mandag?: ArbeidstimerApiData;\n    tirsdag?: ArbeidstimerApiData;\n    onsdag?: ArbeidstimerApiData;\n    torsdag?: ArbeidstimerApiData;\n    fredag?: ArbeidstimerApiData;\n}\n\nexport interface ArbeidstidEnkeltdagApiData {\n    dato: ISODate;\n    arbeidstimer: ArbeidstimerApiData;\n}\n","import { getNumberValidator } from '@navikt/sif-common-formik/lib/validation';\nimport getTimeValidator from '@navikt/sif-common-formik/lib/validation/getTimeValidator';\nimport { IntlErrorObject } from '@navikt/sif-common-formik/lib/validation/types';\nimport {\n    durationToDecimalDuration,\n    DurationWeekdays,\n    summarizeDurationInDurationWeekdays,\n} from '@navikt/sif-common-utils/lib';\n\nexport const getArbeidstidFastProsentValidator =\n    (minMax?: { min: number; max: number }) =>\n    (value: any): IntlErrorObject | undefined => {\n        const minMaxOptions = minMax || {\n            min: 0,\n            max: 100,\n        };\n        const error = getNumberValidator({ required: true, ...minMaxOptions })(value);\n        return error\n            ? {\n                  key: error,\n                  values: { ...minMaxOptions },\n              }\n            : undefined;\n    };\n\nexport const validateFasteArbeidstimerIUke = (\n    fasteDager: DurationWeekdays | undefined\n): IntlErrorObject | undefined => {\n    const timer = fasteDager ? durationToDecimalDuration(summarizeDurationInDurationWeekdays(fasteDager)) : 0;\n    if (timer === 0) {\n        return {\n            key: `ingenTidRegistrert`,\n        };\n    }\n    if (timer > 24 * 5) {\n        return {\n            key: `forMangeTimer`,\n        };\n    }\n    return undefined;\n};\n\nexport const getArbeidstimerFastDagValidator = () =>\n    getTimeValidator({\n        max: { hours: 24, minutes: 0 },\n        min: { hours: 0, minutes: 0 },\n    });\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { DateRange, getTypedFormComponents } from '@navikt/sif-common-formik';\nimport datepickerUtils from '@navikt/sif-common-formik/lib/components/formik-datepicker/datepickerUtils';\nimport { getDateRangeValidator, getRequiredFieldValidator } from '@navikt/sif-common-formik/lib/validation';\nimport getIntlFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport {\n    dateToISODate,\n    DurationWeekdays,\n    ensureCompleteDurationWeekdays,\n    getWeekdayDOW,\n    Weekday,\n} from '@navikt/sif-common-utils';\nimport { InputDateString } from 'nav-datovelger/lib/types';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { TidFasteUkedagerInput } from '../../../../tid';\nimport { ArbeiderIPeriodenSvar, ArbeidIPeriodeIntlValues } from '../../../../types';\nimport { getArbeidstidPeriodeIntl } from '../../i18n/arbeidstidPeriodeMessages';\nimport { ArbeidstidPeriodeData } from '../../types';\nimport { getArbeidstimerFastDagValidator, validateFasteArbeidstimerIUke } from './arbeidstidPeriodeFormValidation';\n\nexport interface ArbeidstidPeriodeFormProps {\n    arbeidsstedNavn: string;\n    periode: DateRange;\n    intlValues: ArbeidIPeriodeIntlValues;\n    utilgjengeligeUkedager?: Weekday[];\n    skjulUtilgjengeligeUkedager?: boolean;\n    visAlleSpørsmål?: boolean;\n    tekst?: {\n        tittel?: JSX.Element;\n        introduksjon?: JSX.Element;\n        okButton?: string;\n        cancelButton?: string;\n    };\n    onSubmit: (data: ArbeidstidPeriodeData) => void;\n    onCancel: () => void;\n}\n\nenum FormFields {\n    'fom' = 'fom',\n    'tom' = 'tom',\n    'heleSøknadsperioden' = 'heleSøknadsperioden',\n    'arbeiderHvordan' = 'arbeiderHvordan',\n    'tidFasteDager' = 'tidFasteDager',\n}\n\ninterface FormValues {\n    [FormFields.fom]: InputDateString;\n    [FormFields.tom]: InputDateString;\n    [FormFields.heleSøknadsperioden]?: boolean;\n    [FormFields.arbeiderHvordan]?: ArbeiderIPeriodenSvar;\n    [FormFields.tidFasteDager]?: DurationWeekdays;\n}\n\nconst initialFormValues: Partial<FormValues> = {};\n\nconst FormComponents = getTypedFormComponents<FormFields, FormValues, ValidationError>();\n\nconst ArbeidstidPeriodeForm: React.FunctionComponent<ArbeidstidPeriodeFormProps> = ({\n    arbeidsstedNavn,\n    periode,\n    intlValues,\n    utilgjengeligeUkedager,\n    skjulUtilgjengeligeUkedager,\n    tekst,\n    visAlleSpørsmål,\n    onSubmit,\n    onCancel,\n}) => {\n    const intl = useIntl();\n    const arbIntl = getArbeidstidPeriodeIntl(intl);\n\n    const onValidSubmit = (values: Partial<FormValues>) => {\n        const fom = datepickerUtils.getDateFromDateString(values.fom);\n        const tom = datepickerUtils.getDateFromDateString(values.tom);\n\n        if (!fom || !tom) {\n            throw new Error('ArbeidstidPeriodeForm. Ugyldig fom/tom ');\n        }\n\n        switch (values.arbeiderHvordan) {\n            case ArbeiderIPeriodenSvar.heltFravær:\n            case ArbeiderIPeriodenSvar.somVanlig:\n                onSubmit({ fom, tom, arbeiderHvordan: values.arbeiderHvordan });\n                break;\n            case ArbeiderIPeriodenSvar.redusert:\n                if (values.tidFasteDager) {\n                    onSubmit({\n                        fom,\n                        tom,\n                        arbeiderHvordan: values.arbeiderHvordan,\n                        tidFasteDager: ensureCompleteDurationWeekdays(values.tidFasteDager),\n                    });\n                } else {\n                    throw new Error('ArbeidstidPeriodeForm. Ugyldig tidFasteDager ');\n                }\n                break;\n        }\n    };\n\n    const disabledDaysOfWeekDayNumber = utilgjengeligeUkedager\n        ? utilgjengeligeUkedager.map((dag) => getWeekdayDOW(dag))\n        : [];\n\n    return (\n        <div>\n            <Undertittel tag=\"h1\" className=\"dialogFormTitle\">\n                {tekst?.tittel || arbIntl.intlText('arbeidstidPeriodeForm.tittel', { arbeidsstedNavn })}\n            </Undertittel>\n            {tekst?.introduksjon ? <Box margin=\"l\">{tekst.introduksjon}</Box> : undefined}\n            <FormBlock margin=\"xl\">\n                <FormComponents.FormikWrapper\n                    initialValues={initialFormValues}\n                    onSubmit={onValidSubmit}\n                    renderForm={({\n                        values: { fom, tom, tidFasteDager, arbeiderHvordan, heleSøknadsperioden },\n                        setFieldValue,\n                    }) => {\n                        const from = datepickerUtils.getDateFromDateString(fom);\n                        const to = datepickerUtils.getDateFromDateString(tom);\n\n                        const handleHeleSøknadsperiodenChange = (velgHeleSøknadsperioden?: boolean) => {\n                            if (velgHeleSøknadsperioden) {\n                                setFieldValue(FormFields.fom, dateToISODate(periode.from));\n                                setFieldValue(FormFields.tom, dateToISODate(periode.to));\n                            }\n                        };\n\n                        return (\n                            <FormComponents.Form\n                                onCancel={onCancel}\n                                formErrorHandler={getIntlFormErrorHandler(intl, 'arbeidstidPeriodeForm.validation')}\n                                includeValidationSummary={true}\n                                includeButtons={true}\n                                submitButtonLabel={\n                                    tekst?.okButton || arbIntl.intlText('arbeidstidPeriodeForm.submitButtonLabel')\n                                }\n                                cancelButtonLabel={\n                                    tekst?.cancelButton || arbIntl.intlText('arbeidstidPeriodeForm.cancelButtonLabel')\n                                }>\n                                <div style={{ maxWidth: '20rem' }}>\n                                    <FormBlock>\n                                        <FormComponents.DateIntervalPicker\n                                            fromDatepickerProps={{\n                                                label: arbIntl.intlText('arbeidstidPeriodeForm.fraOgMed.label'),\n                                                'data-testid': 'fra-dato',\n                                                name: FormFields.fom,\n                                                disableWeekend: true,\n                                                fullScreenOnMobile: true,\n                                                fullscreenOverlay: true,\n                                                disabledDaysOfWeek: disabledDaysOfWeekDayNumber,\n                                                dayPickerProps: {\n                                                    initialMonth: periode.from,\n                                                },\n                                                disabled: heleSøknadsperioden === true,\n                                                minDate: periode.from,\n                                                maxDate: to || periode.to,\n                                                validate: getDateRangeValidator({\n                                                    required: true,\n                                                    onlyWeekdays: false,\n                                                    toDate: to,\n                                                    fromDate: from,\n                                                    min: periode.from,\n                                                    max: to || periode.to,\n                                                }).validateFromDate,\n                                            }}\n                                            toDatepickerProps={{\n                                                label: arbIntl.intlText('arbeidstidPeriodeForm.tilOgMed.label'),\n                                                name: FormFields.tom,\n                                                'data-testid': 'til-dato',\n                                                disableWeekend: true,\n                                                disabledDaysOfWeek: disabledDaysOfWeekDayNumber,\n                                                fullScreenOnMobile: true,\n                                                fullscreenOverlay: true,\n                                                minDate: from || periode.from,\n                                                maxDate: periode.to,\n                                                disabled: heleSøknadsperioden === true,\n                                                dayPickerProps: {\n                                                    initialMonth: from || periode.from,\n                                                },\n                                                validate: getDateRangeValidator({\n                                                    required: true,\n                                                    onlyWeekdays: false,\n                                                    toDate: to,\n                                                    fromDate: from,\n                                                    min: from || periode.from,\n                                                    max: periode.to,\n                                                }).validateToDate,\n                                            }}\n                                        />\n                                        <Box>\n                                            <FormComponents.Checkbox\n                                                label={intlHelper(intl, 'arbeidstidPeriodeForm.velgHelePerioden')}\n                                                name={FormFields.heleSøknadsperioden}\n                                                afterOnChange={handleHeleSøknadsperiodenChange}\n                                            />\n                                        </Box>\n                                    </FormBlock>\n                                </div>\n\n                                {((fom && tom) || visAlleSpørsmål) && (\n                                    <>\n                                        <FormBlock>\n                                            <FormComponents.RadioPanelGroup\n                                                name={FormFields.arbeiderHvordan}\n                                                legend={intlHelper(\n                                                    intl,\n                                                    'arbeidstidPeriodeForm.arbeiderIPerioden.spm',\n                                                    intlValues\n                                                )}\n                                                radios={[\n                                                    {\n                                                        label: intlHelper(\n                                                            intl,\n                                                            'arbeidstidPeriodeForm.arbeiderIPerioden.svar.jobberIkke'\n                                                        ),\n                                                        value: ArbeiderIPeriodenSvar.heltFravær,\n                                                        'data-testid': 'helt-fravær',\n                                                    },\n                                                    {\n                                                        label: intlHelper(\n                                                            intl,\n                                                            'arbeidstidPeriodeForm.arbeiderIPerioden.svar.jobberRedusert'\n                                                        ),\n                                                        value: ArbeiderIPeriodenSvar.redusert,\n                                                        'data-testid': 'jobber-redusert',\n                                                    },\n                                                    {\n                                                        label: intlHelper(\n                                                            intl,\n                                                            'arbeidstidPeriodeForm.arbeiderIPerioden.svar.jobberVanlig'\n                                                        ),\n                                                        value: ArbeiderIPeriodenSvar.somVanlig,\n                                                        'data-testid': 'som-vanlig',\n                                                    },\n                                                ]}\n                                                validate={(value) => {\n                                                    const error = getRequiredFieldValidator()(value);\n                                                    return error\n                                                        ? {\n                                                              key: error,\n                                                              values: intlValues,\n                                                          }\n                                                        : undefined;\n                                                }}\n                                            />\n                                        </FormBlock>\n                                        {arbeiderHvordan === ArbeiderIPeriodenSvar.redusert && (\n                                            <FormBlock>\n                                                <FormComponents.InputGroup\n                                                    legend={arbIntl.intlText(\n                                                        'arbeidstidPeriodeForm.tidFasteUkedager.label',\n                                                        intlValues\n                                                    )}\n                                                    validate={() => {\n                                                        const error = validateFasteArbeidstimerIUke(tidFasteDager);\n                                                        return error\n                                                            ? {\n                                                                  key: error.key,\n                                                                  values: intlValues,\n                                                              }\n                                                            : undefined;\n                                                    }}\n                                                    name={'fasteDager.gruppe' as any}>\n                                                    <TidFasteUkedagerInput\n                                                        name={FormFields.tidFasteDager}\n                                                        disabledDays={utilgjengeligeUkedager}\n                                                        hideDisabledDays={skjulUtilgjengeligeUkedager}\n                                                        data-testid=\"tid-ukedager\"\n                                                        validateDag={(dag, value) => {\n                                                            const error = getArbeidstimerFastDagValidator()(value);\n                                                            return error\n                                                                ? {\n                                                                      key: `arbeidstidPeriodeForm.validation.tidFasteDager.tid.${error}`,\n                                                                      keepKeyUnaltered: true,\n                                                                      values: { ...intlValues, dag },\n                                                                  }\n                                                                : undefined;\n                                                        }}\n                                                    />\n                                                </FormComponents.InputGroup>\n                                            </FormBlock>\n                                        )}\n                                    </>\n                                )}\n                            </FormComponents.Form>\n                        );\n                    }}\n                />\n            </FormBlock>\n        </div>\n    );\n};\n\nexport default ArbeidstidPeriodeForm;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Modal from 'nav-frontend-modal';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport { getArbeidstidPeriodeIntl } from '../../i18n/arbeidstidPeriodeMessages';\nimport ArbeidstidPeriodeForm, { ArbeidstidPeriodeFormProps } from '../arbeidstid-periode-form/ArbeidstidPeriodeForm';\nimport './arbeidstidPeriodeDialog.less';\n\ninterface Props {\n    isOpen: boolean;\n    formProps: ArbeidstidPeriodeFormProps;\n}\n\nconst ArbeidstidPeriodeDialog: React.FunctionComponent<Props> = ({ isOpen, formProps }) => {\n    const { intlText } = getArbeidstidPeriodeIntl(useIntl());\n    return isOpen ? (\n        <Modal\n            isOpen={isOpen}\n            contentLabel={intlText('arbeidstidPeriodeDialog.contentLabel')}\n            onRequestClose={formProps.onCancel}\n            shouldCloseOnOverlayClick={false}\n            className=\"arbeidstidPeriodeDialog\">\n            <Normaltekst tag=\"div\">\n                <ArbeidstidPeriodeForm {...formProps} />\n            </Normaltekst>\n        </Modal>\n    ) : null;\n};\n\nexport default ArbeidstidPeriodeDialog;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { FormikInputGroup, FormikTimeInput, TestProps } from '@navikt/sif-common-formik';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport {\n    dateFormatter,\n    decimalDurationToDuration,\n    Duration,\n    durationToDecimalDuration,\n    DurationWeekdays,\n    isDateInDates,\n    isDateInWeekdays,\n    summarizeDurationInDurationWeekdays,\n    Weekday,\n} from '@navikt/sif-common-utils';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport LabelInputInfoLayout from '../../common/label-input-info-layout/LabelInputInfoLayout';\nimport TimerOgMinutter, { formatTimerOgMinutter } from '../../common/timer-og-minutter/TimerOgMinutter';\nimport { Daginfo, Ukeinfo } from '../../types';\nimport './arbeidstidUkeInput.less';\n\nexport type ArbeidstidUkeInputEnkeltdagValidator = (dato: Date) => (value: Duration) => ValidationError | undefined;\n\nexport interface ArbeidstidUkeTekster {\n    dag: React.ReactNode;\n    jobber: React.ReactNode;\n    fravær: React.ReactNode;\n    ariaLabelTidInput: (dato: string) => React.ReactNode;\n}\ninterface OwnProps {\n    ukeinfo: Ukeinfo;\n    visUkeTittel?: boolean;\n    getFieldName: (dag: Daginfo) => string;\n    getDagValue: (dag: Daginfo) => Duration | undefined;\n    beregnFravær?: boolean;\n    utilgjengeligeDatoer?: Date[];\n    utilgjengeligeUkedager?: Weekday[];\n    tekst: ArbeidstidUkeTekster;\n    normalarbeidstidUkedager?: DurationWeekdays;\n    enkeltdagValidator?: ArbeidstidUkeInputEnkeltdagValidator;\n}\n\ntype Props = OwnProps & TestProps;\n\nconst bem = bemUtils('arbeidstidUkeInput');\n\nconst ArbeidOgFraværOppsummering = ({\n    timerNormaltPerUke,\n    timerRegistrertIUke,\n}: {\n    timerNormaltPerUke: number;\n    timerRegistrertIUke: number;\n}) => {\n    const intl = useIntl();\n    const durationNormalt = decimalDurationToDuration(timerNormaltPerUke);\n\n    const durationRegistrert = decimalDurationToDuration(timerRegistrertIUke);\n    const durationFravær = decimalDurationToDuration(timerNormaltPerUke - timerRegistrertIUke);\n\n    if (timerRegistrertIUke === 0) {\n        return <>Ingen arbeidstid registrert</>;\n    }\n\n    return (\n        <>\n            {formatTimerOgMinutter(intl, durationRegistrert)} av normalt {formatTimerOgMinutter(intl, durationNormalt)}{' '}\n            registrert ({formatTimerOgMinutter(intl, durationFravær)} fravær)\n        </>\n    );\n};\n\nconst renderFraværInfo = (fravær: Duration | undefined, arbeidstid: Duration | undefined) => {\n    const heltFravær = fravær ? durationToDecimalDuration(fravær) === 0 : false;\n    if (fravær) {\n        return (\n            <>\n                {arbeidstid && (\n                    <span className=\"sr-only\">\n                        <TimerOgMinutter timer={arbeidstid.hours} minutter={arbeidstid.minutes} /> med jobb gir{' '}\n                    </span>\n                )}\n                {!heltFravær && (\n                    <>\n                        <TimerOgMinutter timer={fravær.hours} minutter={fravær.minutes} /> fravær\n                    </>\n                )}\n                {heltFravær && <>Fullt fravær</>}\n            </>\n        );\n    }\n\n    return undefined;\n};\n\nconst ArbeidstidUkeInput: React.FunctionComponent<Props> = ({\n    ukeinfo,\n    utilgjengeligeDatoer,\n    utilgjengeligeUkedager,\n    normalarbeidstidUkedager,\n    visUkeTittel,\n    getFieldName,\n    getDagValue,\n    enkeltdagValidator,\n    tekst,\n    beregnFravær,\n    'data-testid': testId,\n}) => {\n    const { dager } = ukeinfo;\n\n    const timerNormaltPerUke = normalarbeidstidUkedager\n        ? durationToDecimalDuration(summarizeDurationInDurationWeekdays(normalarbeidstidUkedager))\n        : undefined;\n\n    const timerRegistrertIUke = dager\n        .map((dag) => {\n            const timerPåDag = dag.weekday ? getDagValue(dag) : undefined;\n            return timerPåDag ? durationToDecimalDuration(timerPåDag) : 0;\n        })\n        .reduce((d, n) => d + n);\n\n    return (\n        <div className={bem.block}>\n            {visUkeTittel && (\n                <Normaltekst tag=\"h3\" className={bem.element('tittel')}>\n                    {getUkeTittel(ukeinfo)}\n                </Normaltekst>\n            )}\n            <div className={bem.element('uke__ukedager')}>\n                {dager.map((dag) => {\n                    const erUtilgjengeligDato = isDateInDates(dag.dato, utilgjengeligeDatoer);\n                    const erUtilgjengeligUkedag = utilgjengeligeUkedager\n                        ? isDateInWeekdays(dag.dato, utilgjengeligeUkedager)\n                        : false;\n                    if (erUtilgjengeligDato || erUtilgjengeligUkedag) {\n                        return null;\n                    }\n                    const dayDateString = inputDatoLabel(dag.dato);\n                    const normalarbeidstid =\n                        normalarbeidstidUkedager && dag.weekday ? normalarbeidstidUkedager[dag.weekday] : undefined;\n\n                    const value = getDagValue(dag);\n                    const fravær =\n                        beregnFravær && value && normalarbeidstid\n                            ? decimalDurationToDuration(\n                                  durationToDecimalDuration(normalarbeidstid) - durationToDecimalDuration(value)\n                              )\n                            : normalarbeidstid;\n\n                    return (\n                        <FormikInputGroup\n                            key={dag.isoDate}\n                            legend={<span className=\"sr-only\">{dayDateString}</span>}\n                            name={`arbeidstid_${dag.isoDate}`}\n                            className={bem.element('dag', erUtilgjengeligDato ? 'utilgjengelig' : undefined)}>\n                            <LabelInputInfoLayout\n                                narrowBreakpoint={860}\n                                label={\n                                    <div role=\"presentation\" aria-hidden=\"true\" className={bem.element('dagnavn')}>\n                                        {dayDateString}\n                                    </div>\n                                }\n                                input={\n                                    <FormikTimeInput\n                                        aria-describedby=\"iPerioden\"\n                                        name={getFieldName(dag)}\n                                        label={\n                                            <span className={'sr-only'}>{tekst.ariaLabelTidInput(dayDateString)}</span>\n                                        }\n                                        timeInputLayout={{\n                                            direction: 'horizontal',\n                                        }}\n                                        data-testid={`${testId}__dag.isoDate`}\n                                        validate={enkeltdagValidator ? enkeltdagValidator(dag.dato) : undefined}\n                                    />\n                                }\n                                info={beregnFravær ? renderFraværInfo(fravær, value) : undefined}\n                            />\n                        </FormikInputGroup>\n                    );\n                })}\n            </div>\n            {1 + 1 === 3 && timerNormaltPerUke !== undefined && timerRegistrertIUke !== undefined && (\n                <Box margin=\"s\" padBottom=\"s\">\n                    <ArbeidOgFraværOppsummering\n                        timerNormaltPerUke={timerNormaltPerUke}\n                        timerRegistrertIUke={timerRegistrertIUke}\n                    />\n                </Box>\n            )}\n        </div>\n    );\n};\n\nconst inputDatoLabel = (date: Date): string => dateFormatter.dayDateShortMonth(date);\n\nexport const getUkeTittel = ({ ukenummer, år }: Ukeinfo): string => {\n    return `Uke ${ukenummer}, ${år}`;\n};\n\nexport default ArbeidstidUkeInput;\n","import React from 'react';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { DateRange, TestProps } from '@navikt/sif-common-formik';\nimport { DurationWeekdays, InputDateDurationMap, isDateInDates, Weekday } from '@navikt/sif-common-utils/lib';\nimport Ekspanderbartpanel from 'nav-frontend-ekspanderbartpanel';\nimport { tidUkerInputUtils } from '../../tid/tid-uker-input/tidUkerUtils';\nimport { Daginfo, Ukeinfo } from '../../types';\nimport ArbeidstidUkeInput, {\n    ArbeidstidUkeInputEnkeltdagValidator,\n    ArbeidstidUkeTekster,\n    getUkeTittel,\n} from '../arbeidstid-uke-input/ArbeidstidUkeInput';\nimport './arbeidstidUkerInput.less';\n\nconst getTidKalenderFieldName = (fieldName: string, dag: Daginfo): string => `${fieldName}.${dag.isoDate}`;\n\ninterface OwnProps {\n    fieldName: string;\n    arbeidstid: InputDateDurationMap;\n    periode: DateRange;\n    utilgjengeligeDatoer?: Date[];\n    utilgjengeligeUkedager?: Weekday[];\n    tekster: ArbeidstidUkeTekster;\n    normalarbeidstidUkedager?: DurationWeekdays;\n    useExpandablePanel?: boolean;\n    beregnFravær?: boolean;\n    ukeTittelRenderer?: (uke: Ukeinfo) => React.ReactNode;\n    enkeltdagValidator?: ArbeidstidUkeInputEnkeltdagValidator;\n}\n\ntype Props = OwnProps & TestProps;\n\nconst bem = bemUtils('arbeidstidUkerInput');\n\nexport const ArbeidstidUkerInput: React.FunctionComponent<Props> = ({\n    fieldName,\n    periode,\n    arbeidstid,\n    utilgjengeligeDatoer,\n    utilgjengeligeUkedager,\n    normalarbeidstidUkedager,\n    tekster,\n    beregnFravær,\n    useExpandablePanel,\n    enkeltdagValidator,\n    'data-testid': testId,\n}) => {\n    const dager = tidUkerInputUtils.getDagInfoForPeriode(periode);\n    const uker = tidUkerInputUtils\n        .getUkerFraDager(dager)\n        .filter(\n            (uke) =>\n                uke.dager.filter((dag) => isDateInDates(dag.dato, utilgjengeligeDatoer)).length !== uke.dager.length\n        );\n\n    const renderUke = (uke: Ukeinfo, visUkeTittel: boolean) => (\n        <div key={uke.ukenummer} className={bem.element('ukeWrapper')}>\n            <ArbeidstidUkeInput\n                getFieldName={(dag) => getTidKalenderFieldName(fieldName, dag)}\n                getDagValue={(dag) => {\n                    const dur = arbeidstid[dag.isoDate];\n                    return {\n                        hours: dur?.hours || '0',\n                        minutes: dur?.minutes || '0',\n                    };\n                }}\n                data-testid={testId}\n                beregnFravær={beregnFravær}\n                visUkeTittel={visUkeTittel}\n                ukeinfo={uke}\n                utilgjengeligeDatoer={utilgjengeligeDatoer}\n                utilgjengeligeUkedager={utilgjengeligeUkedager}\n                normalarbeidstidUkedager={normalarbeidstidUkedager}\n                enkeltdagValidator={enkeltdagValidator}\n                tekst={tekster}\n            />\n        </div>\n    );\n\n    return (\n        <div className={bem.block}>\n            {uker.map((uke) => {\n                if (useExpandablePanel) {\n                    return (\n                        <div key={uke.ukenummer} className={bem.element('ukeWrapper', 'expandable')}>\n                            <Ekspanderbartpanel tittel={getUkeTittel(uke)}>\n                                <Box margin=\"m\">{renderUke(uke, false)}</Box>\n                            </Ekspanderbartpanel>\n                        </div>\n                    );\n                } else {\n                    return (\n                        <div key={uke.ukenummer} className={bem.element('ukeWrapper')}>\n                            {renderUke(uke, true)}\n                        </div>\n                    );\n                }\n            })}\n        </div>\n    );\n};\n\nexport default ArbeidstidUkerInput;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { dateFormatter, dateToday } from '@navikt/sif-common-utils/lib';\nimport dayjs from 'dayjs';\nimport TidEnkeltdagDialog, { TidEnkeltdagDialogProps } from '../../tid/tid-enkeltdag-dialog/TidEnkeltdagDialog';\nimport { TidEnkeltdagFormProps } from '../../tid/tid-enkeltdag-dialog/TidEnkeltdagForm';\n\ninterface Props extends Omit<TidEnkeltdagDialogProps, 'dialogTitle' | 'formProps'> {\n    formProps: Omit<TidEnkeltdagFormProps, 'hvorMyeSpørsmålRenderer' | 'maksTid'>;\n}\n\nconst OmsorgstilbudEnkeltdagDialog: React.FunctionComponent<Props> = ({ isOpen, formProps }: Props) => {\n    const intl = useIntl();\n\n    const hvorMyeSpørsmålRenderer = (dato: Date): string => {\n        const erHistorisk = dayjs(dato).isBefore(dateToday, 'day');\n        return intlHelper(\n            intl,\n            erHistorisk ? 'omsorgstilbudEnkeltdagForm.tid.spm.historisk' : 'omsorgstilbudEnkeltdagForm.tid.spm',\n            { dato: dateFormatter.dayDateMonthYear(dato) }\n        );\n    };\n    return (\n        <TidEnkeltdagDialog\n            isOpen={isOpen}\n            dialogTitle={intlHelper(intl, 'omsorgstilbudEnkeltdagForm.tittel', {\n                dato: dateFormatter.full(formProps.dato),\n            })}\n            formProps={{ ...formProps, hvorMyeSpørsmålRenderer, maksTid: { hours: 7, minutes: 30 } }}\n        />\n    );\n};\n\nexport default OmsorgstilbudEnkeltdagDialog;\n","const omsorgstilbudEnkeltdagFormMessages = {\n    nb: {\n        'omsorgstilbudEnkeltdagForm.tittel': 'Tid i omsorgstilbud {dato}',\n        'omsorgstilbudEnkeltdagForm.tid.spm': 'Hvor mye skal barnet være i omsorgstilbud {dato}?',\n        'omsorgstilbudEnkeltdagForm.tid.spm.historisk': 'Hvor mye var barnet i omsorgstilbud {dato}?',\n    },\n};\n\nexport default omsorgstilbudEnkeltdagFormMessages;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { DateRange, getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport datepickerUtils from '@navikt/sif-common-formik/lib/components/formik-datepicker/datepickerUtils';\nimport {\n    getDateRangeValidator,\n    ValidateDateError,\n    ValidateDateRangeError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getIntlFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { DurationWeekdays } from '@navikt/sif-common-utils/lib';\nimport { InputDateString } from 'nav-datovelger/lib/types';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport TidFasteUkedagerInput from '../../../../tid/tid-faste-ukedager-input/TidFasteUkedagerInput';\nimport { getOmsorgstilbudPeriodeIntl } from '../../i18n/omsorgstilbudPeriodeMessages';\nimport { getOmsorgstilbudFastDagValidator, validateOmsorgstilbudFasteDager } from './omsorgstilbudFormValidation';\n\nexport interface OmsorgstilbudPeriodeFormProps {\n    periode: DateRange;\n    onSubmit: (data: OmsorgstilbudPeriodeData) => void;\n    onCancel: () => void;\n}\n\nexport type OmsorgstilbudPeriodeData = {\n    fom: Date;\n    tom: Date;\n    tidFasteDager: DurationWeekdays;\n};\n\nenum FormFields {\n    'fom' = 'fom',\n    'tom' = 'tom',\n    'tidFasteDager' = 'tidFasteDager',\n    'tidFasteDager.gruppe' = 'tidFasteDager.gruppe',\n}\n\ninterface FormValues {\n    [FormFields.fom]: InputDateString;\n    [FormFields.tom]: InputDateString;\n    [FormFields.tidFasteDager]: DurationWeekdays;\n}\n\nconst initialFormValues: Partial<FormValues> = {};\n\nconst FormComponents = getTypedFormComponents<FormFields, FormValues, ValidationError>();\n\nconst OmsorgstilbudPeriodeForm: React.FC<OmsorgstilbudPeriodeFormProps> = ({ periode, onSubmit, onCancel }) => {\n    const intl = useIntl();\n    const { intlText } = getOmsorgstilbudPeriodeIntl(intl);\n\n    const onValidSubmit = (values: Partial<FormValues>) => {\n        const fom = datepickerUtils.getDateFromDateString(values.fom);\n        const tom = datepickerUtils.getDateFromDateString(values.tom);\n\n        if (!fom || !tom || !values.tidFasteDager) {\n            throw new Error('OmsorgstilbudPeriodeForm. Ugyldig fom/tom eller tidFasteDager ');\n        }\n\n        onSubmit({\n            fom,\n            tom,\n            tidFasteDager: values.tidFasteDager,\n        });\n    };\n\n    return (\n        <div>\n            <Undertittel tag=\"h1\" className=\"dialogFormTitle\">\n                {intlText('omsorgstilbudPeriodeForm.tittel')}\n            </Undertittel>\n            <FormBlock margin=\"xl\">\n                <FormComponents.FormikWrapper\n                    initialValues={initialFormValues}\n                    onSubmit={onValidSubmit}\n                    renderForm={({ values: { fom, tom, tidFasteDager } }) => {\n                        const from = datepickerUtils.getDateFromDateString(fom);\n                        const to = datepickerUtils.getDateFromDateString(tom);\n\n                        return (\n                            <FormComponents.Form\n                                onCancel={onCancel}\n                                formErrorHandler={getIntlFormErrorHandler(intl, 'omsorgstilbudPeriodeForm.validation')}\n                                includeValidationSummary={true}\n                                submitButtonLabel={intlText('omsorgstilbudPeriodeForm.submitButtonLabel')}\n                                cancelButtonLabel={intlText('omsorgstilbudPeriodeForm.cancelButtonLabel')}>\n                                <div style={{ maxWidth: '20rem' }}>\n                                    <FormBlock>\n                                        <FormComponents.DateIntervalPicker\n                                            fromDatepickerProps={{\n                                                label: intlText('omsorgstilbudPeriodeForm.fraOgMed.label'),\n                                                name: FormFields.fom,\n                                                disableWeekend: true,\n                                                fullscreenOverlay: true,\n                                                fullScreenOnMobile: true,\n                                                dayPickerProps: {\n                                                    initialMonth: periode.from,\n                                                },\n                                                minDate: periode.from,\n                                                maxDate: to || periode.to,\n                                                validate: getDateRangeValidator({\n                                                    required: true,\n                                                    onlyWeekdays: true,\n                                                    toDate: to,\n                                                    fromDate: from,\n                                                    min: periode.from,\n                                                    max: to || periode.to,\n                                                }).validateFromDate,\n                                            }}\n                                            toDatepickerProps={{\n                                                label: intlText('omsorgstilbudPeriodeForm.tilOgMed.label'),\n                                                name: FormFields.tom,\n                                                disableWeekend: true,\n                                                fullScreenOnMobile: true,\n                                                fullscreenOverlay: true,\n                                                minDate: from || periode.from,\n                                                maxDate: periode.to,\n                                                dayPickerProps: {\n                                                    initialMonth: from || periode.from,\n                                                },\n                                                validate: getDateRangeValidator({\n                                                    required: true,\n                                                    onlyWeekdays: true,\n                                                    toDate: to,\n                                                    fromDate: from,\n                                                    min: from || periode.from,\n                                                    max: periode.to,\n                                                }).validateToDate,\n                                            }}\n                                        />\n                                    </FormBlock>\n                                </div>\n\n                                <FormBlock>\n                                    <FormComponents.InputGroup\n                                        legend={intlText('omsorgstilbudPeriodeForm.tidFasteDager.label')}\n                                        validate={() => {\n                                            const error = validateOmsorgstilbudFasteDager(tidFasteDager);\n                                            return error\n                                                ? {\n                                                      key: `${error}`,\n                                                  }\n                                                : undefined;\n                                        }}\n                                        name={FormFields['tidFasteDager.gruppe']}>\n                                        <TidFasteUkedagerInput\n                                            name={FormFields.tidFasteDager}\n                                            validateDag={(dag, value) => {\n                                                const error = getOmsorgstilbudFastDagValidator()(value);\n                                                return error\n                                                    ? {\n                                                          key: `omsorgstilbudPeriodeForm.validation.tidFasteDager.tid.${error}`,\n                                                          keepKeyUnaltered: true,\n                                                          values: { dag },\n                                                      }\n                                                    : undefined;\n                                            }}\n                                        />\n                                    </FormComponents.InputGroup>\n                                </FormBlock>\n                            </FormComponents.Form>\n                        );\n                    }}\n                />\n            </FormBlock>\n        </div>\n    );\n};\n\nexport const OmsorgstilbudPeriodeFormErrors = {\n    [FormFields.fom]: {\n        [ValidateDateError.dateHasNoValue]: 'omsorgstilbudPeriodeForm.validation.fom.dateHasNoValue',\n        [ValidateDateError.dateIsAfterMax]: 'omsorgstilbudPeriodeForm.validation.fom.dateIsAfterMax',\n        [ValidateDateError.dateIsBeforeMin]: 'omsorgstilbudPeriodeForm.validation.fom.dateIsBeforeMin',\n        [ValidateDateError.dateHasInvalidFormat]: 'omsorgstilbudPeriodeForm.validation.fom.dateHasInvalidFormat',\n        [ValidateDateRangeError.fromDateIsAfterToDate]: 'omsorgstilbudPeriodeForm.validation.fom.fromDateIsAfterToDate',\n    },\n    [FormFields.tom]: {\n        [ValidateDateError.dateHasNoValue]: 'omsorgstilbudPeriodeForm.validation.tom.dateHasNoValue',\n        [ValidateDateError.dateIsAfterMax]: 'omsorgstilbudPeriodeForm.validation.tom.dateIsAfterMax',\n        [ValidateDateError.dateIsBeforeMin]: 'omsorgstilbudPeriodeForm.validation.tom.dateIsBeforeMin',\n        [ValidateDateError.dateHasInvalidFormat]: 'omsorgstilbudPeriodeForm.validation.tom.dateHasInvalidFormat',\n        [ValidateDateRangeError.toDateIsBeforeFromDate]:\n            'omsorgstilbudPeriodeForm.validation.tom.toDateIsBeforeFromDate',\n    },\n    [FormFields['tidFasteDager.gruppe']]: {\n        ['ingenTidRegistrert']: 'omsorgstilbudPeriodeForm.validation.tidFasteDager.gruppe.ingenTidRegistrert',\n        ['forMangeTimer']: 'omsorgstilbudPeriodeForm.validation.tidFasteDager.gruppe.forMangeTimer',\n    },\n};\n\nexport default OmsorgstilbudPeriodeForm;\n","import getTimeValidator from '@navikt/sif-common-formik/lib/validation/getTimeValidator';\nimport { ValidationError, ValidationResult } from '@navikt/sif-common-formik/lib/validation/types';\nimport { DurationWeekdays, summarizeDurationInDurationWeekdays } from '@navikt/sif-common-utils/lib';\n\nexport const getOmsorgstilbudFastDagValidator = () =>\n    getTimeValidator({ max: { hours: 7, minutes: 30 }, min: { hours: 0, minutes: 0 } });\n\nexport const validateOmsorgstilbudFasteDager = (\n    fasteDager: DurationWeekdays | undefined\n): ValidationResult<ValidationError> => {\n    let error;\n    const timer = fasteDager ? summarizeDurationInDurationWeekdays(fasteDager) : 0;\n    if (timer === 0) {\n        error = 'ingenTidRegistrert';\n    }\n    if (timer > 37.5) {\n        error = 'forMangeTimer';\n    }\n    return error;\n};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport Modal from 'nav-frontend-modal';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport OmsorgstilbudPeriodeForm, {\n    OmsorgstilbudPeriodeFormProps,\n} from '../omsorgstilbud-periode-form/OmsorgstilbudPeriodeForm';\nimport './omsorgstilbudPeriodeDialog.less';\n\ninterface Props {\n    isOpen: boolean;\n    formProps: Pick<OmsorgstilbudPeriodeFormProps, 'periode' | 'onCancel' | 'onSubmit'>;\n}\n\nconst OmsorgstilbudPeriodeDialog: React.FC<Props> = ({ formProps, isOpen }) => {\n    const intl = useIntl();\n    return isOpen ? (\n        <Modal\n            isOpen={isOpen}\n            contentLabel={intlHelper(intl, 'omsorgstilbudPeriodeDialog.contentLabel')}\n            onRequestClose={formProps.onCancel}\n            shouldCloseOnOverlayClick={false}\n            className=\"omsorgstilbudPeriodeDialog\">\n            <Normaltekst tag=\"div\">\n                <OmsorgstilbudPeriodeForm {...formProps} />\n            </Normaltekst>\n        </Modal>\n    ) : null;\n};\n\nexport default OmsorgstilbudPeriodeDialog;\n","import React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { DateRange, dateToISOString, InputTime } from '@navikt/sif-common-formik/lib';\nimport { DateDurationMap, durationIsZero, getDurationsInDateRange } from '@navikt/sif-common-utils';\nimport dayjs from 'dayjs';\nimport Ekspanderbartpanel from 'nav-frontend-ekspanderbartpanel';\nimport { Element, Normaltekst } from 'nav-frontend-typografi';\nimport { DurationText, OmsorgstilbudEnkeltdagDialog, TidsbrukKalender } from '../..';\nimport { TidEnkeltdagEndring } from '../../tid/tid-enkeltdag-dialog/TidEnkeltdagForm';\n\ninterface Props {\n    måned: DateRange;\n    tidOmsorgstilbud: DateDurationMap;\n    utilgjengeligeDatoer?: Date[];\n    månedTittelHeadingLevel?: number;\n    periode: DateRange;\n    åpentEkspanderbartPanel?: boolean;\n    onEnkeltdagChange?: (evt: TidEnkeltdagEndring) => void;\n}\n\nconst OmsorgstilbudMåned: React.FunctionComponent<Props> = ({\n    måned,\n    tidOmsorgstilbud,\n    utilgjengeligeDatoer,\n    månedTittelHeadingLevel = 2,\n    periode,\n    åpentEkspanderbartPanel,\n    onEnkeltdagChange,\n}) => {\n    const [editDate, setEditDate] = useState<{ dato: Date; tid: Partial<InputTime> } | undefined>();\n\n    const dager: DateDurationMap = getDurationsInDateRange(tidOmsorgstilbud, måned);\n    const dagerMedRegistrertOmsorgstilbud: string[] = Object.keys(dager).filter((key) => {\n        const datoTid = dager[key];\n        return datoTid !== undefined && datoTid !== undefined && durationIsZero(datoTid) === false;\n    });\n\n    return (\n        <Ekspanderbartpanel\n            renderContentWhenClosed={false}\n            apen={åpentEkspanderbartPanel}\n            tittel={\n                <>\n                    <Element tag={`h${månedTittelHeadingLevel}`}>\n                        <FormattedMessage\n                            id=\"omsorgstilbudMåned.ukeOgÅr\"\n                            values={{ ukeOgÅr: dayjs(måned.from).format('MMMM YYYY') }}\n                        />{' '}\n                        <Normaltekst tag=\"div\">\n                            {dagerMedRegistrertOmsorgstilbud.length === 0 ? (\n                                <FormattedMessage id=\"omsorgstilbudMåned.dagerRegistrert.ingenDager\" />\n                            ) : (\n                                <FormattedMessage\n                                    id=\"omsorgstilbudMåned.dagerRegistrert.dager\"\n                                    values={{ dager: dagerMedRegistrertOmsorgstilbud.length }}\n                                />\n                            )}\n                        </Normaltekst>\n                    </Element>\n                </>\n            }>\n            <TidsbrukKalender\n                periode={måned}\n                dager={dager}\n                utilgjengeligeDatoer={utilgjengeligeDatoer}\n                skjulTommeDagerIListe={true}\n                visOpprinneligTid={false}\n                tidRenderer={({ tid, prosent }) => {\n                    if (prosent !== undefined && prosent > 0) {\n                        return (\n                            <>\n                                <div>{prosent} %</div>\n                                {1 + 1 === 2 && (\n                                    <div className=\"beregnetTid\">\n                                        (<DurationText duration={tid} />)\n                                    </div>\n                                )}\n                            </>\n                        );\n                    }\n                    if (tid.hours === '0' && tid.minutes === '0') {\n                        return <></>;\n                    }\n                    return <DurationText duration={tid} />;\n                }}\n                onDateClick={\n                    onEnkeltdagChange\n                        ? (dato) => {\n                              const tid: Partial<InputTime> = dager[dateToISOString(dato)] || {\n                                  hours: '',\n                                  minutes: '',\n                              };\n                              setEditDate({ dato, tid });\n                          }\n                        : undefined\n                }\n            />\n            {editDate && onEnkeltdagChange && (\n                <OmsorgstilbudEnkeltdagDialog\n                    isOpen={editDate !== undefined}\n                    formProps={{\n                        periode,\n                        dato: editDate.dato,\n                        tid: editDate.tid,\n                        onSubmit: (evt) => {\n                            setEditDate(undefined);\n                            setTimeout(() => {\n                                /** TimeOut pga komponent unmountes */\n                                onEnkeltdagChange(evt);\n                            });\n                        },\n                        onCancel: () => setEditDate(undefined),\n                    }}\n                />\n            )}\n        </Ekspanderbartpanel>\n    );\n};\n\nexport default OmsorgstilbudMåned;\n","import { IntlShape } from 'react-intl';\nimport { typedIntlHelper } from '@navikt/sif-common-core/lib/utils/intlUtils';\n\nconst omsorgstilbudPeriodeFormMessages = {\n    nb: {\n        'omsorgstilbudPeriodeForm.tittel': 'Oppgi periode med omsorgstilbud',\n        'omsorgstilbudPeriodeForm.submitButtonLabel': 'Ok',\n        'omsorgstilbudPeriodeForm.cancelButtonLabel': 'Avbryt',\n        'omsorgstilbudPeriodeForm.fraOgMed.label': 'Fra og med',\n        'omsorgstilbudPeriodeForm.tilOgMed.label': 'Til og med',\n        'omsorgstilbudPeriodeForm.tidFasteDager.label': 'Fyll ut tiden i omsorgstilbudet som er fast og regelmessig:',\n    },\n};\n\nconst omsorgstilbudPeriodeFormValidationMessages = {\n    nb: {\n        'omsorgstilbudPeriodeForm.validation.fom.dateHasNoValue': 'Du må fylle ut periodens fra-dato.',\n        'omsorgstilbudPeriodeForm.validation.fom.dateHasInvalidFormat':\n            'Du må oppgi periodens fra-dato i et gyldig datoformat. Gyldig format er dd.mm.åååå.',\n        'omsorgstilbudPeriodeForm.validation.fom.fromDateIsAfterToDate':\n            'Fra-datoen kan ikke være etter til-datoen. Skriv inn eller velg dato fra kalenderen.',\n        'omsorgstilbudPeriodeForm.validation.fom.dateIsBeforeMin':\n            'Fra-datoen kan ikke være før perioden du har søkt om.',\n        'omsorgstilbudPeriodeForm.validation.tom.dateIsBeforeMin':\n            'Til-datoen kan ikke være før perioden du har søkt om.',\n        'omsorgstilbudPeriodeForm.validation.fom.dateIsAfterMax':\n            'Fra-datoen kan ikke være etter perioden du har søkt for.',\n        'omsorgstilbudPeriodeForm.validation.fom.dateIsNotWeekday':\n            'Fra-dato må være en ukedag, det kan ikke være en lørdag eller søndag. Skriv inn eller velg dato fra kalenderen.',\n        'omsorgstilbudPeriodeForm.validation.tom.dateHasNoValue': 'Du må fylle ut periodens til-dato.',\n        'omsorgstilbudPeriodeForm.validation.tom.dateHasInvalidFormat':\n            'Du må oppgi periodens til-dato i et gyldig datoformat. Gyldig format er dd.mm.åååå.',\n        'omsorgstilbudPeriodeForm.validation.tom.toDateIsBeforeFromDate':\n            'Til-datoen kan ikke være før fra-datoen. Skriv inn eller velg dato fra kalenderen.',\n        'omsorgstilbudPeriodeForm.validation.tom.dateIsAfterMax':\n            'Til-datoen kan ikke være etter perioden du har søkt for.',\n        'omsorgstilbudPeriodeForm.validation.tom.dateIsNotWeekday':\n            'Til-dato må være en ukedag, det kan ikke være en lørdag eller søndag. Skriv inn eller velg dato fra kalenderen.',\n        'omsorgstilbudPeriodeForm.validation.tidFasteDager.gruppe.ingenTidRegistrert':\n            'Du må fylle ut tiden i omsorgstilbudet som er fast og regelmessig.',\n        'omsorgstilbudPeriodeForm.validation.tidFasteDager.gruppe.forMangeTimer':\n            'Du kan ikke oppgi mer enn 37 timer og 30 minutter for en uke.',\n        'omsorgstilbudPeriodeForm.validation.tidFasteDager.tid.timeHasNoValue':\n            'Du må fylle ut timer og minutter for {dag}.',\n        'omsorgstilbudPeriodeForm.validation.tidFasteDager.tid.hoursAreInvalid':\n            'Antall timer på {dag} er ikke et gyldig tall.',\n        'omsorgstilbudPeriodeForm.validation.tidFasteDager.tid.minutesAreInvalid':\n            'Antall minutter på {dag} er ikke et gyldig tall.',\n        'omsorgstilbudPeriodeForm.validation.tidFasteDager.tid.tooManyHours':\n            'Antall timer på {dag} kan ikke overstige 7 timer og 30 minutter.',\n        'omsorgstilbudPeriodeForm.validation.tidFasteDager.tid.tooManyMinutes':\n            'Antall minutter på {dag} kan ikke overstige 59 minutter.',\n        'omsorgstilbudPeriodeForm.validation.tidFasteDager.tid.durationIsTooLong':\n            'Antall timer og minutter registrert {dag} er for høyt. Tiden kan ikke overstige 7 timer og 30 minutter hver ukedag.',\n        'omsorgstilbudPeriodeForm.validation.tidFasteDager.tid.durationIsTooShort':\n            'Antall timer og minutter {dato} {hvor} kan ikke være mindre enn 0 timer og 0 minutter.',\n        'omsorgstilbudPeriodeForm.validation.tidFasteDager.tid.minutesAreNegative':\n            'Antall timer og minutter {dag}  kan ikke være mindre enn 0 timer og 0 minutter.',\n        'omsorgstilbudPeriodeForm.validation.tidFasteDager.tid.hoursAreNegative':\n            'Antall timer og minutter {dag}  kan ikke være mindre enn 0 timer og 0 minutter.',\n    },\n};\n\nexport const omsorgstibudPeriodeMessages = {\n    nb: {\n        ...omsorgstilbudPeriodeFormMessages.nb,\n        ...omsorgstilbudPeriodeFormValidationMessages.nb,\n        'omsorgstilbudMåned.ukeOgÅr': 'Omsorgstilbud {ukeOgÅr}',\n        'omsorgstilbudMåned.dagerRegistrert.dager':\n            '{dager, plural, one {# dag} other {# dager}} med omsorgstilbud registrert.',\n        'omsorgstilbudMåned.dagerRegistrert.ingenDager': 'Ingen dager med omsorgstilbud registrert.',\n        'omsorgstilbudPeriodeDialog.contentLabel': 'Registrer tid i omsorgstilbud',\n        'omsorgstilbudPeriode.part.skalVære': 'skal være',\n    },\n};\n\ntype OmsorgstilbudPeriodeMessagesType = keyof typeof omsorgstibudPeriodeMessages.nb;\n\nexport const getOmsorgstilbudPeriodeIntl = (intl: IntlShape) => typedIntlHelper<OmsorgstilbudPeriodeMessagesType>(intl);\n","import api from \"!../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./navFrontendOverride.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import React from 'react';\nimport '../styles/navFrontendOverride.css';\n\nexport const withDialogWrapperSmall = (Story) => {\n    return (\n        <DialogWrapper>\n            <Story />\n        </DialogWrapper>\n    );\n};\n\nexport const withDialogWrapperMedium = (Story) => {\n    return (\n        <DialogWrapper width=\"640px\">\n            <Story />\n        </DialogWrapper>\n    );\n};\n\nexport const withDialogWrapperWide = (Story) => {\n    return (\n        <DialogWrapper width=\"800px\">\n            <Story />\n        </DialogWrapper>\n    );\n};\n\ninterface Props {\n    width?: string;\n}\n\nconst DialogWrapper: React.FunctionComponent<Props> = ({ children, width }) => (\n    <div\n        style={{\n            maxWidth: width || '480px',\n            border: '2px solid #ccc',\n            borderRadius: '.25rem',\n            padding: '1.5rem',\n            boxShadow: '0 0 10px rgba(0,0,0,.2)',\n        }}>\n        {children}\n    </div>\n);\n\nexport default DialogWrapper;\n","export const timerOgMinutterMessages = {\n    nb: {\n        timer: '{timer, plural, one {# time} other {# timer}}',\n        minutter: '{minutter, plural, one {# minutt} other {# minutter}}',\n        timerOgMinutter:\n            '{timer, plural, one {# time} other {# timer}} og {minutter, plural, one {# minutt} other {# minutter}}',\n    },\n};\n","const arbeidstidMånedMessages = {\n    nb: {\n        'arbeidstidMånedTittel.ukeOgÅr': '{ukeOgÅr}',\n        'arbeidstidMånedTittel.iPeriodePanel.info': '{dager, plural, one {# dag} other {# dager}} med jobb registrert.',\n        'arbeidstidMånedTittel.iPeriodePanel.info.ingenDager': 'Ingen dager med jobb registrert.',\n    },\n};\n\nexport default arbeidstidMånedMessages;\n","const tidEnkeltdagFormMessages = {\n    nb: {\n        'tidEnkeltdagForm.endretFra': 'Endret fra',\n        'tidEnkeltdagForm.gjelderFlereDager.label': 'Gjenta disse timene for flere dager',\n        'tidEnkeltdagForm.gjelderFlereDager.info':\n            'Velg hvilke andre dager i søknadsperioden du ønsker at disse timene skal registreres på:',\n        'tidEnkeltdagForm.gjentagelse.helUke': 'Alle dager i uke {ukeNavn}',\n        'tidEnkeltdagForm.gjentagelse.delAvUke': 'Alle dager i uke {ukeNavn}',\n        'tidEnkeltdagForm.gjentagelse.helMåned': 'Alle dager i {månedNavn}',\n        'tidEnkeltdagForm.gjentagelse.delAvMåned': 'Alle dager i {månedNavn}',\n        'tidEnkeltdagForm.gjentagelse.dagerFremover': 'Alle {dagerNavn} fra og med {fra}',\n        'tidEnkeltdagForm.gjentagelse.periode': '({fra} - {til})',\n        'tidEnkeltdagForm.stoppGjentagelse.label': 'Velg en annen til og med dato',\n        'tidEnkeltdagForm.stopDato.label': 'Velg til og med dato',\n        'tidEnkeltdagForm.validation.gjentagelse.noValue':\n            'Du må velge hvilke flere dager tiden skal gjelde, eller velge bort valget om at det gjelder flere dager.',\n        'tidEnkeltdagForm.validation.stopDato.dateHasNoValue': 'Du må fylle ut til og med dato.',\n        'tidEnkeltdagForm.validation.stopDato.dateHasInvalidFormat':\n            'Du må oppgi til og med dato i et gyldig datoformat. Gyldig format er dd.mm.åååå.',\n        'tidEnkeltdagForm.validation.stopDato.dateIsBeforeMin': 'Du kan ikke sette til og med dato til før fra-datoen.',\n        'tidEnkeltdagForm.validation.stopDato.dateIsNotWeekday':\n            'Til og med datoen må være en lørdag eller søndag. Skriv inn eller velg dato fra kalenderen.',\n        'tidEnkeltdagForm.validation.stopDato.dateIsAfterMax':\n            'Til og med dato kan ikke være etter perioden du søker for.',\n        'tidEnkeltdagForm.validation.tid.timeHasNoValue': 'Du må fylle ut timer og minutter.',\n        'tidEnkeltdagForm.validation.tid.hoursAreInvalid': 'Antall timer er ikke et gyldig tall.',\n        'tidEnkeltdagForm.validation.tid.hoursAreNegative': 'Antall timer kan ikke være et negativt tall.',\n        'tidEnkeltdagForm.validation.tid.minutesAreInvalid': 'Antall minutter er ikke et gyldig tall.',\n        'tidEnkeltdagForm.validation.tid.minutesAreNegative': 'Antall minutter kan ikke være et negativt tall.',\n        'tidEnkeltdagForm.validation.tid.tooManyHours':\n            'Antall timer og minutter kan ikke overstige {maksTimer} timer og {maksMinutter} minutter.',\n        'tidEnkeltdagForm.validation.tid.tooManyMinutes':\n            'Antall timer og minutter kan ikke overstige {maksTimer} timer og {maksMinutter} minutter.',\n        'tidEnkeltdagForm.validation.tid.durationIsTooLong':\n            'Antall timer og minutter kan ikke overstige {maksTimer} timer og {maksMinutter} minutter.',\n        'tidEnkeltdagForm.validation.tid.durationIsTooShort':\n            'Antall timer og minutter kan ikke være mindre enn {minTimer} timer og {minMinutter} minutter.',\n    },\n};\n\nexport default tidEnkeltdagFormMessages;\n","import { calendarGridMessages } from '../common/calendar-grid/calendarGridMessages';\nimport { dagerMedTidMessages } from '../common/dager-med-tid-liste/dagerMedTidMessages';\nimport { timerOgMinutterMessages } from '../common/timer-og-minutter/timerOgMinutterMessages';\nimport { omsorgstilbudEnkeltdagFormMessages } from '../';\nimport arbeidstidEnkeltdagFormMessages from '../arbeidstid/arbeidstid-enkeltdag-dialog/arbeidstidEnkeltdagMessages';\nimport arbeidstidMånedMessages from '../arbeidstid/arbeidstid-måned/i18n/arbeidstidMånedMessages';\nimport { arbeidstidPeriodeMessages } from '../arbeidstid/arbeidstid-periode-dialog/i18n/arbeidstidPeriodeMessages';\nimport { omsorgstibudPeriodeMessages } from '../omsorgstilbud/omsorgstilbud-periode/i18n/omsorgstilbudPeriodeMessages';\nimport tidEnkeltdagFormMessages from '../tid/tid-enkeltdag-dialog/tidEnkeltdagMessages';\n\nexport type ComponentMessages<Messages> = Record<string, Messages>;\n\nexport const sifCommonPleiepengerMessages = {\n    nb: {\n        ...arbeidstidPeriodeMessages.nb,\n        ...omsorgstibudPeriodeMessages.nb,\n        ...omsorgstilbudEnkeltdagFormMessages.nb,\n        ...timerOgMinutterMessages.nb,\n        ...tidEnkeltdagFormMessages.nb,\n        ...arbeidstidEnkeltdagFormMessages.nb,\n        ...calendarGridMessages.nb,\n        ...arbeidstidMånedMessages.nb,\n        ...dagerMedTidMessages.nb,\n    },\n};\n","export const calendarGridMessages = {\n    nb: {\n        'calendarGrid.Mandag': 'Mandag',\n        'calendarGrid.Tirsdag': 'Tirsdag',\n        'calendarGrid.Onsdag': 'Onsdag',\n        'calendarGrid.Torsdag': 'Torsdag',\n        'calendarGrid.Fredag': 'Fredag',\n        'calendarGrid.uke': 'uke',\n        'calendarGrid.Uke': 'Uke',\n        'calendarGrid.måned': 'måned',\n        'calendarGrid.Måned': 'Måned',\n    },\n};\n","export const dagerMedTidMessages = {\n    nb: {\n        'dagerMedTid.mandager': 'Mandager',\n        'dagerMedTid.tirsdager': 'Tirsdager',\n        'dagerMedTid.onsdager': 'Onsdager',\n        'dagerMedTid.torsdager': 'Torsdager',\n        'dagerMedTid.fredager': 'Fredager',\n        'dagerMedTid.ingenDagerRegistrert': 'Ingen dager registrert.',\n        'dagerMedTid.normaltTimer': 'Normalt {timer}',\n        'dagerMedTid.uke': 'Uke {uke}',\n    },\n};\n","import React from 'react';\nimport { IntlProvider } from 'react-intl';\n\nimport '@formatjs/intl-numberformat/polyfill-force';\nimport '@formatjs/intl-numberformat/locale-data/nb';\nimport '@formatjs/intl-datetimeformat/polyfill-force';\nimport '@formatjs/intl-datetimeformat/add-all-tz';\nimport '@formatjs/intl-datetimeformat/locale-data/nb';\n\nimport { MessageFileFormat } from '@navikt/sif-common-core/lib/dev-utils/intl/devIntlUtils';\nimport { sifCommonPleiepengerMessages } from '../../sif-common-pleiepenger/i18n';\nimport { arbeidstidPeriodeMessages } from '../../sif-common-pleiepenger/arbeidstid/arbeidstid-periode-dialog/i18n/arbeidstidPeriodeMessages';\nimport { arbeidstidEnkeltdagMessage } from '../../sif-common-pleiepenger';\nimport tidEnkeltdagFormMessages from '../../sif-common-pleiepenger/tid/tid-enkeltdag-dialog/tidEnkeltdagMessages';\nimport { timerOgMinutterMessages } from '../../sif-common-pleiepenger/common/timer-og-minutter/timerOgMinutterMessages';\n\nexport interface IntlProviderProps {\n    locale: string;\n    onError?: (error: any) => void;\n}\n\nconst allMessages: MessageFileFormat = {\n    nb: {\n        ...sifCommonPleiepengerMessages.nb,\n        ...arbeidstidPeriodeMessages.nb,\n        ...arbeidstidEnkeltdagMessage.nb,\n        ...tidEnkeltdagFormMessages.nb,\n        ...timerOgMinutterMessages.nb,\n    },\n};\n\nconst withIntlProvider = (Story: any) => {\n    return (\n        <IntlProvider locale={'nb'} messages={allMessages.nb}>\n            <Story />\n        </IntlProvider>\n    );\n};\n\nexport default withIntlProvider;\n","var map = {\n\t\"./sif-common-pleiepenger/common/duration-text/DurationText.stories.tsx\": \"./src/sif-common-pleiepenger/common/duration-text/DurationText.stories.tsx\",\n\t\"./storybook/stories/ArbeidstidPeriodeForm.stories.tsx\": \"./src/storybook/stories/ArbeidstidPeriodeForm.stories.tsx\",\n\t\"./storybook/stories/TidEnkeltdagForm.stories.tsx\": \"./src/storybook/stories/TidEnkeltdagForm.stories.tsx\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./src sync recursive ^\\\\.(?:(?:^%7C\\\\/%7C(?:(?:(?%21(?:^%7C\\\\/)\\\\.).)*?)\\\\/)(?%21\\\\.)(?=.)[^/]*?\\\\.stories\\\\.(js%7Cjsx%7Cts%7Ctsx))$\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = \"./src sync recursive ^\\\\.(?:(?:^%7C\\\\/%7C(?:(?:(?%21(?:^%7C\\\\/)\\\\.).)*?)\\\\/)(?%21\\\\.)(?=.)[^/]*?\\\\.stories\\\\.mdx)$\";\nmodule.exports = webpackEmptyContext;"],"names":["___CSS_LOADER_EXPORT___","push","module","id","parameters","actions","argTypesRegex","controls","matchers","color","date","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","apply","_defineProperty","obj","key","value","defineProperty","configurable","writable","config","forEach","logger","JSON","stringify","decorator","addDecorator","loader","addLoader","addParameters","_objectSpread","target","i","arguments","length","source","getOwnPropertyDescriptors","defineProperties","enhancer","addArgTypesEnhancer","addArgsEnhancer","setGlobalRender","v","console","log","require","configure","title","component","DurationText","decorators","withIntlProvider","Template","args","Default","bind","duration","hours","minutes","formik","initialValues","DurationText1","storySource","ArbeidstidPeriodeForm","withDialogWrapperMedium","defaultFormProps","periode","from","ISODateToDate","to","arbeidsstedNavn","intlValues","fra","til","hvor","iPerioden","skalEllerHarJobbet","timer","visAlleSpørsmål","TidEnkeltdagForm","withDialogWrapperSmall","testSøknadsperiode","dato","hvorMyeSpørsmålRenderer","nb","arbeidstidPeriodeMessages","getArbeidstidPeriodeIntl","intl","typedIntlHelper","fullText","hideEmptyValues","type","minutter","useIntl","FormattedNumber","durationToDecimalDuration","ensureDuration","maximumFractionDigits","style","whiteSpace","intlHelper","marginLeft","sortDays","d1","d2","dayjs","isSameOrBefore","bem","bemUtils","DagerMedTidListe","dagerMedTid","viseUke","visMåned","visNormaltid","weeksWithDays","groupBy","dag","getFullYear","isoWeek","className","block","Undertittel","format","element","map","days","Element","tag","values","uke","sort","idx","tid","normaltid","ArbeidstidEnkeltdagerListe","dager","arbeidsdager","ISODurationToDuration","arbeidstimer","faktiskTimer","normalTimer","undefined","ingenDagerRegistrertMelding","months","getMonth","margin","tittel","textTransform","fontSize","getDagerMedInterval","interval","ukedag","isoWeekday","getDatesInDateRange","_","index","nthItemFilter","getDagerMedNyTid","endringsperiode","varighet","gjentagelse","datoerMedTid","datoerSomSkalEndres","getGjentagendeDager","gjentagendeDatoer","tom","gjentagelsetype","GjentagelseType","hverUke","hverAndreUke","heleUken","getWeekDateRange","getMonthDateRange","isDateWeekDay","dateToISODate","isoDate","getGjentagelseEnkeltdagFraFormValues","skalGjentas","stopDato","datepickerUtils","getDateRangeWithinDateRange","range","limitRange","toDate","trimDateRangeToWeekdays","getFirstWeekdayOnOrAfterDate","getLastWeekdayOnOrBeforeDate","getTidEnkeltdagFormTidValidator","maksTid","minTid","time","error","getTimeValidator","required","max","min","keepKeyUnaltered","maksTimer","maksMinutter","minTimer","minMinutter","minMax","FormFields","FormComponents","getTypedFormComponents","tidOpprinnelig","onSubmit","onCancel","erEndret","durationsAreEqual","dagNavn","dagerNavn","valgtDatoTxt","dateFormatter","ukePeriode","ukeErHel","månedPeriode","månedErHel","isBefore","isAfter","ukePeriodeStartTxt","ukePeriodeSluttTxt","månedPeriodeStartTxt","månedPeriodeSluttTxt","ukeNavn","månedNavn","sluttDatoTxt","skalViseValgetGjelderFlereDager","getNumberOfDaysInDateRange","renderGjentagelseRadioLabel","FormikWrapper","enableReinitialize","onValidSubmit","renderForm","stoppGjentagelse","Form","formErrorHandler","getIntlFormErrorHandler","includeValidationSummary","includeButtons","submitButtonLabel","cancelButtonLabel","TimeInput","name","label","validate","timeInputLayout","justifyContent","compact","direction","Checkbox","RadioGroup","legend","getRequiredFieldValidator","radios","heleMåneden","TidEnkeltdagDialog","isOpen","dialogTitle","formProps","contentLabel","onRequestClose","shouldCloseOnOverlayClick","ArbeidstidEnkeltdagDialog","arbeidsforholdType","erHistorisk","dateToday","navn","når","formatTime","ArbeidstidFasteDagerListe","fasteDager","ukedager","day","marginTop","durationFaktiskTimer","durationNormalTimer","marginBottom","CalendarGridDate","dateRendererShort","dateRendererFull","content","classNames","utc","getWeeks","dates","month","datesToRender","getFullWeeksForDates","dayOfWeek","getUTCDay","firstDateInWeek","startOf","isSame","subtract","weeksAndDays","weeks","weekDates","some","d","weekNumber","CalendarGrid","disabledDates","disabledDateInfo","renderAsList","hideEmptyContentInListMode","hideWeeksWithOnlyDisabledContent","onDateClick","dateContentRenderer","allDaysInWeekDisabledContentRenderer","weekdatesInMonth","getDatesInMonth","renderDate","dateKey","toDateString","dateIsDisabled","isDateInDates","renderAsButton","ButtonOrDivComponent","onClick","evt","stopPropagation","preventDefault","child","modifierConditional","modifier","renderWeek","week","datesInWeek","weekNum","areAllDaysInWeekDisabledOrOutsideMonth","role","LabelInputInfoLayout","narrowBreakpoint","input","info","isNarrow","useMediaQuery","query","formatTimerOgMinutter","TimerOgMinutter","numTimer","parseInt","numMinutter","tidUkerdagerInputMessages","Mandager","Tirsdager","Onsdager","Torsdager","Fredager","mandag","tirsdag","onsdag","torsdag","fredag","getTidFasteUkerdagerInputMessages","locale","nn","ArbeidstidFasteUkedagerInput","fieldName","tidPerDagValidator","utilgjengeligeUkedager","skjulUtilgjengeligeUkedager","tekst","testId","txt","renderWeekdayTimeInput","weekday","weekdayLabel","erUtilgjengeligUkedag","FormikInputGroup","FormikTimeInput","ariaLabelTidInput","toLowerCase","Weekday","ArbeidstidEnkeltdagTekst","prosent","skjulIngenTid","desimaltid","ArbeidstidMånedTittel","headingLevel","måned","antallDagerMedTid","ukeOgÅr","Normaltekst","ArbeidstidMåned","tidArbeidstid","utilgjengeligeDatoer","månedTittelHeadingLevel","åpentEkspanderbartPanel","arbeiderNormaltTimerFasteUkedager","skjulIngenTidEnkeltdag","månedTittelRenderer","onEnkeltdagChange","useState","editDate","setEditDate","getDurationsInDateRange","getDatesWithDurationLongerThanZero","getWeekdayFromDate","renderContentWhenClosed","apen","skjulTommeDagerIListe","visOpprinneligTid","tidRenderer","handleKalenderDatoClick","dateToISOString","getNumberDurationForWeekday","removeDatesFromDateDurationMap","setTimeout","TidEnkeltdager","TidFasteDager","TidFasteUkedagerInput","validateDag","disabledDays","hideDisabledDays","validationDayName","disabled","isWeekdayDisabled","hasHiddenDays","getWeekdayFromISOWeekday","getDagInfo","dayjsDato","ukenummer","år","year","årOgUke","labelDag","labelDato","labelFull","tidUkerInputUtils","getDagInfoForPeriode","add","getForegåendeDagerIUke","getEmptyElements","num","Array","React","firstDayOfWeek","c","getUkerFraDager","ukerOgDager","dagerIUke","renderDagLabel","customRenderer","TidUkeInput","ukeinfo","visSomListe","getFieldName","dagLabelRenderer","ukeTittelRenderer","isWide","erUtilgjengelig","TidUkerInput","brukPanel","opprinneligTid","maxWidth","minWidth","uker","getTidKalenderFieldName","FormField","weekOfYear","TidKalenderForm","intro","mapDatoTidToFormDatoTid","data","onFormikSubmit","getValidDurations","getFormErrorHandler","formFooter","align","htmlType","Systemtittel","TidsbrukKalenderDag","opprinneligTidRenderer","footerRenderer","renderTid","Undertekst","renderOpprinneligTid","TidsbrukKalender","dagerOpprinnelig","utilgjengeligDagInfo","tomUkeContentRenderer","kalenderdager","percentage","visibleText","ariaText","ArbeidsforholdType","ArbeiderIPeriodenSvar","initialFormValues","arbIntl","disabledDaysOfWeekDayNumber","getWeekdayDOW","intlText","introduksjon","fom","Error","arbeiderHvordan","somVanlig","redusert","tidFasteDager","ensureCompleteDurationWeekdays","heleSøknadsperioden","setFieldValue","okButton","cancelButton","DateIntervalPicker","fromDatepickerProps","disableWeekend","fullScreenOnMobile","fullscreenOverlay","disabledDaysOfWeek","dayPickerProps","initialMonth","minDate","maxDate","getDateRangeValidator","onlyWeekdays","fromDate","validateFromDate","toDatepickerProps","validateToDate","afterOnChange","handleHeleSøknadsperiodenChange","velgHeleSøknadsperioden","RadioPanelGroup","InputGroup","validateFasteArbeidstimerIUke","summarizeDurationInDurationWeekdays","getArbeidstimerFastDagValidator","ArbeidstidPeriodeDialog","Modal","renderFraværInfo","fravær","arbeidstid","heltFravær","ArbeidstidUkeInput","normalarbeidstidUkedager","visUkeTittel","getDagValue","enkeltdagValidator","beregnFravær","timerPåDag","reduce","n","getUkeTittel","erUtilgjengeligDato","isDateInWeekdays","dayDateString","inputDatoLabel","normalarbeidstid","decimalDurationToDuration","ArbeidstidUkerInput","tekster","useExpandablePanel","renderUke","dur","OmsorgstilbudEnkeltdagDialog","OmsorgstilbudPeriodeForm","getOmsorgstilbudPeriodeIntl","validateOmsorgstilbudFasteDager","getOmsorgstilbudFastDagValidator","ValidateDateError","ValidateDateRangeError","OmsorgstilbudPeriodeDialog","OmsorgstilbudMåned","tidOmsorgstilbud","dagerMedRegistrertOmsorgstilbud","datoTid","durationIsZero","omsorgstibudPeriodeMessages","options","Story","DialogWrapper","width","withDialogWrapperWide","children","border","borderRadius","padding","boxShadow","timerOgMinutterMessages","timerOgMinutter","sifCommonPleiepengerMessages","omsorgstilbudEnkeltdagFormMessages","tidEnkeltdagFormMessages","arbeidstidEnkeltdagFormMessages","arbeidstidMånedMessages","allMessages","arbeidstidEnkeltdagMessage","messages","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","code","webpackContextKeys","resolve","exports","webpackEmptyContext"],"sourceRoot":""}