{"version":3,"file":"main.531bffcd.iframe.bundle.js","mappings":"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","sources":["webpack://@navikt/sif-common-pleiepenger/./src/storybook/styles/navFrontendOverride.css","webpack://@navikt/sif-common-pleiepenger/./.storybook/preview.js","webpack://@navikt/sif-common-pleiepenger/./.storybook/preview.js-generated-config-entry.js","webpack://@navikt/sif-common-pleiepenger/./generated-stories-entry.js","webpack://@navikt/sif-common-pleiepenger/./src/storybook/stories/delskjema/ArbeidstidKalender.stories.tsx","webpack://@navikt/sif-common-pleiepenger/./src/storybook/stories/delskjema/TidFasteUkedagerInput.stories.tsx","webpack://@navikt/sif-common-pleiepenger/./src/storybook/stories/enkeltkomponenter/DurationText.stories.tsx","webpack://@navikt/sif-common-pleiepenger/./src/storybook/stories/oppsummering/ArbeidstidEnkeltdagerOppsummering.stories.tsx","webpack://@navikt/sif-common-pleiepenger/./src/storybook/stories/oppsummering/ArbeidstidFasteDagerOppsummering.stories.tsx","webpack://@navikt/sif-common-pleiepenger/./src/storybook/stories/skjema/ArbeidstidPeriodeForm.stories.tsx","webpack://@navikt/sif-common-pleiepenger/./src/storybook/stories/skjema/TidEnkeltdagForm.stories.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-enkeltdag-dialog/arbeidstidEnkeltdagMessages.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-periode-dialog/i18n/arbeidstidPeriodeMessages.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/common/duration-text/DurationText.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/common/dager-med-tid-liste/DagerMedTidListe.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-enkeltdager-oppsummering-liste/ArbeidstidEnkeltdagerOppsummeringListe.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tid-enkeltdag-dialog/utils/tidEnkeltdagUtils.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tid-enkeltdag-dialog/utils/tidEnkeltdagValidation.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tid-enkeltdag-dialog/TidEnkeltdagForm.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tid-enkeltdag-dialog/TidEnkeltdagDialog.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-enkeltdag-dialog/ArbeidstidEnkeltdagDialog.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-faste-dager-liste/ArbeidstidFasteDagerListe.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/common/calendar-grid/CalendarGridDate.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/common/calendar-grid/CalendarGrid.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/common/label-input-info-layout/LabelInputInfoLayout.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/common/timer-og-minutter/TimerOgMinutter.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tid-faste-ukedager-input/tidFasteUkerdagerInputMessages.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-faste-ukedager-input/ArbeidstidFasteUkedagerInput.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-kalender/components/arbeidstid-enkeltdag-tekst/ArbeidstidEnkeltdagTekst.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-kalender/components/arbeidstid-måned-tittel/ArbeidstidMånedTittel.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-kalender/ArbeidstidKalender.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/dager-med-tid/TidEnkeltdager.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/dager-med-tid/TidFasteDager.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tid-faste-ukedager-input/TidFasteUkedagerInput.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tid-uker-input/tidUkerUtils.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tid-uke-input/TidUkeInput.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tid-uker-input/TidUkerInput.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tid-kalender-form/TidKalenderForm.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tidsbruk-kalender/TidsbrukKalenderDag.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tidsbruk-kalender/TidsbrukKalender.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/types/index.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-periode-dialog/components/arbeidstid-periode-form/arbeidstidPeriodeFormValidation.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-periode-dialog/components/arbeidstid-periode-form/ArbeidstidPeriodeForm.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-periode-dialog/components/arbeidstid-periode-dialog/ArbeidstidPeriodeDialog.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-uke-input/ArbeidstidUkeInput.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-uker-input/ArbeidstidUkerInput.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/omsorgstilbud/omsorgstilbud-enkeltdag/OmsorgstilbudEnkeltdagDialog.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/omsorgstilbud/omsorgstilbud-enkeltdag/omsorgstilbudEnkeltdagFormMessages.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/omsorgstilbud/omsorgstilbud-periode/components/omsorgstilbud-periode-form/OmsorgstilbudPeriodeForm.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/omsorgstilbud/omsorgstilbud-periode/components/omsorgstilbud-periode-form/omsorgstilbudFormValidation.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/omsorgstilbud/omsorgstilbud-periode/components/omsorgstilbud-periode-dialog/OmsorgstilbudPeriodeDialog.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/omsorgstilbud/omsorgstilbud-periode/OmsorgstilbudMåned.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/omsorgstilbud/omsorgstilbud-periode/i18n/omsorgstilbudPeriodeMessages.ts","webpack://@navikt/sif-common-pleiepenger/./src/storybook/styles/navFrontendOverride.css?ee50","webpack://@navikt/sif-common-pleiepenger/./src/storybook/decorators/withDialogWrapper.tsx","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/common/timer-og-minutter/timerOgMinutterMessages.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/arbeidstid/arbeidstid-kalender/i18n/arbeidstidMånedMessages.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/tid/tid-enkeltdag-dialog/i18n/tidEnkeltdagMessages.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/i18n/index.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/common/calendar-grid/calendarGridMessages.ts","webpack://@navikt/sif-common-pleiepenger/./src/sif-common-pleiepenger/common/dager-med-tid-liste/dagerMedTidMessages.ts","webpack://@navikt/sif-common-pleiepenger/./src/storybook/decorators/withIntlProvider.tsx","webpack://@navikt/sif-common-pleiepenger/./src/ sync ^\\.(?7dd6","webpack://@navikt/sif-common-pleiepenger/./src/ sync ^\\.("],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".panel {\\n    background-color: #f1f2f2;\\n    padding: 2rem;\\n}\\n.panel--border {\\n    background-color: transparent;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/storybook/styles/navFrontendOverride.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,yBAAyB;IACzB,aAAa;AACjB;AACA;IACI,6BAA6B;AACjC\",\"sourcesContent\":[\".panel {\\n    background-color: #f1f2f2;\\n    padding: 2rem;\\n}\\n.panel--border {\\n    background-color: transparent;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","export const parameters = {\n  actions: { argTypesRegex: \"^on[A-Z].*\" },\n  controls: {\n    matchers: {\n      color: /(background|color)$/i,\n      date: /Date$/,\n    },\n  },\n}","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable import/no-unresolved */\nimport { addDecorator, addParameters, addLoader, addArgsEnhancer, addArgTypesEnhancer, setGlobalRender } from '/Users/frodehansen/prosjekter/git/sif-common-pleiepenger/node_modules/@storybook/client-api';\nimport { logger } from '/Users/frodehansen/prosjekter/git/sif-common-pleiepenger/node_modules/@storybook/client-logger';\nimport * as config from '/Users/frodehansen/prosjekter/git/sif-common-pleiepenger/.storybook/preview.js';\nObject.keys(config).forEach(function (key) {\n  var value = config[key];\n\n  switch (key) {\n    case 'args':\n    case 'argTypes':\n      {\n        return logger.warn('Invalid args/argTypes in config, ignoring.', JSON.stringify(value));\n      }\n\n    case 'decorators':\n      {\n        return value.forEach(function (decorator) {\n          return addDecorator(decorator, false);\n        });\n      }\n\n    case 'loaders':\n      {\n        return value.forEach(function (loader) {\n          return addLoader(loader, false);\n        });\n      }\n\n    case 'parameters':\n      {\n        return addParameters(_objectSpread({}, value), false);\n      }\n\n    case 'argTypesEnhancers':\n      {\n        return value.forEach(function (enhancer) {\n          return addArgTypesEnhancer(enhancer);\n        });\n      }\n\n    case 'argsEnhancers':\n      {\n        return value.forEach(function (enhancer) {\n          return addArgsEnhancer(enhancer);\n        });\n      }\n\n    case 'render':\n      {\n        return setGlobalRender(value);\n      }\n\n    case 'globals':\n    case 'globalTypes':\n      {\n        var v = {};\n        v[key] = value;\n        return addParameters(v, false);\n      }\n\n    case '__namedExportsOrder':\n    case 'decorateStory':\n    case 'renderToDOM':\n      {\n        return null; // This key is not handled directly in v6 mode.\n      }\n\n    default:\n      {\n        // eslint-disable-next-line prefer-template\n        return console.log(key + ' was not supported :( !');\n      }\n  }\n});","\"use strict\";\n\nvar _frameworkImportPath = require(\"@storybook/react\");\n\n/* eslint-disable import/no-unresolved */\n(0, _frameworkImportPath.configure)([require.context('./src', true, /^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stories\\.mdx)$/),require.context('./src', true, /^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stories\\.(js|jsx|ts|tsx))$/)], module, false);","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\\nimport { DateDurationMap, ISODateRangeToDateRange, ISODateToDate } from '@navikt/sif-common-utils/lib';\\nimport { ComponentMeta, ComponentStory } from '@storybook/react';\\nimport React from 'react';\\nimport { ArbeidsforholdType, ArbeidstidKalender } from '../../../sif-common-pleiepenger';\\nimport withIntlProvider from '../../decorators/withIntlProvider';\\n\\nexport default {\\n    title: 'Skjema/ArbeidstidKalender',\\n    component: ArbeidstidKalender,\\n    decorators: [withIntlProvider],\\n} as ComponentMeta<typeof ArbeidstidKalender>;\\n\\nenum Fields {\\n    'tid' = 'tid',\\n}\\ninterface FormValues {\\n    tid: DateDurationMap;\\n}\\nconst { FormikWrapper, Form } = getTypedFormComponents<Fields, FormValues>();\\n\\nconst renderStoryWrapper = (Story: any, intialValues: FormValues) => (\\n    <FormikWrapper\\n        initialValues={intialValues}\\n        onSubmit={(values) => console.log(values)}\\n        renderForm={() => (\\n            <Form includeButtons={true}>\\n                <Story />\\n            </Form>\\n        )}\\n    />\\n);\\n\\nconst Template: ComponentStory<typeof ArbeidstidKalender> = (args) => <ArbeidstidKalender {...args} />;\\n\\nexport const Default = Template.bind({});\\nDefault.args = {\\n    arbeidsforholdType: ArbeidsforholdType.ANSATT,\\n    arbeidsstedNavn: 'Snurres spretterier',\\n    måned: ISODateRangeToDateRange('2022-01-01/2022-01-31'),\\n    periode: ISODateRangeToDateRange('2022-01-15/2022-01-19'),\\n    tidArbeidstid: {},\\n    utilgjengeligeDatoer: [ISODateToDate('2022-01-05')],\\n    åpentEkspanderbartPanel: false,\\n    arbeiderNormaltTimerFasteUkedager: {\\n        friday: {\\n            hours: '7',\\n            minutes: '30',\\n        },\\n    },\\n};\\nDefault.decorators = [(Story) => renderStoryWrapper(Story, { tid: {} })];\\nDefault.parameters = {\\n    formik: {\\n        initialValues: {},\\n    },\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":60,\"line\":34},\"endLoc\":{\"col\":102,\"line\":34},\"startBody\":{\"col\":60,\"line\":34},\"endBody\":{\"col\":102,\"line\":34}}};\n    \nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { DateDurationMap, ISODateRangeToDateRange, ISODateToDate } from '@navikt/sif-common-utils/lib';\nimport { ComponentMeta, ComponentStory } from '@storybook/react';\nimport React from 'react';\nimport { ArbeidsforholdType, ArbeidstidKalender } from '../../../sif-common-pleiepenger';\nimport withIntlProvider from '../../decorators/withIntlProvider';\n\nexport default {\n    title: 'Skjema/ArbeidstidKalender',\n    component: ArbeidstidKalender,\n    decorators: [withIntlProvider],\n} as ComponentMeta<typeof ArbeidstidKalender>;\n\nenum Fields {\n    'tid' = 'tid',\n}\ninterface FormValues {\n    tid: DateDurationMap;\n}\nconst { FormikWrapper, Form } = getTypedFormComponents<Fields, FormValues>();\n\nconst renderStoryWrapper = (Story: any, intialValues: FormValues) => (\n    <FormikWrapper\n        initialValues={intialValues}\n        onSubmit={(values) => console.log(values)}\n        renderForm={() => (\n            <Form includeButtons={true}>\n                <Story />\n            </Form>\n        )}\n    />\n);\n\nconst Template: ComponentStory<typeof ArbeidstidKalender> = (args) => <ArbeidstidKalender {...args} />;\n\nexport const Default = Template.bind({});\nDefault.args = {\n    arbeidsforholdType: ArbeidsforholdType.ANSATT,\n    arbeidsstedNavn: 'Snurres spretterier',\n    måned: ISODateRangeToDateRange('2022-01-01/2022-01-31'),\n    periode: ISODateRangeToDateRange('2022-01-15/2022-01-19'),\n    tidArbeidstid: {},\n    utilgjengeligeDatoer: [ISODateToDate('2022-01-05')],\n    åpentEkspanderbartPanel: false,\n    arbeiderNormaltTimerFasteUkedager: {\n        friday: {\n            hours: '7',\n            minutes: '30',\n        },\n    },\n};\nDefault.decorators = [(Story) => renderStoryWrapper(Story, { tid: {} })];\nDefault.parameters = {\n    formik: {\n        initialValues: {},\n    },\n};\n\n\n\nDefault.parameters = { storySource: { source: \"(args) => <ArbeidstidKalender {...args} />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\\nimport { DateDurationMap, Weekday } from '@navikt/sif-common-utils/lib';\\nimport { ComponentMeta, ComponentStory } from '@storybook/react';\\nimport React from 'react';\\nimport { TidFasteUkedagerInput } from '../../../sif-common-pleiepenger';\\nimport { TidFasteUkedagerInputProps } from '../../../sif-common-pleiepenger/tid/tid-faste-ukedager-input/TidFasteUkedagerInput';\\n\\nimport withIntlProvider from '../../decorators/withIntlProvider';\\n\\nexport default {\\n    title: 'Delskjema/TidFasteUkedagerInput',\\n    component: TidFasteUkedagerInput,\\n    decorators: [withIntlProvider],\\n} as ComponentMeta<typeof TidFasteUkedagerInput>;\\n\\nconst Template: ComponentStory<typeof TidFasteUkedagerInput> = (args) => <TidFasteUkedagerInput {...args} />;\\n\\nconst defaultFormProps: TidFasteUkedagerInputProps = {\\n    name: 'tid',\\n    validateDag: (dag) => `Feil på ${dag}`,\\n};\\n\\nconst defaultInitialValues: DateDurationMap = {\\n    monday: { hours: '1', minutes: '10' },\\n    tuesday: { hours: '2', minutes: '20' },\\n    wednesday: { hours: '3', minutes: '30' },\\n    thursday: { hours: '4', minutes: '40' },\\n    friday: { hours: '5', minutes: '50' },\\n};\\n\\nenum Fields {\\n    'tid' = 'tid',\\n}\\ninterface FormValues {\\n    tid: DateDurationMap;\\n}\\nconst { FormikWrapper, Form } = getTypedFormComponents<Fields, FormValues>();\\n\\nconst renderStoryWrapper = (Story: any, intialValues: FormValues) => (\\n    <FormikWrapper\\n        initialValues={intialValues}\\n        onSubmit={(values) => console.log(values)}\\n        renderForm={() => (\\n            <Form includeButtons={true}>\\n                <Story />\\n            </Form>\\n        )}\\n    />\\n);\\n\\nexport const Default = Template.bind({});\\nDefault.args = {\\n    ...defaultFormProps,\\n};\\nDefault.decorators = [(Story) => renderStoryWrapper(Story, { tid: {} })];\\n\\nexport const WithInitialValues = Template.bind({});\\nWithInitialValues.args = {\\n    ...defaultFormProps,\\n};\\nWithInitialValues.decorators = [(Story) => renderStoryWrapper(Story, { tid: defaultInitialValues })];\\n\\nexport const WidthDisabledDays = Template.bind({});\\nWidthDisabledDays.args = {\\n    ...defaultFormProps,\\n    disabledDays: [Weekday.monday, Weekday.thursday],\\n};\\nWidthDisabledDays.decorators = [(Story) => renderStoryWrapper(Story, { tid: { ...defaultInitialValues } })];\\n\\nexport const HiddenDisabledDays = Template.bind({});\\nHiddenDisabledDays.args = {\\n    ...defaultFormProps,\\n    disabledDays: [Weekday.monday, Weekday.thursday],\\n    hideDisabledDays: true,\\n};\\nHiddenDisabledDays.decorators = [(Story) => renderStoryWrapper(Story, { tid: { ...defaultInitialValues } })];\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":63,\"line\":16},\"endLoc\":{\"col\":108,\"line\":16},\"startBody\":{\"col\":63,\"line\":16},\"endBody\":{\"col\":108,\"line\":16}},\"WithInitialValues\":{\"startLoc\":{\"col\":63,\"line\":16},\"endLoc\":{\"col\":108,\"line\":16},\"startBody\":{\"col\":63,\"line\":16},\"endBody\":{\"col\":108,\"line\":16}},\"WidthDisabledDays\":{\"startLoc\":{\"col\":63,\"line\":16},\"endLoc\":{\"col\":108,\"line\":16},\"startBody\":{\"col\":63,\"line\":16},\"endBody\":{\"col\":108,\"line\":16}},\"HiddenDisabledDays\":{\"startLoc\":{\"col\":63,\"line\":16},\"endLoc\":{\"col\":108,\"line\":16},\"startBody\":{\"col\":63,\"line\":16},\"endBody\":{\"col\":108,\"line\":16}}};\n    \nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { DateDurationMap, Weekday } from '@navikt/sif-common-utils/lib';\nimport { ComponentMeta, ComponentStory } from '@storybook/react';\nimport React from 'react';\nimport { TidFasteUkedagerInput } from '../../../sif-common-pleiepenger';\nimport { TidFasteUkedagerInputProps } from '../../../sif-common-pleiepenger/tid/tid-faste-ukedager-input/TidFasteUkedagerInput';\n\nimport withIntlProvider from '../../decorators/withIntlProvider';\n\nexport default {\n    title: 'Delskjema/TidFasteUkedagerInput',\n    component: TidFasteUkedagerInput,\n    decorators: [withIntlProvider],\n} as ComponentMeta<typeof TidFasteUkedagerInput>;\n\nconst Template: ComponentStory<typeof TidFasteUkedagerInput> = (args) => <TidFasteUkedagerInput {...args} />;\n\nconst defaultFormProps: TidFasteUkedagerInputProps = {\n    name: 'tid',\n    validateDag: (dag) => `Feil på ${dag}`,\n};\n\nconst defaultInitialValues: DateDurationMap = {\n    monday: { hours: '1', minutes: '10' },\n    tuesday: { hours: '2', minutes: '20' },\n    wednesday: { hours: '3', minutes: '30' },\n    thursday: { hours: '4', minutes: '40' },\n    friday: { hours: '5', minutes: '50' },\n};\n\nenum Fields {\n    'tid' = 'tid',\n}\ninterface FormValues {\n    tid: DateDurationMap;\n}\nconst { FormikWrapper, Form } = getTypedFormComponents<Fields, FormValues>();\n\nconst renderStoryWrapper = (Story: any, intialValues: FormValues) => (\n    <FormikWrapper\n        initialValues={intialValues}\n        onSubmit={(values) => console.log(values)}\n        renderForm={() => (\n            <Form includeButtons={true}>\n                <Story />\n            </Form>\n        )}\n    />\n);\n\nexport const Default = Template.bind({});;\nDefault.args = {\n    ...defaultFormProps,\n};\nDefault.decorators = [(Story) => renderStoryWrapper(Story, { tid: {} })];\n\nexport const WithInitialValues = Template.bind({});;\nWithInitialValues.args = {\n    ...defaultFormProps,\n};\nWithInitialValues.decorators = [(Story) => renderStoryWrapper(Story, { tid: defaultInitialValues })];\n\nexport const WidthDisabledDays = Template.bind({});;\nWidthDisabledDays.args = {\n    ...defaultFormProps,\n    disabledDays: [Weekday.monday, Weekday.thursday],\n};\nWidthDisabledDays.decorators = [(Story) => renderStoryWrapper(Story, { tid: { ...defaultInitialValues } })];\n\nexport const HiddenDisabledDays = Template.bind({});\nHiddenDisabledDays.args = {\n    ...defaultFormProps,\n    disabledDays: [Weekday.monday, Weekday.thursday],\n    hideDisabledDays: true,\n};\nHiddenDisabledDays.decorators = [(Story) => renderStoryWrapper(Story, { tid: { ...defaultInitialValues } })];\n\n\n\nDefault.parameters = { storySource: { source: \"(args) => <TidFasteUkedagerInput {...args} />\" }, ...Default.parameters };\nWithInitialValues.parameters = { storySource: { source: \"(args) => <TidFasteUkedagerInput {...args} />\" }, ...WithInitialValues.parameters };\nWidthDisabledDays.parameters = { storySource: { source: \"(args) => <TidFasteUkedagerInput {...args} />\" }, ...WidthDisabledDays.parameters };\nHiddenDisabledDays.parameters = { storySource: { source: \"(args) => <TidFasteUkedagerInput {...args} />\" }, ...HiddenDisabledDays.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { ComponentMeta, ComponentStory } from '@storybook/react';\\nimport React from 'react';\\nimport withIntlProvider from '../../decorators/withIntlProvider';\\nimport DurationText from '../../../sif-common-pleiepenger/common/duration-text/DurationText';\\n\\nexport default {\\n    title: 'Komponenter/DurationText',\\n    component: DurationText,\\n    decorators: [withIntlProvider],\\n} as ComponentMeta<typeof DurationText>;\\n\\nconst Template: ComponentStory<typeof DurationText> = (args) => <DurationText {...args} />;\\n\\nexport const Default = Template.bind({});\\nDefault.args = {\\n    duration: { hours: '2', minutes: '20' },\\n};\\nDefault.parameters = {\\n    formik: {\\n        initialValues: {\\n            DurationText1: true,\\n        },\\n    },\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":54,\"line\":12},\"endLoc\":{\"col\":90,\"line\":12},\"startBody\":{\"col\":54,\"line\":12},\"endBody\":{\"col\":90,\"line\":12}}};\n    \nimport { ComponentMeta, ComponentStory } from '@storybook/react';\nimport React from 'react';\nimport withIntlProvider from '../../decorators/withIntlProvider';\nimport DurationText from '../../../sif-common-pleiepenger/common/duration-text/DurationText';\n\nexport default {\n    title: 'Komponenter/DurationText',\n    component: DurationText,\n    decorators: [withIntlProvider],\n} as ComponentMeta<typeof DurationText>;\n\nconst Template: ComponentStory<typeof DurationText> = (args) => <DurationText {...args} />;\n\nexport const Default = Template.bind({});\nDefault.args = {\n    duration: { hours: '2', minutes: '20' },\n};\nDefault.parameters = {\n    formik: {\n        initialValues: {\n            DurationText1: true,\n        },\n    },\n};\n\n\n\nDefault.parameters = { storySource: { source: \"(args) => <DurationText {...args} />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { ComponentMeta, ComponentStory } from '@storybook/react';\\nimport React from 'react';\\nimport { ArbeidstidEnkeltdagerOppsummering } from '../../../sif-common-pleiepenger';\\nimport withIntlProvider from '../../decorators/withIntlProvider';\\n\\nexport default {\\n    title: 'Oppsummering/ArbeidstidEnkeltdagerOppsummering',\\n    component: ArbeidstidEnkeltdagerOppsummering,\\n    decorators: [withIntlProvider],\\n} as ComponentMeta<typeof ArbeidstidEnkeltdagerOppsummering>;\\n\\nconst Template: ComponentStory<typeof ArbeidstidEnkeltdagerOppsummering> = (args) => (\\n    <ArbeidstidEnkeltdagerOppsummering {...args} />\\n);\\n\\nexport const Default = Template.bind({});\\nDefault.args = {\\n    dager: [\\n        { arbeidstimer: { normalTimer: 'PT7H30M', faktiskTimer: 'PT3H30M' }, dato: '2022-01-03' },\\n        { arbeidstimer: { normalTimer: 'PT7H30M', faktiskTimer: 'PT4H30M' }, dato: '2022-02-01' },\\n    ],\\n    visNormaltid: false,\\n};\\n\\nexport const IngenDagerRegistrert = Template.bind({});\\nIngenDagerRegistrert.args = {\\n    dager: [],\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":75,\"line\":12},\"endLoc\":{\"col\":1,\"line\":14},\"startBody\":{\"col\":75,\"line\":12},\"endBody\":{\"col\":1,\"line\":14}},\"IngenDagerRegistrert\":{\"startLoc\":{\"col\":75,\"line\":12},\"endLoc\":{\"col\":1,\"line\":14},\"startBody\":{\"col\":75,\"line\":12},\"endBody\":{\"col\":1,\"line\":14}}};\n    \nimport { ComponentMeta, ComponentStory } from '@storybook/react';\nimport React from 'react';\nimport { ArbeidstidEnkeltdagerOppsummering } from '../../../sif-common-pleiepenger';\nimport withIntlProvider from '../../decorators/withIntlProvider';\n\nexport default {\n    title: 'Oppsummering/ArbeidstidEnkeltdagerOppsummering',\n    component: ArbeidstidEnkeltdagerOppsummering,\n    decorators: [withIntlProvider],\n} as ComponentMeta<typeof ArbeidstidEnkeltdagerOppsummering>;\n\nconst Template: ComponentStory<typeof ArbeidstidEnkeltdagerOppsummering> = (args) => (\n    <ArbeidstidEnkeltdagerOppsummering {...args} />\n);\n\nexport const Default = Template.bind({});;\nDefault.args = {\n    dager: [\n        { arbeidstimer: { normalTimer: 'PT7H30M', faktiskTimer: 'PT3H30M' }, dato: '2022-01-03' },\n        { arbeidstimer: { normalTimer: 'PT7H30M', faktiskTimer: 'PT4H30M' }, dato: '2022-02-01' },\n    ],\n    visNormaltid: false,\n};\n\nexport const IngenDagerRegistrert = Template.bind({});\nIngenDagerRegistrert.args = {\n    dager: [],\n};\n\n\n\nDefault.parameters = { storySource: { source: \"(args) => (\\n    <ArbeidstidEnkeltdagerOppsummering {...args} />\\n)\" }, ...Default.parameters };\nIngenDagerRegistrert.parameters = { storySource: { source: \"(args) => (\\n    <ArbeidstidEnkeltdagerOppsummering {...args} />\\n)\" }, ...IngenDagerRegistrert.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { ComponentMeta, ComponentStory } from '@storybook/react';\\nimport React from 'react';\\nimport { ArbeidstidFasteDagerOppsummering, ArbeidstimerFasteDagerApiData } from '../../../sif-common-pleiepenger';\\nimport withIntlProvider from '../../decorators/withIntlProvider';\\n\\nexport default {\\n    title: 'Oppsummering/ArbeidstidFasteDagerOppsummering',\\n    component: ArbeidstidFasteDagerOppsummering,\\n    decorators: [withIntlProvider],\\n} as ComponentMeta<typeof ArbeidstidFasteDagerOppsummering>;\\n\\nconst Template: ComponentStory<typeof ArbeidstidFasteDagerOppsummering> = (args) => (\\n    <ArbeidstidFasteDagerOppsummering {...args} />\\n);\\n\\nconst fasteDager: ArbeidstimerFasteDagerApiData = {\\n    mandag: { faktiskTimer: 'PT1H0M', normalTimer: 'PT7H30M' },\\n    tirsdag: { faktiskTimer: 'PT2H0M', normalTimer: 'PT7H30M' },\\n    onsdag: { faktiskTimer: 'PT3H0M', normalTimer: 'PT7H30M' },\\n    torsdag: { faktiskTimer: 'PT4H0M', normalTimer: 'PT7H30M' },\\n    fredag: { faktiskTimer: 'PT5H0M', normalTimer: 'PT7H30M' },\\n};\\n\\nexport const Default = Template.bind({});\\nDefault.args = {\\n    fasteDager,\\n    visNormaltid: false,\\n};\\n\\nexport const IngenDagerRegistrert = Template.bind({});\\nIngenDagerRegistrert.args = {};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":74,\"line\":12},\"endLoc\":{\"col\":1,\"line\":14},\"startBody\":{\"col\":74,\"line\":12},\"endBody\":{\"col\":1,\"line\":14}},\"IngenDagerRegistrert\":{\"startLoc\":{\"col\":74,\"line\":12},\"endLoc\":{\"col\":1,\"line\":14},\"startBody\":{\"col\":74,\"line\":12},\"endBody\":{\"col\":1,\"line\":14}}};\n    \nimport { ComponentMeta, ComponentStory } from '@storybook/react';\nimport React from 'react';\nimport { ArbeidstidFasteDagerOppsummering, ArbeidstimerFasteDagerApiData } from '../../../sif-common-pleiepenger';\nimport withIntlProvider from '../../decorators/withIntlProvider';\n\nexport default {\n    title: 'Oppsummering/ArbeidstidFasteDagerOppsummering',\n    component: ArbeidstidFasteDagerOppsummering,\n    decorators: [withIntlProvider],\n} as ComponentMeta<typeof ArbeidstidFasteDagerOppsummering>;\n\nconst Template: ComponentStory<typeof ArbeidstidFasteDagerOppsummering> = (args) => (\n    <ArbeidstidFasteDagerOppsummering {...args} />\n);\n\nconst fasteDager: ArbeidstimerFasteDagerApiData = {\n    mandag: { faktiskTimer: 'PT1H0M', normalTimer: 'PT7H30M' },\n    tirsdag: { faktiskTimer: 'PT2H0M', normalTimer: 'PT7H30M' },\n    onsdag: { faktiskTimer: 'PT3H0M', normalTimer: 'PT7H30M' },\n    torsdag: { faktiskTimer: 'PT4H0M', normalTimer: 'PT7H30M' },\n    fredag: { faktiskTimer: 'PT5H0M', normalTimer: 'PT7H30M' },\n};\n\nexport const Default = Template.bind({});;\nDefault.args = {\n    fasteDager,\n    visNormaltid: false,\n};\n\nexport const IngenDagerRegistrert = Template.bind({});\nIngenDagerRegistrert.args = {};\n\n\n\nDefault.parameters = { storySource: { source: \"(args) => (\\n    <ArbeidstidFasteDagerOppsummering {...args} />\\n)\" }, ...Default.parameters };\nIngenDagerRegistrert.parameters = { storySource: { source: \"(args) => (\\n    <ArbeidstidFasteDagerOppsummering {...args} />\\n)\" }, ...IngenDagerRegistrert.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { ComponentMeta, ComponentStory } from '@storybook/react';\\nimport React from 'react';\\nimport { DateRange, ISODateToDate } from '@navikt/sif-common-utils/lib';\\nimport { ArbeidstidPeriodeForm, ArbeidstidPeriodeFormProps } from '../../../sif-common-pleiepenger';\\nimport withIntlProvider from '../../decorators/withIntlProvider';\\nimport { withDialogWrapperMedium } from '../../decorators/withDialogWrapper';\\n\\nexport default {\\n    title: 'Skjema/ArbeidstidPeriodeForm',\\n    component: ArbeidstidPeriodeForm,\\n    decorators: [withIntlProvider, withDialogWrapperMedium],\\n} as ComponentMeta<typeof ArbeidstidPeriodeForm>;\\n\\nconst Template: ComponentStory<typeof ArbeidstidPeriodeForm> = (args) => <ArbeidstidPeriodeForm {...args} />;\\n\\nconst testSøknadsperiode: DateRange = {\\n    from: ISODateToDate('2022-01-01'),\\n    to: ISODateToDate('2022-04-01'),\\n};\\n\\nconst defaultFormProps: Partial<ArbeidstidPeriodeFormProps> = {\\n    periode: testSøknadsperiode,\\n    arbeidsstedNavn: 'NAV',\\n    intlValues: {\\n        fra: 'fra-tekst',\\n        til: 'til-tekst',\\n        hvor: 'hos NAV',\\n        iPerioden: 'i perioden',\\n        skalEllerHarJobbet: 'jobber',\\n        timer: 'timer',\\n    },\\n    visAlleSpørsmål: false,\\n};\\nexport const Default = Template.bind({});\\nDefault.args = {\\n    ...defaultFormProps,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":63,\"line\":14},\"endLoc\":{\"col\":108,\"line\":14},\"startBody\":{\"col\":63,\"line\":14},\"endBody\":{\"col\":108,\"line\":14}}};\n    \nimport { ComponentMeta, ComponentStory } from '@storybook/react';\nimport React from 'react';\nimport { DateRange, ISODateToDate } from '@navikt/sif-common-utils/lib';\nimport { ArbeidstidPeriodeForm, ArbeidstidPeriodeFormProps } from '../../../sif-common-pleiepenger';\nimport withIntlProvider from '../../decorators/withIntlProvider';\nimport { withDialogWrapperMedium } from '../../decorators/withDialogWrapper';\n\nexport default {\n    title: 'Skjema/ArbeidstidPeriodeForm',\n    component: ArbeidstidPeriodeForm,\n    decorators: [withIntlProvider, withDialogWrapperMedium],\n} as ComponentMeta<typeof ArbeidstidPeriodeForm>;\n\nconst Template: ComponentStory<typeof ArbeidstidPeriodeForm> = (args) => <ArbeidstidPeriodeForm {...args} />;\n\nconst testSøknadsperiode: DateRange = {\n    from: ISODateToDate('2022-01-01'),\n    to: ISODateToDate('2022-04-01'),\n};\n\nconst defaultFormProps: Partial<ArbeidstidPeriodeFormProps> = {\n    periode: testSøknadsperiode,\n    arbeidsstedNavn: 'NAV',\n    intlValues: {\n        fra: 'fra-tekst',\n        til: 'til-tekst',\n        hvor: 'hos NAV',\n        iPerioden: 'i perioden',\n        skalEllerHarJobbet: 'jobber',\n        timer: 'timer',\n    },\n    visAlleSpørsmål: false,\n};\nexport const Default = Template.bind({});\nDefault.args = {\n    ...defaultFormProps,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"(args) => <ArbeidstidPeriodeForm {...args} />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { ComponentMeta, ComponentStory } from '@storybook/react';\\nimport React from 'react';\\nimport { DateRange, ISODateToDate } from '@navikt/sif-common-utils/lib';\\nimport { TidEnkeltdagForm } from '../../../sif-common-pleiepenger';\\nimport { TidEnkeltdagFormProps } from '../../../sif-common-pleiepenger/tid/tid-enkeltdag-dialog/TidEnkeltdagForm';\\nimport { withDialogWrapperSmall } from '../../decorators/withDialogWrapper';\\nimport withIntlProvider from '../../decorators/withIntlProvider';\\n\\nexport default {\\n    title: 'Skjema/TidEnkeltdagForm',\\n    component: TidEnkeltdagForm,\\n    decorators: [withIntlProvider, withDialogWrapperSmall],\\n} as ComponentMeta<typeof TidEnkeltdagForm>;\\n\\nconst Template: ComponentStory<typeof TidEnkeltdagForm> = (args) => <TidEnkeltdagForm {...args} />;\\n\\nconst testSøknadsperiode: DateRange = {\\n    from: ISODateToDate('2022-01-03'),\\n    to: ISODateToDate('2022-04-01'),\\n};\\n\\nconst defaultFormProps: Partial<TidEnkeltdagFormProps> = {\\n    periode: testSøknadsperiode,\\n    dato: testSøknadsperiode.from,\\n    hvorMyeSpørsmålRenderer: () => 'Hvor mye jobbet du hos Karis Gullfisker mandag 3. januar 2020?',\\n    // onSubmit: () => null, Tas ikke med pga actions-addon outputer submit-data i storybook ved commit\\n};\\n\\nexport const Default = Template.bind({});\\nDefault.args = {\\n    ...defaultFormProps,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":58,\"line\":15},\"endLoc\":{\"col\":98,\"line\":15},\"startBody\":{\"col\":58,\"line\":15},\"endBody\":{\"col\":98,\"line\":15}}};\n    \nimport { ComponentMeta, ComponentStory } from '@storybook/react';\nimport React from 'react';\nimport { DateRange, ISODateToDate } from '@navikt/sif-common-utils/lib';\nimport { TidEnkeltdagForm } from '../../../sif-common-pleiepenger';\nimport { TidEnkeltdagFormProps } from '../../../sif-common-pleiepenger/tid/tid-enkeltdag-dialog/TidEnkeltdagForm';\nimport { withDialogWrapperSmall } from '../../decorators/withDialogWrapper';\nimport withIntlProvider from '../../decorators/withIntlProvider';\n\nexport default {\n    title: 'Skjema/TidEnkeltdagForm',\n    component: TidEnkeltdagForm,\n    decorators: [withIntlProvider, withDialogWrapperSmall],\n} as ComponentMeta<typeof TidEnkeltdagForm>;\n\nconst Template: ComponentStory<typeof TidEnkeltdagForm> = (args) => <TidEnkeltdagForm {...args} />;\n\nconst testSøknadsperiode: DateRange = {\n    from: ISODateToDate('2022-01-03'),\n    to: ISODateToDate('2022-04-01'),\n};\n\nconst defaultFormProps: Partial<TidEnkeltdagFormProps> = {\n    periode: testSøknadsperiode,\n    dato: testSøknadsperiode.from,\n    hvorMyeSpørsmålRenderer: () => 'Hvor mye jobbet du hos Karis Gullfisker mandag 3. januar 2020?',\n    // onSubmit: () => null, Tas ikke med pga actions-addon outputer submit-data i storybook ved commit\n};\n\nexport const Default = Template.bind({});\nDefault.args = {\n    ...defaultFormProps,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"(args) => <TidEnkeltdagForm {...args} />\" }, ...Default.parameters };","const arbeidstidEnkeltdagFormMessages = {\n    nb: {\n        'arbeidstidEnkeltdagDialog.contentTitle': 'Arbeidstid',\n        'arbeidstidEnkeltdagForm.tid.spm': 'Hvor mye {skalEllerHarJobbet} {hvor} {når}',\n        'arbeidstidEnkeltdagForm.som.ANSATT': 'hos {navn}',\n        'arbeidstidEnkeltdagForm.som.FRILANSER': 'som frilanser',\n        'arbeidstidEnkeltdagForm.som.SELVSTENDIG': 'som selvstendig næringsdrivende',\n        'arbeidstidEnkeltdagForm.skalJobbe': 'skal du jobbe',\n        'arbeidstidEnkeltdagForm.jobbet': 'jobbet du',\n    },\n};\n\nexport default arbeidstidEnkeltdagFormMessages;\n","import { IntlShape } from 'react-intl';\nimport { typedIntlHelper } from '@navikt/sif-common-core/lib/utils/intlUtils';\n\nconst arbeidstidPeriodeFormFormMessages = {\n    nb: {\n        'arbeidstidPeriodeForm.tittel': `Periode med jobb - {arbeidsstedNavn}`,\n        'arbeidstidPeriodeForm.submitButtonLabel': 'Ok',\n        'arbeidstidPeriodeForm.cancelButtonLabel': 'Avbryt',\n        'arbeidstidPeriodeForm.fraOgMed.label': 'Fra og med',\n        'arbeidstidPeriodeForm.tilOgMed.label': 'Til og med',\n        'arbeidstidPeriodeForm.velgHelePerioden': 'Velg hele søknadsperioden',\n        'arbeidstidPeriodeForm.tidFasteDager.label': `Fyll ut hvor mye du jobber i uken i perioden:`,\n        'arbeidstidPeriodeForm.tidFasteUkedager.label': `Fyll ut hvor mye du jobber de ulike ukedagene i perioden:`,\n        'arbeidstidPeriodeForm.arbeiderIPerioden.spm': 'Hvordan jobber du {hvor} i denne perioden?',\n        'arbeidstidPeriodeForm.arbeiderIPerioden.svar.jobberIkke': 'Jeg er helt borte fra jobb på grunn av pleiepenger',\n        'arbeidstidPeriodeForm.arbeiderIPerioden.svar.jobberRedusert': 'Jeg kombinerer delvis jobb med pleiepenger',\n        'arbeidstidPeriodeForm.arbeiderIPerioden.svar.jobberVanlig':\n            'Jeg jobber som vanlig og har ikke fravær fra jobb på grunn av pleiepenger',\n        'arbeidstidPeriodeForm.validation.fom.dateHasNoValue': 'Du må fylle ut periodens fra-dato.',\n        'arbeidstidPeriodeForm.validation.fom.dateHasInvalidFormat':\n            'Du må oppgi periodens fra-dato i et gyldig datoformat. Gyldig format er dd.mm.åååå.',\n        'arbeidstidPeriodeForm.validation.fom.fromDateIsAfterToDate':\n            'Fra-datoen kan ikke være etter til-datoen. Skriv inn eller velg dato fra kalenderen.',\n        'arbeidstidPeriodeForm.validation.fom.dateIsBeforeMin': 'Fra-datoen kan ikke være før perioden du har søkt om.',\n        'arbeidstidPeriodeForm.validation.tom.dateIsBeforeMin': 'Til-datoen kan ikke være før perioden du har søkt om.',\n        'arbeidstidPeriodeForm.validation.fom.dateIsAfterMax':\n            'Fra-datoen kan ikke være etter perioden du har søkt for.',\n        'arbeidstidPeriodeForm.validation.fom.dateIsNotWeekday':\n            'Fra-dato må være en ukedag, det kan ikke være en lørdag eller søndag. Skriv inn eller velg dato fra kalenderen.',\n        'arbeidstidPeriodeForm.validation.tom.dateHasNoValue': 'Du må fylle ut periodens til-dato.',\n        'arbeidstidPeriodeForm.validation.tom.dateHasInvalidFormat':\n            'Du må oppgi periodens til-dato i et gyldig datoformat. Gyldig format er dd.mm.åååå.',\n        'arbeidstidPeriodeForm.validation.tom.toDateIsBeforeFromDate':\n            'Til-datoen kan ikke være før fra-datoen. Skriv inn eller velg dato fra kalenderen.',\n        'arbeidstidPeriodeForm.validation.tom.dateIsAfterMax':\n            'Til-datoen kan ikke være etter perioden du har søkt for.',\n        'arbeidstidPeriodeForm.validation.tom.dateIsNotWeekday':\n            'Til-dato må være en ukedag, det kan ikke være en lørdag eller søndag. Skriv inn eller velg dato fra kalenderen.',\n        'arbeidstidPeriodeForm.validation.fasteDager.gruppe.ingenTidRegistrert':\n            'Du må oppgi hvor mange timer du jobber i uken.',\n        'arbeidstidPeriodeForm.validation.fasteDager.gruppe.forMangeTimer':\n            'Du kan ikke oppgi mer enn 24 timer for én dag.',\n        'arbeidstidPeriodeForm.validation.arbeiderHvordan.noValue':\n            'Du må svare på hvordan du jobber {hvor} i denne perioden.',\n\n        'arbeidstidPeriodeForm.validation.tidFasteDager.tid.timeHasNoValue':\n            'Du må fylle ut timer og minutter for {dag}.',\n        'arbeidstidPeriodeForm.validation.tidFasteDager.tid.hoursAreInvalid':\n            'Antall timer på {dag} er ikke et gyldig tall.',\n        'arbeidstidPeriodeForm.validation.tidFasteDager.tid.minutesAreInvalid':\n            'Antall minutter på {dag} er ikke et gyldig tall.',\n        'arbeidstidPeriodeForm.validation.tidFasteDager.tid.tooManyHours':\n            'Antall timer på {dag} kan ikke overstige 24 timer.',\n        'arbeidstidPeriodeForm.validation.tidFasteDager.tid.tooManyMinutes':\n            'Antall minutter på {dag}  kan ikke overstige 59 minutter.',\n        'arbeidstidPeriodeForm.validation.tidFasteDager.tid.durationIsTooLong':\n            'Antall timer og minutter registrert {dag} er for høyt. Tiden kan ikke overstige 24 timer hver ukedag.',\n        'arbeidstidPeriodeForm.validation.tidFasteDager.tid.durationIsTooShort':\n            'Antall timer og minutter {dag}  kan ikke være mindre enn 0 timer og 0 minutter.',\n        'arbeidstidPeriodeForm.validation.tidFasteDager.tid.minutesAreNegative':\n            'Antall timer og minutter {dag}  kan ikke være mindre enn 0 timer og 0 minutter.',\n        'arbeidstidPeriodeForm.validation.tidFasteDager.tid.hoursAreNegative':\n            'Antall timer og minutter {dag}  kan ikke være mindre enn 0 timer og 0 minutter.',\n    },\n};\n\nconst arbeidIPeriodeIntlValuesMessages = {\n    nb: {\n        'arbeidstidPeriode.arbeidIPeriodeIntlValues.harJobbet': 'har jobbet',\n        'arbeidstidPeriode.arbeidIPeriodeIntlValues.skalJobbe': 'skal jobbe',\n        'arbeidstidPeriode.arbeidIPeriodeIntlValues.somAnsatt': `hos {arbeidsstedNavn}`,\n        'arbeidstidPeriode.arbeidIPeriodeIntlValues.somFrilanser': 'som frilanser',\n        'arbeidstidPeriode.arbeidIPeriodeIntlValues.somSN': 'som selvstendig næringsdrivende',\n        'arbeidstidPeriode.arbeidIPeriodeIntlValues.iPerioden': `i perioden {fra} til {til}`,\n    },\n};\n\nexport const arbeidstidPeriodeMessages = {\n    nb: {\n        ...arbeidstidPeriodeFormFormMessages.nb,\n        ...arbeidIPeriodeIntlValuesMessages.nb,\n        'arbeidstidPeriodeDialog.contentLabel': 'Registrer jobb for en periode',\n        'arbeidstidPeriode.timer': '{timer, plural, one {# time} other {# timer}}',\n        'arbeidstidPeriode.timer.ikkeTall': `{timer} timer`,\n    },\n};\n\ntype ArbeidstidPeriodeMessagesType = keyof typeof arbeidstidPeriodeMessages.nb;\n\nexport const getArbeidstidPeriodeIntl = (intl: IntlShape) => typedIntlHelper<ArbeidstidPeriodeMessagesType>(intl);\n","import React from 'react';\nimport { FormattedNumber, useIntl } from 'react-intl';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { Duration, durationToDecimalDuration, ensureDuration } from '@navikt/sif-common-utils';\n\nconst DurationText = ({\n    duration,\n    fullText,\n    hideEmptyValues = false,\n    type,\n}: {\n    duration: Partial<Duration>;\n    fullText?: boolean;\n    hideEmptyValues?: boolean;\n    type?: 'digital' | 'decimal' | 'standard';\n}): JSX.Element => {\n    const timer = duration.hours || '0';\n    const minutter = duration.minutes || '0';\n    const intl = useIntl();\n\n    if (type === 'decimal') {\n        return (\n            <>\n                <FormattedNumber\n                    value={durationToDecimalDuration(ensureDuration(duration))}\n                    maximumFractionDigits={2}\n                />\n                {` `}t.\n            </>\n        );\n    } else if (type === 'digital') {\n        return (\n            <>\n                {timer}:{minutter}\n            </>\n        );\n    }\n\n    return (\n        <span style={{ whiteSpace: 'nowrap' }}>\n            {hideEmptyValues && timer === '0' && minutter !== '0' ? null : (\n                <span style={{ whiteSpace: 'nowrap' }}>\n                    {fullText ? (\n                        intlHelper(intl, 'timer', { timer })\n                    ) : (\n                        <>\n                            {timer}{' '}\n                            <span aria-label=\"timer\" style={{ marginLeft: '-.125rem' }}>\n                                t.{' '}\n                            </span>\n                        </>\n                    )}\n                </span>\n            )}\n            {` `}\n            {hideEmptyValues && minutter === '0' && timer !== '0' ? null : (\n                <span style={{ whiteSpace: 'nowrap' }}>\n                    {fullText ? (\n                        intlHelper(intl, 'minutter', { minutter })\n                    ) : (\n                        <>\n                            {minutter}{' '}\n                            <span aria-label=\"minutter\" style={{ marginLeft: '-.125rem' }}>\n                                m.\n                            </span>\n                        </>\n                    )}\n                </span>\n            )}\n        </span>\n    );\n};\n\nexport default DurationText;\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport dayjs from 'dayjs';\nimport { groupBy } from 'lodash';\nimport { Element, Undertittel } from 'nav-frontend-typografi';\nimport { DagMedTid } from '../..';\nimport DurationText from '../duration-text/DurationText';\nimport './dagerMedTidListe.less';\n\ninterface Props {\n    dagerMedTid: DagMedTid[];\n    visMåned?: boolean;\n    viseUke?: boolean;\n    visNormaltid?: boolean;\n}\n\nconst sortDays = (d1: DagMedTid, d2: DagMedTid): number => (dayjs(d1.dato).isSameOrBefore(d2.dato, 'day') ? -1 : 1);\n\nconst bem = bemUtils('dagerMedTidListe');\n\nexport const DagerMedTidListe = ({ dagerMedTid, viseUke, visMåned, visNormaltid }: Props) => {\n    const weeksWithDays = groupBy(dagerMedTid, (dag) => `${dag.dato.getFullYear()}-${dayjs(dag.dato).isoWeek()}`);\n    return (\n        <div className={bem.block}>\n            {visMåned && <Undertittel className=\"m-caps\">{dayjs(dagerMedTid[0].dato).format('MMM YYYY')}</Undertittel>}\n            <div className={bem.element('uker')}>\n                {Object.keys(weeksWithDays).map((key) => {\n                    const days = weeksWithDays[key];\n                    return (\n                        <div key={key} className={bem.element('uke')}>\n                            {viseUke && (\n                                <Element tag=\"h4\" className={bem.element('uketittel')}>\n                                    <FormattedMessage\n                                        id=\"dagerMedTid.uke\"\n                                        values={{ uke: dayjs(days[0].dato).isoWeek() }}\n                                    />\n                                </Element>\n                            )}\n                            <ol className={bem.element('dager')}>\n                                {days.sort(sortDays).map((dag, idx) => {\n                                    const timer = dag.tid.hours || '0';\n                                    const minutter = dag.tid.minutes || '0';\n\n                                    return (\n                                        <li key={idx}>\n                                            <div className={bem.element('dag')}>\n                                                <span className={bem.element('dag__dato')}>\n                                                    {dayjs(dag.dato).format('dddd DD.MM.YYYY')}:\n                                                </span>\n                                                <span className={bem.element('dag__tid')}>\n                                                    <DurationText\n                                                        duration={{ hours: timer, minutes: minutter }}\n                                                        fullText={true}\n                                                    />\n                                                    {visNormaltid && dag.normaltid && (\n                                                        <>\n                                                            . Normalt{' '}\n                                                            <DurationText duration={dag.normaltid} fullText={true} />.\n                                                        </>\n                                                    )}\n                                                </span>\n                                            </div>\n                                        </li>\n                                    );\n                                })}\n                            </ol>\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n};\n\nexport default DagerMedTidListe;\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { ISODateToDate, ISODurationToDuration } from '@navikt/sif-common-utils';\nimport dayjs from 'dayjs';\nimport groupBy from 'lodash.groupby';\nimport EkspanderbartPanel from 'nav-frontend-ekspanderbartpanel';\nimport DagerMedTidListe from '../../common/dager-med-tid-liste/DagerMedTidListe';\nimport { ArbeidstidEnkeltdagApiData, DagMedTid } from '../../types';\n\nexport interface ArbeidstidEnkeltdagerOppsummeringProps {\n    dager: ArbeidstidEnkeltdagApiData[];\n    visNormaltid?: boolean;\n}\n\nexport const mapArbeidstidEnkeltdagApiDataToDagMedTid = (dag: ArbeidstidEnkeltdagApiData): DagMedTid => {\n    const dato = ISODateToDate(dag.dato);\n    const tid = ISODurationToDuration(dag.arbeidstimer.faktiskTimer);\n    const normaltid = ISODurationToDuration(dag.arbeidstimer.normalTimer);\n    return { dato, tid, normaltid };\n};\n\nconst ArbeidstidEnkeltdagerOppsummering: React.FunctionComponent<ArbeidstidEnkeltdagerOppsummeringProps> = ({\n    dager,\n    visNormaltid,\n}) => {\n    const ingenDagerRegistrertMelding = <FormattedMessage id=\"dagerMedTid.ingenDagerRegistrert\" />;\n    if (dager.length === 0) {\n        return ingenDagerRegistrertMelding;\n    }\n    const dagerMedTid = dager.map(mapArbeidstidEnkeltdagApiDataToDagMedTid);\n    const months = groupBy(dagerMedTid, ({ dato }) => `${dato.getFullYear()}.${dato.getMonth()}`);\n    return (\n        <>\n            {Object.keys(months).map((key) => {\n                const dagerMedTid = months[key];\n                if (dagerMedTid.length === 0) {\n                    return ingenDagerRegistrertMelding;\n                }\n                return (\n                    <Box margin=\"m\" key={key}>\n                        <EkspanderbartPanel\n                            tittel={\n                                <span style={{ textTransform: 'capitalize', fontSize: '1rem' }}>\n                                    {dayjs(dagerMedTid[0].dato).format('MMMM YYYY')}\n                                </span>\n                            }>\n                            <DagerMedTidListe dagerMedTid={dagerMedTid} viseUke={true} visNormaltid={visNormaltid} />\n                        </EkspanderbartPanel>\n                    </Box>\n                );\n            })}\n        </>\n    );\n};\n\nexport default ArbeidstidEnkeltdagerOppsummering;\n","import datepickerUtils from '@navikt/sif-common-formik/lib/components/formik-datepicker/datepickerUtils';\nimport {\n    DateDurationMap,\n    DateRange,\n    dateToISODate,\n    Duration,\n    getDatesInDateRange,\n    getFirstWeekdayOnOrAfterDate,\n    getLastWeekdayOnOrBeforeDate,\n    getMonthDateRange,\n    getWeekDateRange,\n    isDateWeekDay,\n    ISODate,\n    nthItemFilter,\n} from '@navikt/sif-common-utils';\nimport dayjs from 'dayjs';\nimport { GjentagelseEnkeltdag, GjentagelseType, TidEnkeltdagFormValues } from '../TidEnkeltdagForm';\n\nconst getDagerMedInterval = (interval: number, periode: DateRange) => {\n    const ukedag = dayjs(periode.from).isoWeekday();\n    const datoer = getDatesInDateRange(periode, true);\n    const dager = datoer.filter((dato) => dayjs(dato).isoWeekday() === ukedag);\n    return dager.filter((_, index) => {\n        return nthItemFilter(index, interval);\n    });\n};\n\nconst getGjentagendeDager = (endringsperiode: DateRange, dato: Date, gjentagelse?: GjentagelseEnkeltdag): ISODate[] => {\n    if (gjentagelse) {\n        let gjentagendeDatoer: Date[] = [];\n        const periode: DateRange = {\n            from: dato,\n            to: gjentagelse.tom || endringsperiode.to,\n        };\n        if (gjentagelse.gjentagelsetype === GjentagelseType.hverUke) {\n            gjentagendeDatoer = getDagerMedInterval(1, periode);\n        }\n        if (gjentagelse.gjentagelsetype === GjentagelseType.hverAndreUke) {\n            gjentagendeDatoer = getDagerMedInterval(2, periode);\n        }\n        if (gjentagelse.gjentagelsetype === GjentagelseType.heleUken) {\n            gjentagendeDatoer = getDatesInDateRange(getWeekDateRange(periode.from), true);\n        }\n        if (gjentagelse.gjentagelsetype === GjentagelseType.heleMåneden) {\n            gjentagendeDatoer = getDatesInDateRange(getMonthDateRange(periode.from), true);\n        }\n        return gjentagendeDatoer.filter(isDateWeekDay).map((date) => dateToISODate(date));\n    }\n    return [dateToISODate(dato)];\n};\n\nexport const getDagerMedNyTid = (\n    endringsperiode: DateRange,\n    dato: Date,\n    varighet: Duration,\n    gjentagelse?: GjentagelseEnkeltdag\n): DateDurationMap => {\n    const datoerMedTid: DateDurationMap = {};\n    const datoerSomSkalEndres = getGjentagendeDager(endringsperiode, dato, gjentagelse);\n    datoerSomSkalEndres.forEach((isoDate) => {\n        datoerMedTid[isoDate] = { ...varighet };\n    });\n    datoerMedTid[dateToISODate(dato)] = { ...varighet };\n    return datoerMedTid;\n};\n\nexport const getGjentagelseEnkeltdagFraFormValues = (\n    values: Partial<TidEnkeltdagFormValues>\n): GjentagelseEnkeltdag | undefined => {\n    const gjentagelse: GjentagelseEnkeltdag | undefined =\n        values.gjentagelse && values.skalGjentas === true\n            ? {\n                  gjentagelsetype: values.gjentagelse,\n                  tom: values.stopDato ? datepickerUtils.getDateFromDateString(values.stopDato) : undefined,\n              }\n            : undefined;\n    return gjentagelse;\n};\n\nexport const getDateRangeWithinDateRange = (range: DateRange, limitRange: DateRange): DateRange => {\n    return {\n        from: dayjs.max(dayjs(range.from), dayjs(limitRange.from)).toDate(),\n        to: dayjs.min(dayjs(range.to), dayjs(limitRange.to)).toDate(),\n    };\n};\nexport const trimDateRangeToWeekdays = (range: DateRange): DateRange => {\n    return {\n        from: getFirstWeekdayOnOrAfterDate(range.from),\n        to: getLastWeekdayOnOrBeforeDate(range.to),\n    };\n};\n","import { InputTime } from '@navikt/sif-common-formik/lib';\nimport getTimeValidator from '@navikt/sif-common-formik/lib/validation/getTimeValidator';\nimport { ValidationError, ValidationResult } from '@navikt/sif-common-formik/lib/validation/types';\nimport { NumberDuration } from '@navikt/sif-common-utils/lib';\n\nexport const getTidEnkeltdagFormTidValidator =\n    (maksTid: NumberDuration, minTid: NumberDuration = { hours: 0, minutes: 0 }) =>\n    (time: InputTime): ValidationResult<ValidationError> => {\n        const error = getTimeValidator({ required: true, max: maksTid, min: minTid })(time);\n        if (error) {\n            return {\n                key: `tidEnkeltdagForm.validation.tid.${error}`,\n                keepKeyUnaltered: true,\n                values: {\n                    maksTimer: maksTid.hours,\n                    maksMinutter: maksTid.minutes,\n                    minTimer: minTid.hours,\n                    minMinutter: minTid.minutes,\n                },\n            };\n        }\n        return undefined;\n    };\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { DateRange, getTypedFormComponents, InputTime } from '@navikt/sif-common-formik/lib';\nimport { getDateValidator, getRequiredFieldValidator } from '@navikt/sif-common-formik/lib/validation';\nimport getIntlFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport {\n    DateDurationMap,\n    dateFormatter,\n    Duration,\n    durationsAreEqual,\n    ensureDuration,\n    getLastWeekdayOnOrBeforeDate,\n    getMonthDateRange,\n    getNumberOfDaysInDateRange,\n    getWeekDateRange,\n    NumberDuration,\n} from '@navikt/sif-common-utils';\nimport dayjs from 'dayjs';\nimport minMax from 'dayjs/plugin/minMax';\nimport { InputDateString } from 'nav-datovelger/lib/types';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { DurationText } from '../..';\nimport {\n    getDagerMedNyTid,\n    getDateRangeWithinDateRange,\n    getGjentagelseEnkeltdagFraFormValues,\n    trimDateRangeToWeekdays,\n} from './utils/tidEnkeltdagUtils';\nimport { getTidEnkeltdagFormTidValidator } from './utils/tidEnkeltdagValidation';\nimport ResponsivePanel from '@navikt/sif-common-core/lib/components/responsive-panel/ResponsivePanel';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\n\ndayjs.extend(minMax);\n\nexport interface TidEnkeltdagFormProps {\n    periode: DateRange;\n    dato: Date;\n    tid?: Partial<Duration>;\n    tidOpprinnelig?: Duration;\n    maksTid?: NumberDuration;\n    minTid?: NumberDuration;\n    hvorMyeSpørsmålRenderer: (date: Date) => string;\n    onSubmit: (dagerMedTid: TidEnkeltdagEndring) => void;\n    onCancel: () => void;\n}\n\nexport interface GjentagelseEnkeltdag {\n    gjentagelsetype: GjentagelseType;\n    tom?: Date;\n}\n\nexport interface TidEnkeltdagEndring {\n    dagerMedTid: DateDurationMap;\n}\n\nconst visStoppGjentagelse = false;\n\nenum FormFields {\n    'tid' = 'tid',\n    'skalGjentas' = 'skalGjentas',\n    'gjentagelse' = 'gjentagelse',\n    'stoppGjentagelse' = 'stoppGjentagelse',\n    'stopDato' = 'stopDato',\n}\n\nexport enum GjentagelseType {\n    hverUke = 'hverUke',\n    hverAndreUke = 'hverAndreUke',\n    heleUken = 'heleUken',\n    heleMåneden = 'heleMåneden',\n}\n\nexport interface TidEnkeltdagFormValues {\n    [FormFields.tid]: InputTime;\n    [FormFields.skalGjentas]: boolean;\n    [FormFields.gjentagelse]: GjentagelseType;\n    [FormFields.stoppGjentagelse]: boolean;\n    [FormFields.stopDato]: InputDateString;\n}\n\nconst FormComponents = getTypedFormComponents<FormFields, TidEnkeltdagFormValues, ValidationError>();\n\nconst bem = bemUtils('tidEnkeltdagForm');\n\nconst TidEnkeltdagForm: React.FunctionComponent<TidEnkeltdagFormProps> = ({\n    dato,\n    tid,\n    tidOpprinnelig,\n    periode,\n    maksTid = { hours: 24, minutes: 0 },\n    minTid = { hours: 0, minutes: 0 },\n    hvorMyeSpørsmålRenderer,\n    onSubmit,\n    onCancel,\n}) => {\n    const intl = useIntl();\n\n    const onValidSubmit = (values: Partial<TidEnkeltdagFormValues>) => {\n        if (values.tid) {\n            onSubmit({\n                dagerMedTid: getDagerMedNyTid(periode, dato, values.tid, getGjentagelseEnkeltdagFraFormValues(values)),\n            });\n        }\n    };\n\n    const erEndret = durationsAreEqual(tid, tidOpprinnelig) === false;\n    const dagNavn = dayjs(dato).format('dddd');\n    const dagerNavn = `${dayjs(dato).format('dddd')}er`;\n    const valgtDatoTxt = dateFormatter.dayDateMonthYear(dato);\n\n    const ukePeriode: DateRange = trimDateRangeToWeekdays(\n        getDateRangeWithinDateRange(getWeekDateRange(dato, true), periode)\n    );\n    const ukeErHel = dayjs(ukePeriode.from).isoWeekday() === 1 && dayjs(ukePeriode.to).isoWeekday() === 5;\n    const månedPeriode: DateRange = trimDateRangeToWeekdays(\n        getDateRangeWithinDateRange(getMonthDateRange(dato, true), periode)\n    );\n    const månedErHel =\n        dayjs(periode.from).isBefore(månedPeriode.from, 'month') && dayjs(periode.to).isAfter(månedPeriode.to, 'month');\n\n    const ukePeriodeStartTxt = dateFormatter.dayDateShortMonth(ukePeriode.from);\n    const ukePeriodeSluttTxt = dateFormatter.dayDateShortMonth(ukePeriode.to);\n\n    const månedPeriodeStartTxt = dateFormatter.dayDateShortMonth(månedPeriode.from);\n    const månedPeriodeSluttTxt = dateFormatter.dayDateShortMonth(månedPeriode.to);\n\n    const ukeNavn = `${dayjs(dato).isoWeek()}`;\n    const månedNavn = dayjs(dato).format('MMMM YYYY');\n\n    const sluttDatoTxt = dateFormatter.dayDateShortMonth(getLastWeekdayOnOrBeforeDate(periode.to));\n\n    const skalViseValgetGjelderFlereDager = getNumberOfDaysInDateRange(periode) > 2;\n\n    const renderGjentagelseRadioLabel = (\n        key: string,\n        periode?: { fra: string; til: string },\n        values?: any\n    ): JSX.Element => (\n        <>\n            <FormattedMessage id={`tidEnkeltdagForm.gjentagelse.${key}`} values={{ ...values, ...periode }} />\n            {/* <div style={{ fontSize: '0.9rem' }}>\n                <FormattedMessage\n                    id=\"tidEnkeltdagForm.gjentagelse.periode\"\n                    values={{\n                        ...values,\n                        ...periode,\n                    }}\n                />\n            </div> */}\n        </>\n    );\n\n    return (\n        <div>\n            <Undertittel tag=\"h1\" className=\"dialogFormTitle\">\n                <span className=\"m-caps\">{dagNavn}</span> {dateFormatter.full(dato)}\n            </Undertittel>\n            <FormBlock margin=\"l\">\n                <FormComponents.FormikWrapper\n                    enableReinitialize={true}\n                    initialValues={{\n                        tid: tid ? ensureDuration(tid) : undefined,\n                    }}\n                    onSubmit={onValidSubmit}\n                    renderForm={({ values: { skalGjentas, stoppGjentagelse, gjentagelse } }) => {\n                        return (\n                            <FormComponents.Form\n                                onCancel={onCancel}\n                                formErrorHandler={getIntlFormErrorHandler(intl, 'tidEnkeltdagForm.validation')}\n                                includeValidationSummary={false}\n                                includeButtons={true}\n                                submitButtonLabel=\"Lagre\"\n                                cancelButtonLabel=\"Avbryt\">\n                                <FormComponents.TimeInput\n                                    name={FormFields.tid}\n                                    label={hvorMyeSpørsmålRenderer(dato)}\n                                    validate={getTidEnkeltdagFormTidValidator(maksTid, minTid)}\n                                    timeInputLayout={{ justifyContent: 'left', compact: false, direction: 'vertical' }}\n                                />\n                                {tidOpprinnelig && erEndret && (\n                                    <p>\n                                        <FormattedMessage id=\"tidEnkeltdagForm.endretFra\" />{' '}\n                                        <DurationText duration={tidOpprinnelig} fullText={true} />\n                                    </p>\n                                )}\n                                {skalViseValgetGjelderFlereDager && (\n                                    <FormBlock margin=\"l\">\n                                        <FormComponents.Checkbox\n                                            label={intlHelper(intl, 'tidEnkeltdagForm.gjelderFlereDager.label')}\n                                            name={FormFields.skalGjentas}\n                                        />\n                                    </FormBlock>\n                                )}\n                                {skalGjentas === true && (\n                                    <Box margin=\"l\">\n                                        <ResponsivePanel>\n                                            {/* <div style={{ paddingLeft: '1.5rem' }}> */}\n\n                                            <FormComponents.RadioGroup\n                                                legend={intlHelper(intl, 'tidEnkeltdagForm.gjelderFlereDager.info')}\n                                                className={bem.element('gjentagelseOptions')}\n                                                name={FormFields.gjentagelse}\n                                                validate={getRequiredFieldValidator()}\n                                                radios={[\n                                                    {\n                                                        label: renderGjentagelseRadioLabel(\n                                                            ukeErHel ? 'helUke' : 'delAvUke',\n                                                            {\n                                                                fra: ukePeriodeStartTxt,\n                                                                til: ukePeriodeSluttTxt,\n                                                            },\n                                                            { ukeNavn }\n                                                        ),\n                                                        value: GjentagelseType.heleUken,\n                                                    },\n                                                    {\n                                                        label: renderGjentagelseRadioLabel(\n                                                            månedErHel ? 'helMåned' : 'delAvMåned',\n                                                            {\n                                                                fra: månedPeriodeStartTxt,\n                                                                til: månedPeriodeSluttTxt,\n                                                            },\n                                                            { månedNavn }\n                                                        ),\n                                                        value: GjentagelseType.heleMåneden,\n                                                    },\n                                                    {\n                                                        label: renderGjentagelseRadioLabel(\n                                                            'dagerFremover',\n                                                            {\n                                                                fra: valgtDatoTxt,\n                                                                til: sluttDatoTxt,\n                                                            },\n                                                            { dagerNavn }\n                                                        ),\n\n                                                        value: GjentagelseType.hverUke,\n                                                    },\n                                                ]}\n                                            />\n                                            {visStoppGjentagelse && (\n                                                <>\n                                                    {(gjentagelse === GjentagelseType.hverUke ||\n                                                        gjentagelse === GjentagelseType.hverAndreUke) && (\n                                                        <div style={{ marginLeft: '1.5rem' }}>\n                                                            <FormBlock margin=\"m\">\n                                                                <FormComponents.Checkbox\n                                                                    label={intlHelper(\n                                                                        intl,\n                                                                        'tidEnkeltdagForm.stoppGjentagelse.label'\n                                                                    )}\n                                                                    name={FormFields.stoppGjentagelse}\n                                                                />\n                                                            </FormBlock>\n                                                            {stoppGjentagelse && (\n                                                                <FormBlock margin=\"l\">\n                                                                    <FormComponents.DatePicker\n                                                                        label={intlHelper(\n                                                                            intl,\n                                                                            'tidEnkeltdagForm.stopDato.label'\n                                                                        )}\n                                                                        minDate={dato}\n                                                                        maxDate={periode.to}\n                                                                        validate={getDateValidator({\n                                                                            min: dato,\n                                                                            max: periode.to,\n                                                                            required: true,\n                                                                        })}\n                                                                        disableWeekend={true}\n                                                                        fullScreenOnMobile={true}\n                                                                        fullscreenOverlay={true}\n                                                                        dayPickerProps={{\n                                                                            initialMonth: dato,\n                                                                        }}\n                                                                        name={FormFields.stopDato}\n                                                                    />\n                                                                </FormBlock>\n                                                            )}\n                                                        </div>\n                                                    )}\n                                                </>\n                                            )}\n                                        </ResponsivePanel>\n                                    </Box>\n                                )}\n                            </FormComponents.Form>\n                        );\n                    }}\n                />\n            </FormBlock>\n        </div>\n    );\n};\n\nexport default TidEnkeltdagForm;\n","import React from 'react';\nimport { dateFormatter } from '@navikt/sif-common-utils/lib/dateFormatter';\nimport Modal from 'nav-frontend-modal';\nimport TidEnkeltdagForm, { TidEnkeltdagFormProps } from './TidEnkeltdagForm';\nimport './styles/tidEnkeltdagDialog.less';\n\nexport interface TidEnkeltdagDialogProps {\n    isOpen?: boolean;\n    dialogTitle: string;\n    formProps: TidEnkeltdagFormProps;\n}\n\nconst TidEnkeltdagDialog: React.FunctionComponent<TidEnkeltdagDialogProps> = ({\n    isOpen = false,\n    dialogTitle,\n    formProps,\n}) => {\n    if (!isOpen) {\n        return null;\n    }\n    return isOpen ? (\n        <Modal\n            isOpen={isOpen}\n            contentLabel={`${dialogTitle} ${dateFormatter.dayDateMonthYear(formProps.dato)}`}\n            onRequestClose={formProps.onCancel}\n            shouldCloseOnOverlayClick={false}\n            className=\"tidEnkeltdagDialog\">\n            <TidEnkeltdagForm {...formProps} />\n        </Modal>\n    ) : null;\n};\n\nexport default TidEnkeltdagDialog;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { dateFormatter, dateToday } from '@navikt/sif-common-utils/lib';\nimport dayjs from 'dayjs';\nimport TidEnkeltdagDialog, { TidEnkeltdagDialogProps } from '../../tid/tid-enkeltdag-dialog/TidEnkeltdagDialog';\nimport { TidEnkeltdagFormProps } from '../../tid/tid-enkeltdag-dialog/TidEnkeltdagForm';\nimport { ArbeidsforholdType } from '../../types';\n\ninterface Props extends Omit<TidEnkeltdagDialogProps, 'dialogTitle' | 'formProps'> {\n    arbeidsstedNavn: string;\n    arbeidsforholdType: ArbeidsforholdType;\n    formProps: Omit<TidEnkeltdagFormProps, 'hvorMyeSpørsmålRenderer'>;\n}\n\nconst ArbeidstidEnkeltdagDialog: React.FunctionComponent<Props> = ({\n    isOpen,\n    arbeidsforholdType,\n    arbeidsstedNavn,\n    formProps,\n}: Props) => {\n    const intl = useIntl();\n    const hvorMyeSpørsmålRenderer = (dato: Date): string => {\n        const erHistorisk = dayjs(dato).isBefore(dateToday, 'day');\n        const intlValues = {\n            skalEllerHarJobbet: intlHelper(\n                intl,\n                erHistorisk ? 'arbeidstidEnkeltdagForm.jobbet' : 'arbeidstidEnkeltdagForm.skalJobbe'\n            ),\n            hvor: intlHelper(intl, `arbeidstidEnkeltdagForm.som.${arbeidsforholdType}`, { navn: arbeidsstedNavn }),\n            når: dateFormatter.dayDateShortMonthYear(dato),\n        };\n        return intlHelper(intl, 'arbeidstidEnkeltdagForm.tid.spm', intlValues);\n    };\n    return (\n        <TidEnkeltdagDialog\n            isOpen={isOpen}\n            dialogTitle={intlHelper(intl, 'arbeidstidEnkeltdagDialog.contentTitle')}\n            formProps={{ ...formProps, hvorMyeSpørsmålRenderer, maksTid: { hours: 24, minutes: 0 } }}\n        />\n    );\n};\n\nexport default ArbeidstidEnkeltdagDialog;\n","import React from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport { Time } from '@navikt/sif-common-core/lib/types/Time';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { ISODurationToDuration } from '@navikt/sif-common-utils';\nimport { ArbeidstimerApiData, ArbeidstimerFasteDagerApiData } from '../../types';\n\nexport interface ArbeidstidFasteDagerOppsummeringProps {\n    fasteDager?: ArbeidstimerFasteDagerApiData;\n    visNormaltid?: boolean;\n}\n\nconst formatTime = (intl: IntlShape, time: Partial<Time>): string => {\n    const timer = time.hours || '0';\n    const minutter = time.minutes || '0';\n    return intlHelper(intl, 'timerOgMinutter', { timer, minutter });\n};\n\nconst ArbeidstidFasteDagerOppsummering: React.FunctionComponent<ArbeidstidFasteDagerOppsummeringProps> = ({\n    fasteDager,\n    visNormaltid,\n}) => {\n    const intl = useIntl();\n\n    if (fasteDager) {\n        const ukedager = Object.keys(fasteDager).filter((day) => fasteDager[day] !== undefined);\n        if (ukedager.length > 0) {\n            return (\n                <ul style={{ marginTop: 0 }}>\n                    {ukedager.map((ukedag, idx) => {\n                        const arbeidstimer: ArbeidstimerApiData = fasteDager[ukedag];\n                        const durationFaktiskTimer = ISODurationToDuration(arbeidstimer.faktiskTimer);\n                        const durationNormalTimer = ISODurationToDuration(arbeidstimer.normalTimer);\n                        return (\n                            <li key={idx} style={{ marginBottom: '.25rem' }}>\n                                {`${intlHelper(intl, `dagerMedTid.${ukedag}er`)}: ${\n                                    durationFaktiskTimer ? formatTime(intl, durationFaktiskTimer) : 0\n                                }`}\n                                {visNormaltid && durationNormalTimer && (\n                                    <>\n                                        .\n                                        <br />\n                                        {intlHelper(intl, 'dagerMedTid.normaltTimer', {\n                                            timer: formatTime(intl, durationNormalTimer),\n                                        })}\n                                        .\n                                    </>\n                                )}\n                            </li>\n                        );\n                    })}\n                </ul>\n            );\n        }\n    }\n    return <>{intlHelper(intl, 'dagerMedTid.ingenDagerRegistrert')}</>;\n};\n\nexport default ArbeidstidFasteDagerOppsummering;\n","import React from 'react';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { dateFormatter, dateToISODate } from '@navikt/sif-common-utils';\n\ninterface Props {\n    date: Date;\n    dateRendererShort?: (date: Date) => React.ReactNode;\n    dateRendererFull?: (date: Date) => React.ReactNode;\n}\n\nconst bem = bemUtils('calendarGrid');\n\nconst CalendarGridDate: React.FunctionComponent<Props> = ({\n    date,\n    dateRendererShort = dateFormatter.compact,\n    dateRendererFull = dateFormatter.dayDateMonth,\n}) => {\n    const id = `${dateToISODate(date)}_date`;\n\n    const content = (\n        <>\n            <span className={bem.classNames(bem.element('date__full'))}>\n                <span>{dateRendererFull(date)}</span>\n            </span>\n            <span className={bem.element('date__short')} id={id}>\n                {dateRendererShort(date)}\n            </span>\n        </>\n    );\n\n    return <span className={bem.element('date')}>{content}</span>;\n};\nexport default CalendarGridDate;\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { DateRange } from '@navikt/sif-common-formik/lib';\nimport {\n    dateFormatter,\n    dateToISODate,\n    getDatesInDateRange,\n    getDatesInMonth,\n    isDateInDates,\n} from '@navikt/sif-common-utils/';\nimport dayjs from 'dayjs';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport utc from 'dayjs/plugin/utc';\nimport { groupBy } from 'lodash';\nimport CalendarGridDate from './CalendarGridDate';\nimport './calendarGrid.less';\n\ndayjs.extend(isSameOrBefore);\ndayjs.extend(utc);\n\ninterface WeekToRender {\n    weekNumber: number;\n    dates: Date[];\n}\n\ninterface Props {\n    month: DateRange;\n    renderAsList?: boolean;\n    disabledDates?: Date[];\n    disabledDateInfo?: string;\n    hideEmptyContentInListMode?: boolean;\n    hideWeeksWithOnlyDisabledContent?: boolean;\n    onDateClick?: (date: Date) => void;\n    dateContentRenderer: (date: Date, isDisabled?: boolean) => React.ReactNode;\n    dateRendererShort?: (date: Date) => React.ReactNode;\n    dateRendererFull?: (date: Date) => React.ReactNode;\n    allDaysInWeekDisabledContentRenderer?: () => React.ReactNode;\n}\n\nconst getFullWeeksForDates = (dates: Date[], month: Date): Date[] => {\n    const dayOfWeek = dates[0].getUTCDay();\n    const firstDateInWeek = dayjs(dates[0]).startOf('isoWeek').toDate();\n    if (dayOfWeek > 0 && dayjs(firstDateInWeek).isSame(month, 'month') === false) {\n        return [\n            ...getDatesInDateRange({ from: firstDateInWeek, to: dayjs(dates[0]).subtract(1, 'day').toDate() }, true),\n            ...dates,\n        ];\n    }\n    return dates;\n};\n\nconst getWeeks = (dates: Date[], month: Date): WeekToRender[] => {\n    const datesToRender = getFullWeeksForDates(dates, month);\n    const weeksAndDays = groupBy(datesToRender, (date) => `week_${dayjs(date).isoWeek()}`);\n    const weeks: WeekToRender[] = [];\n    Object.keys(weeksAndDays).forEach((key) => {\n        const weekDates = weeksAndDays[key];\n        const weekHasDatesInMonth = weekDates.some((d) => dayjs(d).isSame(month, 'month'));\n        if (weekHasDatesInMonth && weekDates.length > 0) {\n            weeks.push({\n                weekNumber: dayjs(weekDates[0]).isoWeek(),\n                dates: weekDates,\n            });\n        }\n    });\n    return weeks;\n};\n\nconst bem = bemUtils('calendarGrid');\n\nconst CalendarGrid: React.FunctionComponent<Props> = ({\n    month,\n    disabledDates,\n    disabledDateInfo,\n    renderAsList,\n    hideEmptyContentInListMode,\n    hideWeeksWithOnlyDisabledContent,\n    onDateClick,\n    dateContentRenderer,\n    dateRendererShort = dateFormatter.compact,\n    dateRendererFull = dateFormatter.dayDateMonth,\n    allDaysInWeekDisabledContentRenderer,\n}) => {\n    const weekdatesInMonth = getDatesInMonth(month.from, true);\n    const weeks = getWeeks(weekdatesInMonth, month.from);\n\n    const renderDate = (date: Date) => {\n        const dateKey = date.toDateString();\n        const dateIsDisabled = isDateInDates(date, disabledDates);\n        const renderAsButton = onDateClick !== undefined && dateIsDisabled === false;\n\n        const ButtonOrDivComponent = renderAsButton ? 'button' : 'div';\n        return dayjs(date).isSame(month.from, 'month') === false ? (\n            <div key={dateKey} aria-hidden={true} className={bem.classNames(bem.element('day', 'outsideMonth'))} />\n        ) : (\n            <ButtonOrDivComponent\n                key={dateKey}\n                {...(renderAsButton\n                    ? {\n                          onClick: (evt) => {\n                              evt.stopPropagation();\n                              evt.preventDefault();\n                              onDateClick(date);\n                          },\n                          type: 'button',\n                      }\n                    : {})}\n                data-testid={`calendar-grid-date-${dateToISODate(date)}`}\n                title={dateIsDisabled ? disabledDateInfo : undefined}\n                aria-hidden={dateIsDisabled}\n                className={bem.classNames(\n                    bem.child('day').block,\n                    bem.child('day').modifierConditional('disabled', dateIsDisabled),\n                    bem.child('day').modifierConditional('button', renderAsButton)\n                )}>\n                <CalendarGridDate\n                    date={date}\n                    dateRendererFull={dateRendererFull}\n                    dateRendererShort={dateRendererShort}\n                />\n                <div className={bem.child('day').element('content')}>{dateContentRenderer(date, dateIsDisabled)}</div>\n            </ButtonOrDivComponent>\n        );\n    };\n\n    const renderWeek = (week: WeekToRender) => {\n        const datesInWeek = week.dates;\n        const weekNum = week.weekNumber;\n        const areAllDaysInWeekDisabledOrOutsideMonth =\n            datesInWeek.filter(\n                (date) =>\n                    isDateInDates(date, disabledDates) === true || dayjs(date).isSame(month.from, 'month') === false\n            ).length === datesInWeek.length;\n\n        if (hideWeeksWithOnlyDisabledContent && areAllDaysInWeekDisabledOrOutsideMonth) {\n            return null;\n        }\n        return [\n            <div\n                key={week.weekNumber}\n                data-testid={`calendar-grid-week-number-${week.weekNumber}`}\n                aria-hidden={true}\n                className={bem.element('weekNum', areAllDaysInWeekDisabledOrOutsideMonth ? 'empty' : undefined)}>\n                <span className={bem.element('weekNum_label')} role=\"presentation\" aria-hidden={true}>\n                    <FormattedMessage id=\"calendarGrid.Uke\" /> {` `}\n                </span>\n                <span>\n                    <span className=\"sr-only\">Uke </span>\n                    {weekNum}\n                </span>\n                {areAllDaysInWeekDisabledOrOutsideMonth && allDaysInWeekDisabledContentRenderer ? (\n                    <div className={bem.element('allWeekDisabledContent')}>\n                        {allDaysInWeekDisabledContentRenderer()}\n                    </div>\n                ) : undefined}\n            </div>,\n            datesInWeek.map(renderDate),\n        ];\n    };\n    return (\n        <div\n            className={bem.classNames(\n                bem.block,\n                bem.modifierConditional('hideEmptyContentInListMode', hideEmptyContentInListMode),\n                bem.modifier(renderAsList ? 'list' : 'grid')\n            )}>\n            <span aria-hidden={true} className={bem.element('dayHeader', 'week')}>\n                <FormattedMessage id=\"calendarGrid.Uke\" />\n            </span>\n            <span aria-hidden={true} className={bem.element('dayHeader')}>\n                <FormattedMessage id=\"calendarGrid.Mandag\" />\n            </span>\n            <span aria-hidden={true} className={bem.element('dayHeader')}>\n                <FormattedMessage id=\"calendarGrid.Tirsdag\" />\n            </span>\n            <span aria-hidden={true} className={bem.element('dayHeader')}>\n                <FormattedMessage id=\"calendarGrid.Onsdag\" />\n            </span>\n            <span aria-hidden={true} className={bem.element('dayHeader')}>\n                <FormattedMessage id=\"calendarGrid.Torsdag\" />\n            </span>\n            <span aria-hidden={true} className={bem.element('dayHeader')}>\n                <FormattedMessage id=\"calendarGrid.Fredag\" />\n            </span>\n            {weeks.map(renderWeek)}\n        </div>\n    );\n};\n\nexport default CalendarGrid;\n","import React, { ReactNode } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport './labelInputInfoLayout.less';\n\ninterface Props {\n    narrowBreakpoint?: number;\n    label: ReactNode;\n    input: ReactNode;\n    info?: ReactNode;\n}\n\nconst bem = bemUtils('labelInputInfoLayout');\n\nconst LabelInputInfoLayout: React.FunctionComponent<Props> = ({ narrowBreakpoint = 860, label, input, info }) => {\n    const isNarrow = useMediaQuery({\n        query: `(max-width: ${narrowBreakpoint}px)`,\n    });\n    return (\n        <div className={bem.classNames(bem.block, bem.modifierConditional('narrow', isNarrow))}>\n            <div className={bem.element('labelWrapper')} role=\"presentation\" aria-hidden={true}>\n                {label}\n            </div>\n            <div className={bem.element('inputWrapper')}>{input}</div>\n            {info && <div className={bem.element('infoWrapper')}>{info}</div>}\n        </div>\n    );\n};\n\nexport default LabelInputInfoLayout;\n","import React from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { InputTime } from '@navikt/sif-common-formik/lib';\n\nexport const formatTimerOgMinutter = (intl: IntlShape, time: Partial<InputTime>): string => {\n    const timer = time.hours || '0';\n    const minutter = time.minutes || '0';\n    if (minutter === '0') {\n        return intlHelper(intl, 'timer', { timer });\n    }\n    if (timer === '0') {\n        return intlHelper(intl, 'minutter', { minutter });\n    }\n    return intlHelper(intl, 'timerOgMinutter', { timer, minutter });\n};\n\ninterface Props {\n    timer?: string | number;\n    minutter?: string | number;\n}\n\nconst TimerOgMinutter: React.FunctionComponent<Props> = ({ timer, minutter }) => {\n    const intl = useIntl();\n    const numTimer = parseInt(`${timer}`, 10);\n    const numMinutter = minutter ? parseInt(`${minutter}`, 10) : 0;\n    return <span>{formatTimerOgMinutter(intl, { hours: `${numTimer}`, minutes: `${numMinutter}` })}</span>;\n};\n\nexport default TimerOgMinutter;\n","import { ComponentMessages } from '../../i18n';\n\ninterface Messages {\n    Mandager: string;\n    Tirsdager: string;\n    Onsdager: string;\n    Torsdager: string;\n    Fredager: string;\n    mandag: string;\n    tirsdag: string;\n    onsdag: string;\n    torsdag: string;\n    fredag: string;\n}\n\nconst nb: Messages = {\n    Mandager: 'Mandager',\n    Tirsdager: 'Tirsdager',\n    Onsdager: 'Onsdager',\n    Torsdager: 'Torsdager',\n    Fredager: 'Fredager',\n    mandag: 'mandag',\n    tirsdag: 'tirsdag',\n    onsdag: 'onsdag',\n    torsdag: 'torsdag',\n    fredag: 'fredag',\n};\n\nexport const tidUkerdagerInputMessages: ComponentMessages<Messages> = {\n    nb: nb,\n};\n\nexport const getTidFasteUkerdagerInputMessages = (locale: string): Messages => {\n    switch (locale) {\n        case 'nn':\n            return tidUkerdagerInputMessages.nn;\n        default:\n            return tidUkerdagerInputMessages.nb;\n    }\n};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { FormikInputGroup, FormikTimeInput, TestProps } from '@navikt/sif-common-formik';\nimport { ValidationError, ValidationResult } from '@navikt/sif-common-formik/lib/validation/types';\nimport { Weekday } from '@navikt/sif-common-utils';\nimport { LabelInputInfoLayout } from '../../common';\nimport { getTidFasteUkerdagerInputMessages } from '../../tid/tid-faste-ukedager-input/tidFasteUkerdagerInputMessages';\nimport './arbeidstidFasteUkedagerInput.less';\n\nexport interface ArbeidstidUkeTekster {\n    dag: React.ReactNode;\n    jobber: React.ReactNode;\n    ariaLabelTidInput: (dagNavn: string) => React.ReactNode;\n}\ninterface OwnProps {\n    fieldName: string;\n    utilgjengeligeUkedager?: Weekday[];\n    skjulUtilgjengeligeUkedager?: boolean;\n    tidPerDagValidator?: (weekday: Weekday, value: any) => ValidationResult<ValidationError>;\n    tekst: ArbeidstidUkeTekster;\n}\n\ntype Props = OwnProps & TestProps;\n\nconst bem = bemUtils('arbeidstidFasteUkedagerInput');\n\nconst ArbeidstidFasteUkedagerInput: React.FunctionComponent<Props> = ({\n    fieldName,\n    tidPerDagValidator,\n    utilgjengeligeUkedager,\n    skjulUtilgjengeligeUkedager,\n    tekst,\n    'data-testid': testId,\n}: Props) => {\n    const txt = getTidFasteUkerdagerInputMessages(useIntl().locale);\n\n    const renderWeekdayTimeInput = (weekday: Weekday, weekdayLabel: string) => {\n        const erUtilgjengeligUkedag = utilgjengeligeUkedager?.some((d) => d === weekday);\n        if (erUtilgjengeligUkedag && skjulUtilgjengeligeUkedager) {\n            return null;\n        }\n\n        return (\n            <FormikInputGroup\n                key={weekday}\n                legend={<span className=\"sr-only\">{weekdayLabel}</span>}\n                name={`arbeidstid_${weekday}`}\n                className={bem.element('dag', erUtilgjengeligUkedag ? 'utilgjengelig' : undefined)}>\n                <LabelInputInfoLayout\n                    label={weekdayLabel}\n                    input={\n                        <FormikTimeInput\n                            aria-describedby=\"iPerioden\"\n                            name={`${fieldName}.${weekday}`}\n                            label={\n                                <span className={'sr-only'}>{tekst.ariaLabelTidInput(weekdayLabel.toLowerCase())}</span>\n                            }\n                            timeInputLayout={{\n                                direction: 'horizontal',\n                            }}\n                            data-testid={testId ? `${testId}__${weekday}` : undefined}\n                            validate={tidPerDagValidator ? (value) => tidPerDagValidator(weekday, value) : undefined}\n                        />\n                    }\n                />\n            </FormikInputGroup>\n        );\n    };\n    return (\n        <div className={bem.classNames(bem.block)}>\n            {renderWeekdayTimeInput(Weekday.monday, txt.Mandager)}\n            {renderWeekdayTimeInput(Weekday.tuesday, txt.Tirsdager)}\n            {renderWeekdayTimeInput(Weekday.wednesday, txt.Onsdager)}\n            {renderWeekdayTimeInput(Weekday.thursday, txt.Torsdager)}\n            {renderWeekdayTimeInput(Weekday.friday, txt.Fredager)}\n        </div>\n    );\n};\n\nexport default ArbeidstidFasteUkedagerInput;\n","import React from 'react';\nimport { Duration, durationToDecimalDuration } from '@navikt/sif-common-utils/lib';\nimport DurationText from '../../../../common/duration-text/DurationText';\nimport './arbeidstidEnkeltdagTekst.less';\n\ninterface Props {\n    tid: Duration;\n    prosent?: number;\n    skjulIngenTid?: boolean;\n}\n\nconst ArbeidstidEnkeltdagTekst: React.FunctionComponent<Props> = ({ prosent, tid, skjulIngenTid }) => {\n    if (prosent !== undefined && prosent > 0) {\n        return (\n            <span className=\"arbeidstidEnkeltdagTekst\">\n                <span className={'arbeidstidEnkeltdagTekst__prosent'}>{prosent} %</span>\n                <span className=\"arbeidstidEnkeltdagTekst__timer\">\n                    (<DurationText duration={tid} />)\n                </span>\n            </span>\n        );\n    }\n    const desimaltid = durationToDecimalDuration(tid);\n    return skjulIngenTid && desimaltid === 0 ? null : <DurationText duration={tid} />;\n};\n\nexport default ArbeidstidEnkeltdagTekst;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { DateRange } from '@navikt/sif-common-utils/lib';\nimport dayjs from 'dayjs';\nimport { Element, Normaltekst } from 'nav-frontend-typografi';\n\ninterface Props {\n    headingLevel: number;\n    måned: DateRange;\n    antallDagerMedTid: number;\n}\n\nconst ArbeidstidMånedTittel: React.FunctionComponent<Props> = ({ headingLevel, måned, antallDagerMedTid }) => {\n    const intl = useIntl();\n    return (\n        <Element tag={`h${headingLevel}`}>\n            <span className=\"m-caps\">\n                {intlHelper(intl, 'arbeidstidMånedTittel.ukeOgÅr', {\n                    ukeOgÅr: dayjs(måned.from).format('MMMM YYYY'),\n                })}\n            </span>\n            <Normaltekst tag=\"div\">\n                {antallDagerMedTid === 0 ? (\n                    <FormattedMessage id=\"arbeidstidMånedTittel.iPeriodePanel.info.ingenDager\" />\n                ) : (\n                    <FormattedMessage\n                        id=\"arbeidstidMånedTittel.iPeriodePanel.info\"\n                        values={{ dager: antallDagerMedTid }}\n                    />\n                )}\n            </Normaltekst>\n        </Element>\n    );\n};\n\nexport default ArbeidstidMånedTittel;\n","import React, { useState } from 'react';\nimport { DateRange, dateToISOString, InputTime } from '@navikt/sif-common-formik/lib';\nimport {\n    DateDurationMap,\n    DurationWeekdays,\n    getDatesWithDurationLongerThanZero,\n    getDurationsInDateRange,\n    getNumberDurationForWeekday,\n    getWeekdayFromDate,\n    removeDatesFromDateDurationMap,\n} from '@navikt/sif-common-utils';\nimport Ekspanderbartpanel from 'nav-frontend-ekspanderbartpanel';\nimport { TidsbrukKalender } from '../..';\nimport { TidEnkeltdagEndring } from '../../tid/tid-enkeltdag-dialog/TidEnkeltdagForm';\nimport { ArbeidsforholdType } from '../../types';\nimport ArbeidstidEnkeltdagDialog from '../arbeidstid-enkeltdag-dialog/ArbeidstidEnkeltdagDialog';\nimport ArbeidstidEnkeltdagTekst from './components/arbeidstid-enkeltdag-tekst/ArbeidstidEnkeltdagTekst';\nimport ArbeidstidMånedTittel from './components/arbeidstid-måned-tittel/ArbeidstidMånedTittel';\n\nexport interface ArbeidstidKalenderProps {\n    måned: DateRange;\n    arbeidsstedNavn: string;\n    arbeidsforholdType: ArbeidsforholdType;\n    tidArbeidstid: DateDurationMap;\n    utilgjengeligeDatoer?: Date[];\n    månedTittelHeadingLevel?: number;\n    periode: DateRange;\n    skjulIngenTidEnkeltdag?: boolean;\n    åpentEkspanderbartPanel?: boolean;\n    arbeiderNormaltTimerFasteUkedager?: DurationWeekdays;\n    månedTittelRenderer?: (måned: DateRange) => React.ReactNode;\n    onEnkeltdagChange?: (evt: TidEnkeltdagEndring) => void;\n    onRequestEdit?: (tid: DateDurationMap) => void;\n}\n\nconst ArbeidstidKalender: React.FunctionComponent<ArbeidstidKalenderProps> = ({\n    måned,\n    arbeidsstedNavn,\n    arbeidsforholdType,\n    tidArbeidstid,\n    utilgjengeligeDatoer,\n    månedTittelHeadingLevel = 2,\n    periode,\n    åpentEkspanderbartPanel,\n    arbeiderNormaltTimerFasteUkedager,\n    skjulIngenTidEnkeltdag,\n    månedTittelRenderer,\n    onEnkeltdagChange,\n}) => {\n    const [editDate, setEditDate] = useState<{ dato: Date; tid: Partial<InputTime> } | undefined>();\n\n    const dager: DateDurationMap = getDurationsInDateRange(tidArbeidstid, måned);\n    const dagerMedTid = getDatesWithDurationLongerThanZero(dager);\n    const weekday = editDate ? getWeekdayFromDate(editDate.dato) : undefined;\n\n    const handleKalenderDatoClick = (dato: Date) => {\n        const tid: Partial<InputTime> = dager[dateToISOString(dato)] || {\n            hours: '',\n            minutes: '',\n        };\n        setEditDate({ dato, tid });\n    };\n\n    return (\n        <Ekspanderbartpanel\n            renderContentWhenClosed={false}\n            apen={åpentEkspanderbartPanel}\n            tittel={\n                månedTittelRenderer ? (\n                    månedTittelRenderer(måned)\n                ) : (\n                    <ArbeidstidMånedTittel\n                        måned={måned}\n                        headingLevel={månedTittelHeadingLevel}\n                        antallDagerMedTid={dagerMedTid.length}\n                    />\n                )\n            }>\n            <TidsbrukKalender\n                periode={måned}\n                dager={dager}\n                utilgjengeligeDatoer={utilgjengeligeDatoer}\n                skjulTommeDagerIListe={true}\n                visOpprinneligTid={false}\n                tidRenderer={({ tid, prosent }) => (\n                    <ArbeidstidEnkeltdagTekst tid={tid} prosent={prosent} skjulIngenTid={skjulIngenTidEnkeltdag} />\n                )}\n                onDateClick={onEnkeltdagChange ? handleKalenderDatoClick : undefined}\n            />\n            {editDate && onEnkeltdagChange && (\n                <ArbeidstidEnkeltdagDialog\n                    isOpen={editDate !== undefined}\n                    formProps={{\n                        dato: editDate.dato,\n                        tid: editDate.tid,\n                        periode,\n                        maksTid:\n                            weekday && arbeiderNormaltTimerFasteUkedager\n                                ? getNumberDurationForWeekday(arbeiderNormaltTimerFasteUkedager, weekday)\n                                : undefined,\n                        onSubmit: (evt) => {\n                            setEditDate(undefined);\n                            const dagerMedTid = utilgjengeligeDatoer\n                                ? removeDatesFromDateDurationMap(evt.dagerMedTid, utilgjengeligeDatoer)\n                                : evt.dagerMedTid;\n                            setTimeout(() => {\n                                /** TimeOut pga komponent unmountes */\n                                onEnkeltdagChange({ ...evt, dagerMedTid });\n                            });\n                        },\n                        onCancel: () => setEditDate(undefined),\n                    }}\n                    arbeidsstedNavn={arbeidsstedNavn}\n                    arbeidsforholdType={arbeidsforholdType}\n                />\n            )}\n        </Ekspanderbartpanel>\n    );\n};\n\nexport default ArbeidstidKalender;\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { ISODate, ISODateToDate, ISODuration, ISODurationToDuration } from '@navikt/sif-common-utils';\nimport dayjs from 'dayjs';\nimport groupBy from 'lodash.groupby';\nimport EkspanderbartPanel from 'nav-frontend-ekspanderbartpanel';\nimport DagerMedTidListe from '../../common/dager-med-tid-liste/DagerMedTidListe';\nimport { DagMedTid } from '../../types';\n\ninterface ISODagMedTid {\n    dato: ISODate;\n    tid: ISODuration;\n}\n\ninterface Props {\n    dager: ISODagMedTid[];\n}\n\nconst TidEnkeltdager: React.FunctionComponent<Props> = ({ dager }) => {\n    const days: DagMedTid[] = [];\n    dager.forEach((dag) => {\n        const dato = ISODateToDate(dag.dato);\n        const tid = ISODurationToDuration(dag.tid);\n        if (dato && tid) {\n            days.push({ dato, tid });\n        }\n    });\n\n    const ingenDagerRegistrertMelding = <FormattedMessage id=\"dagerMedTid.ingenDagerRegistrert\" />;\n    if (dager.length === 0) {\n        return ingenDagerRegistrertMelding;\n    }\n\n    const months = groupBy(days, ({ dato }) => `${dato.getFullYear()}.${dato.getMonth()}`);\n    return (\n        <div>\n            {Object.keys(months).map((key) => {\n                const dagerMedTid = months[key];\n                if (dagerMedTid.length === 0) {\n                    return ingenDagerRegistrertMelding;\n                }\n                return (\n                    <Box margin=\"m\" key={key}>\n                        <EkspanderbartPanel\n                            tittel={\n                                <span style={{ textTransform: 'capitalize', fontSize: '1rem' }}>\n                                    {dayjs(dagerMedTid[0].dato).format('MMMM YYYY')}\n                                </span>\n                            }>\n                            <DagerMedTidListe dagerMedTid={dagerMedTid} viseUke={true} />\n                        </EkspanderbartPanel>\n                    </Box>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default TidEnkeltdager;\n","import React from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport { Time } from '@navikt/sif-common-core/lib/types/Time';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { ISODuration, ISODurationToDuration } from '@navikt/sif-common-utils';\n\ninterface TidFasteDagerType {\n    mandag?: ISODuration;\n    tirsdag?: ISODuration;\n    onsdag?: ISODuration;\n    torsdag?: ISODuration;\n    fredag?: ISODuration;\n}\n\ninterface Props {\n    fasteDager?: TidFasteDagerType;\n}\n\nconst formatTime = (intl: IntlShape, time: Partial<Time>): string => {\n    const timer = time.hours || '0';\n    const minutter = time.minutes || '0';\n    return intlHelper(intl, 'timerOgMinutter', { timer, minutter });\n};\n\nconst TidFasteDager: React.FunctionComponent<Props> = ({ fasteDager }) => {\n    const intl = useIntl();\n\n    if (fasteDager) {\n        const days = Object.keys(fasteDager).filter((day) => fasteDager[day] !== undefined);\n        if (days.length > 0) {\n            return (\n                <ul style={{ marginTop: 0 }}>\n                    {days.map((day, idx) => {\n                        const time = ISODurationToDuration(fasteDager[day]);\n                        return (\n                            <li key={idx} style={{ marginBottom: '.25rem' }}>\n                                {`${intlHelper(intl, `${day}er.caps`)}: ${time ? formatTime(intl, time) : 0}`}\n                            </li>\n                        );\n                    })}\n                </ul>\n            );\n        }\n    }\n    return <>{intlHelper(intl, 'dagerMedTid.ingenDagerRegistrert')}</>;\n};\n\nexport default TidFasteDager;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { FormikTimeInput, TestProps } from '@navikt/sif-common-formik/lib';\nimport { ValidationError, ValidationResult } from '@navikt/sif-common-formik/lib/validation/types';\nimport { Weekday } from '@navikt/sif-common-utils/lib';\nimport { getTidFasteUkerdagerInputMessages } from './tidFasteUkerdagerInputMessages';\nimport './tidFasteUkedagerInput.less';\n\ninterface OwnProps {\n    name: string;\n    disabledDays?: Weekday[];\n    hideDisabledDays?: boolean;\n    validateDag?: (dagNavn: string, value: any) => ValidationResult<ValidationError>;\n}\n\nexport type TidFasteUkedagerInputProps = OwnProps & TestProps;\n\nconst bem = bemUtils('tidFasteUkedagerInput');\n\nconst isWeekdayDisabled = (disabledDays: Weekday[] | undefined, dag: Weekday): boolean =>\n    disabledDays ? disabledDays.some((d) => d === dag) : false;\n\nconst TidFasteUkedagerInput = ({\n    name,\n    validateDag,\n    disabledDays,\n    hideDisabledDays,\n    'data-testid': testId,\n}: TidFasteUkedagerInputProps) => {\n    const txt = getTidFasteUkerdagerInputMessages(useIntl().locale);\n\n    const renderWeekdayTimeInput = (weekday: Weekday, weekdayLabel: string, validationDayName: string) => {\n        const disabled = isWeekdayDisabled(disabledDays, weekday);\n        return disabled && hideDisabledDays ? null : (\n            <FormikTimeInput\n                label={weekdayLabel}\n                name={`${name}.${weekday}`}\n                disabled={disabled}\n                timeInputLayout={{\n                    direction: 'vertical',\n                    compact: true,\n                }}\n                data-testid={testId ? `${testId}__${weekday}` : undefined}\n                validate={validateDag ? (value) => validateDag(validationDayName, value) : undefined}\n            />\n        );\n    };\n    const hasHiddenDays = disabledDays !== undefined && disabledDays.length > 0 && hideDisabledDays;\n    return (\n        <Box margin=\"l\">\n            <div className={bem.classNames(bem.block, bem.modifierConditional('withHiddenDays', hasHiddenDays))}>\n                {renderWeekdayTimeInput(Weekday.monday, txt.Mandager, txt.mandag)}\n                {renderWeekdayTimeInput(Weekday.tuesday, txt.Tirsdager, txt.tirsdag)}\n                {renderWeekdayTimeInput(Weekday.wednesday, txt.Onsdager, txt.onsdag)}\n                {renderWeekdayTimeInput(Weekday.thursday, txt.Torsdager, txt.torsdag)}\n                {renderWeekdayTimeInput(Weekday.friday, txt.Fredager, txt.fredag)}\n            </div>\n        </Box>\n    );\n};\n\nexport default TidFasteUkedagerInput;\n","import React from 'react';\nimport { DateRange, dateToISOString } from '@navikt/sif-common-formik/lib';\nimport { Weekday } from '@navikt/sif-common-utils/lib';\nimport dayjs from 'dayjs';\nimport { groupBy } from 'lodash';\nimport { Daginfo, Ukeinfo } from '../../types';\n\nconst getEmptyElements = (num: number): JSX.Element[] | undefined => {\n    return num === 0\n        ? undefined\n        : Array.from({ length: num }).map((_, index) => React.createElement('span', { key: index }));\n};\n\nconst getWeekdayFromISOWeekday = (isoWeekday: number) => {\n    switch (isoWeekday) {\n        case 1:\n            return Weekday.monday;\n        case 2:\n            return Weekday.tuesday;\n        case 3:\n            return Weekday.wednesday;\n        case 4:\n            return Weekday.thursday;\n        case 5:\n            return Weekday.friday;\n        default:\n            return undefined;\n    }\n};\n\nconst getDagInfo = (date: Date): Daginfo => {\n    const dayjsDato = dayjs(date);\n    return {\n        isoDate: dateToISOString(dayjsDato.toDate()),\n        dato: dayjsDato.toDate(),\n        ukedag: dayjsDato.isoWeekday(),\n        ukenummer: dayjsDato.isoWeek(),\n        år: dayjsDato.year(),\n        årOgUke: `${dayjsDato.year()}.${dayjsDato.isoWeek()}`,\n        labelDag: `${dayjsDato.format('dddd')}`,\n        labelDato: `${dayjsDato.format('DD.MM.YYYY')}`,\n        labelFull: `${dayjsDato.format('dddd')} ${dayjsDato.format('D. MMMM')}`,\n        weekday: getWeekdayFromISOWeekday(dayjsDato.isoWeekday()),\n    };\n};\n\nconst getDagInfoForPeriode = ({ from, to }: DateRange): Daginfo[] => {\n    const dager: Daginfo[] = [];\n    let dayjsDato = dayjs(from);\n    while (dayjsDato.isSameOrBefore(to, 'day')) {\n        const ukedag = dayjsDato.isoWeekday();\n        if (ukedag <= 5) {\n            dager.push(getDagInfo(dayjsDato.toDate()));\n        }\n        dayjsDato = dayjsDato.add(1, 'day');\n    }\n    return dager;\n};\n\nconst getUkerFraDager = (dager: Daginfo[]): Ukeinfo[] => {\n    const ukerOgDager = groupBy(dager, (dag) => dag.årOgUke);\n    const uker = Object.keys(ukerOgDager).map((key): Ukeinfo => {\n        const dagerIUke = ukerOgDager[key];\n        return { år: dagerIUke[0].år, ukenummer: dagerIUke[0].ukenummer, dager: dagerIUke };\n    });\n    return uker;\n};\n\nconst getTidKalenderFieldName = (fieldName: string, dag: Daginfo): string => `${fieldName}.${dag.isoDate}`;\n\nconst getForegåendeDagerIUke = (dag: Daginfo): Daginfo[] => {\n    const dager = getEmptyElements(dag.ukedag - 1);\n    if (dager && dager.length > 0) {\n        const firstDayOfWeek = dayjs(dag.dato).subtract(dag.ukedag - 1, 'days');\n        return dager.map((c, idx) => {\n            const date = firstDayOfWeek.add(idx, 'days').toDate();\n            return getDagInfo(date);\n        });\n    }\n    return [];\n};\n\nexport const tidUkerInputUtils = {\n    getDagInfo,\n    getDagInfoForPeriode,\n    getTidKalenderFieldName,\n    getForegåendeDagerIUke,\n    getUkerFraDager,\n};\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { FormikTimeInput } from '@navikt/sif-common-formik';\nimport { DateDurationMap, isDateInDates } from '@navikt/sif-common-utils';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { TidPerDagValidator } from '../..';\nimport { Daginfo, Ukeinfo } from '../../types';\nimport { tidUkerInputUtils } from '../tid-uker-input/tidUkerUtils';\n\ntype DagLabelRenderer = (dag: Daginfo) => React.ReactNode;\n\ninterface Props {\n    getFieldName: (dag: Daginfo) => string;\n    ukeinfo: Ukeinfo;\n    opprinneligTid?: DateDurationMap;\n    isNarrow: boolean;\n    isWide: boolean;\n    utilgjengeligeDatoer?: Date[];\n    visSomListe?: boolean;\n    tidPerDagValidator?: TidPerDagValidator;\n    ukeTittelRenderer?: (uke: Ukeinfo) => React.ReactNode;\n    dagLabelRenderer?: (dag: Daginfo) => React.ReactNode;\n}\n\nconst renderDagLabel = (dag: Daginfo, customRenderer?: DagLabelRenderer): JSX.Element => {\n    return (\n        <span className={bem.element('dag__label')}>\n            {customRenderer ? (\n                customRenderer(dag)\n            ) : (\n                <>\n                    <span className={bem.element('dag__label__dagnavn')}>{dag.labelDag}</span>\n                    <span className={bem.element('dag__label__dato')}>{dag.labelDato}</span>\n                </>\n            )}\n        </span>\n    );\n};\n\nconst bem = bemUtils('tidUkerInput');\n\nconst TidUkeInput: React.FunctionComponent<Props> = ({\n    ukeinfo,\n    utilgjengeligeDatoer,\n    visSomListe,\n    getFieldName,\n    dagLabelRenderer,\n    tidPerDagValidator,\n    ukeTittelRenderer,\n    isWide,\n}) => {\n    const { dager } = ukeinfo;\n\n    return (\n        <div className={bem.element('uke')}>\n            {ukeTittelRenderer ? (\n                ukeTittelRenderer(ukeinfo)\n            ) : (\n                <Undertittel tag=\"h2\">\n                    <FormattedMessage id=\"ukeÅr\" values={{ ...ukeinfo }} />\n                </Undertittel>\n            )}\n\n            <div className={bem.element('uke__ukedager', isWide && visSomListe !== true ? 'grid' : 'liste')}>\n                {tidUkerInputUtils.getForegåendeDagerIUke(dager[0]).map((dag) => (\n                    <div className={bem.element('dag', 'utenforPeriode')} key={dag.isoDate} aria-hidden={true}>\n                        {renderDagLabel(dag, dagLabelRenderer)}\n                        <div className={bem.element('dag__utenforPeriodeIkon')}>-</div>\n                    </div>\n                ))}\n                {dager.map((dag) => {\n                    const erUtilgjengelig = isDateInDates(dag.dato, utilgjengeligeDatoer);\n                    return (\n                        <div\n                            key={dag.isoDate}\n                            className={bem.element('dag', erUtilgjengelig ? 'utilgjengelig' : undefined)}>\n                            {erUtilgjengelig ? (\n                                <span />\n                            ) : (\n                                <FormikTimeInput\n                                    name={getFieldName(dag)}\n                                    label={renderDagLabel(dag, dagLabelRenderer)}\n                                    timeInputLayout={{\n                                        direction: 'horizontal',\n                                    }}\n                                    validate={tidPerDagValidator ? tidPerDagValidator(dag.labelFull) : undefined}\n                                />\n                            )}\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n};\n\nexport default TidUkeInput;\n","import React from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport ResponsivePanel from '@navikt/sif-common-core/lib/components/responsive-panel/ResponsivePanel';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { DateRange } from '@navikt/sif-common-formik';\nimport { DateDurationMap, isDateInDates } from '@navikt/sif-common-utils/lib';\nimport { Daginfo, TidPerDagValidator, Ukeinfo } from '../../types';\nimport TidUkeInput from '../tid-uke-input/TidUkeInput';\nimport { tidUkerInputUtils } from './tidUkerUtils';\nimport './tidUkerInput.less';\n\nconst getTidKalenderFieldName = (fieldName: string, dag: Daginfo): string => `${fieldName}.${dag.isoDate}`;\n\ninterface Props {\n    fieldName: string;\n    periode: DateRange;\n    brukPanel?: boolean;\n    opprinneligTid?: DateDurationMap;\n    utilgjengeligeDatoer?: Date[];\n    ukeTittelRenderer?: (uke: Ukeinfo) => React.ReactNode;\n    tidPerDagValidator?: TidPerDagValidator;\n}\n\nconst bem = bemUtils('tidUkerInput');\n\nexport const TidUkerInput: React.FunctionComponent<Props> = ({\n    fieldName,\n    periode,\n    brukPanel,\n    opprinneligTid,\n    utilgjengeligeDatoer,\n    ukeTittelRenderer,\n    tidPerDagValidator,\n}) => {\n    const isNarrow = useMediaQuery({ maxWidth: 400 });\n    const isWide = useMediaQuery({ minWidth: 1050 });\n\n    const dager = tidUkerInputUtils.getDagInfoForPeriode(periode);\n    const uker = tidUkerInputUtils\n        .getUkerFraDager(dager)\n        .filter(\n            (uke) =>\n                uke.dager.filter((dag) => isDateInDates(dag.dato, utilgjengeligeDatoer)).length !== uke.dager.length\n        );\n\n    return (\n        <div className={bem.classNames(bem.block, bem.modifier('inlineForm'))}>\n            {uker.map((uke) => {\n                const content = (\n                    <TidUkeInput\n                        ukeTittelRenderer={ukeTittelRenderer}\n                        getFieldName={(dag) => getTidKalenderFieldName(fieldName, dag)}\n                        ukeinfo={uke}\n                        opprinneligTid={opprinneligTid}\n                        utilgjengeligeDatoer={utilgjengeligeDatoer}\n                        isNarrow={isNarrow}\n                        isWide={isWide}\n                        visSomListe={true}\n                        tidPerDagValidator={tidPerDagValidator}\n                    />\n                );\n                return (\n                    <div key={uke.ukenummer} className={bem.element('ukeWrapper')}>\n                        {brukPanel ? <ResponsivePanel>{content}</ResponsivePanel> : content}\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default TidUkerInput;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport Knapperad from '@navikt/sif-common-core/lib/components/knapperad/Knapperad';\nimport { DateRange } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { getTypedFormComponents, InputTime } from '@navikt/sif-common-formik/lib';\nimport getFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { DateDurationMap, ensureDuration, getValidDurations, ISODate } from '@navikt/sif-common-utils';\nimport dayjs from 'dayjs';\nimport isoWeek from 'dayjs/plugin/isoWeek';\nimport weekOfYear from 'dayjs/plugin/weekOfYear';\nimport Knapp from 'nav-frontend-knapper';\nimport { Normaltekst, Systemtittel } from 'nav-frontend-typografi';\nimport { TidPerDagValidator } from '../../types';\nimport TidUkerInput from '../tid-uker-input/TidUkerInput';\n\ndayjs.extend(isoWeek);\ndayjs.extend(weekOfYear);\n\ntype FormDatoTidMap = { [isoDate: ISODate]: Partial<InputTime> };\n\ninterface Props {\n    tittel: JSX.Element;\n    intro?: JSX.Element;\n    periode: DateRange;\n    tid: DateDurationMap;\n    tidPerDagValidator: TidPerDagValidator;\n    onSubmit: (tid: DateDurationMap) => void;\n    onCancel?: () => void;\n}\n\nenum FormField {\n    tid = 'tid',\n}\ninterface FormValues {\n    [FormField.tid]: FormDatoTidMap;\n}\n\nconst Form = getTypedFormComponents<FormField, FormValues, ValidationError>();\n\nconst TidKalenderForm = ({ periode, tid, tittel, intro, tidPerDagValidator, onSubmit, onCancel }: Props) => {\n    const intl = useIntl();\n\n    if (dayjs(periode.from).isAfter(periode.to, 'day')) {\n        return <div>Fra dato er før til-dato</div>;\n    }\n\n    const onFormikSubmit = ({ tid = {} }: Partial<FormValues>) => {\n        const data: DateDurationMap = {};\n        Object.keys(tid).forEach((key) => {\n            data[key] = ensureDuration(tid[key]);\n        });\n        onSubmit(getValidDurations(data));\n    };\n\n    const mapDatoTidToFormDatoTid = (tid: DateDurationMap): FormDatoTidMap => {\n        const data: FormDatoTidMap = {};\n        Object.keys(tid).forEach((key) => {\n            data[key] = tid[key];\n        });\n        return data;\n    };\n\n    return (\n        <Normaltekst tag=\"div\">\n            <Form.FormikWrapper\n                initialValues={{ tid: mapDatoTidToFormDatoTid(tid) }}\n                onSubmit={onFormikSubmit}\n                renderForm={() => {\n                    return (\n                        <Form.Form\n                            onCancel={onCancel}\n                            formErrorHandler={getFormErrorHandler(intl, 'tidsperiodeForm')}\n                            includeValidationSummary={true}\n                            includeButtons={false}\n                            formFooter={\n                                <FormBlock margin=\"l\">\n                                    <Knapperad align=\"left\">\n                                        <Knapp htmlType=\"submit\" type=\"hoved\">\n                                            <FormattedMessage id=\"tidKalenderForm.ok.label\" />\n                                        </Knapp>\n                                        <Knapp htmlType=\"button\" type=\"standard\" onClick={onCancel}>\n                                            <FormattedMessage id=\"tidKalenderForm.avbryt.label\" />\n                                        </Knapp>\n                                    </Knapperad>\n                                </FormBlock>\n                            }>\n                            <Systemtittel tag=\"h1\">{tittel}</Systemtittel>\n                            {intro ? <Box margin=\"l\">{intro}</Box> : undefined}\n                            <TidUkerInput\n                                fieldName={FormField.tid}\n                                periode={periode}\n                                brukPanel={false}\n                                tidPerDagValidator={tidPerDagValidator}\n                            />\n                        </Form.Form>\n                    );\n                }}\n            />\n        </Normaltekst>\n    );\n};\n\nexport default TidKalenderForm;\n","import React from 'react';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { Duration, durationsAreEqual, ensureDuration } from '@navikt/sif-common-utils';\nimport { Undertekst } from 'nav-frontend-typografi';\nimport DurationText from '../../common/duration-text/DurationText';\nimport { TidRenderer } from './TidsbrukKalender';\nimport './tidsbrukKalenderDag.less';\n\nexport type TidsbrukKalenderDagFooterRenderer = (dato: Date) => JSX.Element | undefined;\n\ninterface Props {\n    dato: Date;\n    tid?: Duration;\n    prosent?: number;\n    tidOpprinnelig?: Duration;\n    visOpprinneligTid?: boolean;\n    erUtilgjengelig?: boolean;\n    tidRenderer?: TidRenderer;\n    opprinneligTidRenderer?: TidRenderer;\n    footerRenderer?: TidsbrukKalenderDagFooterRenderer;\n}\n\nconst bem = bemUtils('tidsbrukKalenderDag');\n\nconst TidsbrukKalenderDag: React.FunctionComponent<Props> = ({\n    dato,\n    prosent,\n    tid,\n    tidOpprinnelig,\n    visOpprinneligTid,\n    tidRenderer,\n    opprinneligTidRenderer,\n    footerRenderer,\n}) => {\n    const erEndret = durationsAreEqual(tid, tidOpprinnelig) === false;\n\n    const renderTid = (duration: Duration) =>\n        tidRenderer ? tidRenderer({ tid: duration, dato, prosent }) : <DurationText duration={duration} />;\n\n    const renderOpprinneligTid = (duration: Duration) =>\n        opprinneligTidRenderer ? (\n            opprinneligTidRenderer({ tid: duration, dato, prosent })\n        ) : (\n            <DurationText duration={duration} />\n        );\n\n    return (\n        <>\n            {tid && (\n                <>\n                    {erEndret ? (\n                        <>\n                            <span className={bem.block}>{renderTid(ensureDuration(tid))}</span>\n                            {visOpprinneligTid && (\n                                <>\n                                    {tidOpprinnelig ? (\n                                        <div className={bem.element('opprinneligTidWrapper')}>\n                                            <Undertekst tag=\"span\" className={bem.element('opprinneligTid')}>\n                                                (<span className=\"sr-only\">Endret fra: </span>\n                                                {renderOpprinneligTid(tidOpprinnelig)})\n                                            </Undertekst>\n                                        </div>\n                                    ) : (\n                                        <Undertekst>(lagt til)</Undertekst>\n                                    )}\n                                </>\n                            )}\n                        </>\n                    ) : (\n                        <span className={bem.block}>\n                            {renderTid(tid)} <span className=\"sr-only\">(uendret)</span>\n                        </span>\n                    )}\n                    {footerRenderer && <>{footerRenderer(dato)}</>}\n                </>\n            )}\n            {tidOpprinnelig && !tid && <>{renderTid(tidOpprinnelig)}</>}\n        </>\n    );\n};\n\nexport default TidsbrukKalenderDag;\n","import React from 'react';\nimport AriaAlternative from '@navikt/sif-common-core/lib/components/aria/AriaAlternative';\nimport { DateRange, InputTime } from '@navikt/sif-common-formik/lib';\nimport { DateDurationMap, dateToISODate, Duration, ensureDuration } from '@navikt/sif-common-utils';\nimport dayjs from 'dayjs';\nimport CalendarGrid from '../../common/calendar-grid/CalendarGrid';\nimport TidsbrukKalenderDag, { TidsbrukKalenderDagFooterRenderer } from './TidsbrukKalenderDag';\n\nexport type TidRenderer = (tid: { tid: InputTime; dato: Date; prosent?: number }) => React.ReactNode;\n\ntype KalenderDag = {\n    tid?: Partial<InputTime>;\n    prosent?: number;\n    tidOpprinnelig?: Duration;\n};\n\ntype Kalenderdager = {\n    [dato: string]: KalenderDag;\n};\ninterface Props {\n    periode: DateRange;\n    dager: DateDurationMap;\n    dagerOpprinnelig?: DateDurationMap;\n    utilgjengeligeDatoer?: Date[];\n    utilgjengeligDagInfo?: string;\n    skjulTommeDagerIListe?: boolean;\n    visOpprinneligTid?: boolean;\n    onDateClick?: (date: Date) => void;\n    tomUkeContentRenderer?: () => React.ReactNode;\n    tidRenderer?: TidRenderer;\n    opprinneligTidRenderer?: TidRenderer;\n    footerRenderer?: TidsbrukKalenderDagFooterRenderer;\n}\n\nconst TidsbrukKalender: React.FunctionComponent<Props> = ({\n    periode,\n    dager,\n    dagerOpprinnelig = {},\n    utilgjengeligeDatoer,\n    utilgjengeligDagInfo,\n    skjulTommeDagerIListe,\n    visOpprinneligTid,\n    onDateClick,\n    tidRenderer,\n    opprinneligTidRenderer,\n    tomUkeContentRenderer,\n    footerRenderer,\n}) => {\n    const kalenderdager: Kalenderdager = {};\n    Object.keys(dager).forEach((key) => {\n        const dag = dager[key];\n        kalenderdager[key] = {\n            ...kalenderdager[key],\n            tid: {\n                hours: dag.hours,\n                minutes: dag.minutes,\n            },\n            prosent: dag.percentage,\n        };\n    });\n\n    Object.keys(dagerOpprinnelig).forEach((key) => {\n        kalenderdager[key] = {\n            ...kalenderdager[key],\n            tidOpprinnelig: ensureDuration(dagerOpprinnelig[key]),\n            prosent: (dagerOpprinnelig as any)[key].prosent,\n        };\n    });\n\n    return (\n        <CalendarGrid\n            month={periode}\n            disabledDates={utilgjengeligeDatoer}\n            disabledDateInfo={utilgjengeligDagInfo}\n            hideEmptyContentInListMode={skjulTommeDagerIListe}\n            hideWeeksWithOnlyDisabledContent={true}\n            onDateClick={onDateClick}\n            allDaysInWeekDisabledContentRenderer={tomUkeContentRenderer}\n            dateRendererShort={(date: Date) => (\n                <AriaAlternative\n                    visibleText={dayjs(date).format('D.')}\n                    ariaText={dayjs(date).format('dddd DD. MMM YYYY')}\n                />\n            )}\n            dateContentRenderer={(dato) => {\n                const dag = kalenderdager[dateToISODate(dato)];\n                return dag ? (\n                    <TidsbrukKalenderDag\n                        dato={dato}\n                        tid={dag.tid ? ensureDuration(dag.tid) : undefined}\n                        prosent={dag.prosent}\n                        tidRenderer={tidRenderer}\n                        opprinneligTidRenderer={opprinneligTidRenderer}\n                        tidOpprinnelig={dag.tidOpprinnelig || { hours: '0', minutes: '0' }}\n                        visOpprinneligTid={visOpprinneligTid}\n                        footerRenderer={footerRenderer}\n                    />\n                ) : (\n                    <span />\n                );\n            }}\n        />\n    );\n};\n\nexport default TidsbrukKalender;\n","import { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { Duration, ISODate, ISODuration } from '@navikt/sif-common-utils/lib';\n\nexport * from './Daginfo';\nexport * from './Ukeinfo';\nexport * from '../arbeidstid/arbeidstid-periode-dialog/types';\n\nexport enum ArbeidsforholdType {\n    ANSATT = 'ANSATT',\n    FRILANSER = 'FRILANSER',\n    SELVSTENDIG = 'SELVSTENDIG',\n}\n\nexport type TidPerDagValidator = (dag: string) => (tid: Duration) => ValidationError | undefined;\n\nexport enum ArbeiderIPeriodenSvar {\n    'somVanlig' = 'SOM_VANLIG',\n    'redusert' = 'REDUSERT',\n    'heltFravær' = 'HELT_FRAVÆR',\n}\n\nexport type ArbeidIPeriodeIntlValues = {\n    hvor: string;\n    skalEllerHarJobbet: string;\n    timer: string;\n    fra: string;\n    til: string;\n    iPerioden: string;\n};\n\nexport interface DagMedTid {\n    dato: Date;\n    tid: Duration;\n    normaltid?: Duration;\n}\n\nexport interface ArbeidstimerApiData {\n    normalTimer: ISODuration;\n    faktiskTimer: ISODuration;\n}\n\nexport interface ArbeidstimerFasteDagerApiData {\n    mandag?: ArbeidstimerApiData;\n    tirsdag?: ArbeidstimerApiData;\n    onsdag?: ArbeidstimerApiData;\n    torsdag?: ArbeidstimerApiData;\n    fredag?: ArbeidstimerApiData;\n}\n\nexport interface ArbeidstidEnkeltdagApiData {\n    dato: ISODate;\n    arbeidstimer: ArbeidstimerApiData;\n}\n","import { getNumberValidator } from '@navikt/sif-common-formik/lib/validation';\nimport getTimeValidator from '@navikt/sif-common-formik/lib/validation/getTimeValidator';\nimport { IntlErrorObject } from '@navikt/sif-common-formik/lib/validation/types';\nimport {\n    durationToDecimalDuration,\n    DurationWeekdays,\n    summarizeDurationInDurationWeekdays,\n} from '@navikt/sif-common-utils/lib';\n\nexport const getArbeidstidFastProsentValidator =\n    (minMax?: { min: number; max: number }) =>\n    (value: any): IntlErrorObject | undefined => {\n        const minMaxOptions = minMax || {\n            min: 0,\n            max: 100,\n        };\n        const error = getNumberValidator({ required: true, ...minMaxOptions })(value);\n        return error\n            ? {\n                  key: error,\n                  values: { ...minMaxOptions },\n              }\n            : undefined;\n    };\n\nexport const validateFasteArbeidstimerIUke = (\n    fasteDager: DurationWeekdays | undefined\n): IntlErrorObject | undefined => {\n    const timer = fasteDager ? durationToDecimalDuration(summarizeDurationInDurationWeekdays(fasteDager)) : 0;\n    if (timer === 0) {\n        return {\n            key: `ingenTidRegistrert`,\n        };\n    }\n    if (timer > 24 * 5) {\n        return {\n            key: `forMangeTimer`,\n        };\n    }\n    return undefined;\n};\n\nexport const getArbeidstimerFastDagValidator = () =>\n    getTimeValidator({\n        max: { hours: 24, minutes: 0 },\n        min: { hours: 0, minutes: 0 },\n    });\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { DateRange, getTypedFormComponents } from '@navikt/sif-common-formik';\nimport datepickerUtils from '@navikt/sif-common-formik/lib/components/formik-datepicker/datepickerUtils';\nimport { getDateRangeValidator, getRequiredFieldValidator } from '@navikt/sif-common-formik/lib/validation';\nimport getIntlFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport {\n    dateToISODate,\n    DurationWeekdays,\n    ensureCompleteDurationWeekdays,\n    getWeekdayDOW,\n    Weekday,\n} from '@navikt/sif-common-utils';\nimport { InputDateString } from 'nav-datovelger/lib/types';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { TidFasteUkedagerInput } from '../../../../tid';\nimport { ArbeiderIPeriodenSvar, ArbeidIPeriodeIntlValues } from '../../../../types';\nimport { getArbeidstidPeriodeIntl } from '../../i18n/arbeidstidPeriodeMessages';\nimport { ArbeidstidPeriodeData } from '../../types';\nimport { getArbeidstimerFastDagValidator, validateFasteArbeidstimerIUke } from './arbeidstidPeriodeFormValidation';\n\nexport interface ArbeidstidPeriodeFormProps {\n    arbeidsstedNavn: string;\n    periode: DateRange;\n    intlValues: ArbeidIPeriodeIntlValues;\n    utilgjengeligeUkedager?: Weekday[];\n    skjulUtilgjengeligeUkedager?: boolean;\n    visAlleSpørsmål?: boolean;\n    tekst?: {\n        tittel?: JSX.Element;\n        introduksjon?: JSX.Element;\n        okButton?: string;\n        cancelButton?: string;\n    };\n    onSubmit: (data: ArbeidstidPeriodeData) => void;\n    onCancel: () => void;\n}\n\nenum FormFields {\n    'fom' = 'fom',\n    'tom' = 'tom',\n    'heleSøknadsperioden' = 'heleSøknadsperioden',\n    'arbeiderHvordan' = 'arbeiderHvordan',\n    'tidFasteDager' = 'tidFasteDager',\n}\n\ninterface FormValues {\n    [FormFields.fom]: InputDateString;\n    [FormFields.tom]: InputDateString;\n    [FormFields.heleSøknadsperioden]?: boolean;\n    [FormFields.arbeiderHvordan]?: ArbeiderIPeriodenSvar;\n    [FormFields.tidFasteDager]?: DurationWeekdays;\n}\n\nconst initialFormValues: Partial<FormValues> = {};\n\nconst FormComponents = getTypedFormComponents<FormFields, FormValues, ValidationError>();\n\nconst ArbeidstidPeriodeForm: React.FunctionComponent<ArbeidstidPeriodeFormProps> = ({\n    arbeidsstedNavn,\n    periode,\n    intlValues,\n    utilgjengeligeUkedager,\n    skjulUtilgjengeligeUkedager,\n    tekst,\n    visAlleSpørsmål,\n    onSubmit,\n    onCancel,\n}) => {\n    const intl = useIntl();\n    const arbIntl = getArbeidstidPeriodeIntl(intl);\n\n    const onValidSubmit = (values: Partial<FormValues>) => {\n        const fom = datepickerUtils.getDateFromDateString(values.fom);\n        const tom = datepickerUtils.getDateFromDateString(values.tom);\n\n        if (!fom || !tom) {\n            throw new Error('ArbeidstidPeriodeForm. Ugyldig fom/tom ');\n        }\n\n        switch (values.arbeiderHvordan) {\n            case ArbeiderIPeriodenSvar.heltFravær:\n            case ArbeiderIPeriodenSvar.somVanlig:\n                onSubmit({ fom, tom, arbeiderHvordan: values.arbeiderHvordan });\n                break;\n            case ArbeiderIPeriodenSvar.redusert:\n                if (values.tidFasteDager) {\n                    onSubmit({\n                        fom,\n                        tom,\n                        arbeiderHvordan: values.arbeiderHvordan,\n                        tidFasteDager: ensureCompleteDurationWeekdays(values.tidFasteDager),\n                    });\n                } else {\n                    throw new Error('ArbeidstidPeriodeForm. Ugyldig tidFasteDager ');\n                }\n                break;\n        }\n    };\n\n    const disabledDaysOfWeekDayNumber = utilgjengeligeUkedager\n        ? utilgjengeligeUkedager.map((dag) => getWeekdayDOW(dag))\n        : [];\n\n    return (\n        <div>\n            <Undertittel tag=\"h1\" className=\"dialogFormTitle\">\n                {tekst?.tittel || arbIntl.intlText('arbeidstidPeriodeForm.tittel', { arbeidsstedNavn })}\n            </Undertittel>\n            {tekst?.introduksjon ? <Box margin=\"l\">{tekst.introduksjon}</Box> : undefined}\n            <FormBlock margin=\"xl\">\n                <FormComponents.FormikWrapper\n                    initialValues={initialFormValues}\n                    onSubmit={onValidSubmit}\n                    renderForm={({\n                        values: { fom, tom, tidFasteDager, arbeiderHvordan, heleSøknadsperioden },\n                        setFieldValue,\n                    }) => {\n                        const from = datepickerUtils.getDateFromDateString(fom);\n                        const to = datepickerUtils.getDateFromDateString(tom);\n\n                        const handleHeleSøknadsperiodenChange = (velgHeleSøknadsperioden?: boolean) => {\n                            if (velgHeleSøknadsperioden) {\n                                setFieldValue(FormFields.fom, dateToISODate(periode.from));\n                                setFieldValue(FormFields.tom, dateToISODate(periode.to));\n                            }\n                        };\n\n                        return (\n                            <FormComponents.Form\n                                onCancel={onCancel}\n                                formErrorHandler={getIntlFormErrorHandler(intl, 'arbeidstidPeriodeForm.validation')}\n                                includeValidationSummary={true}\n                                includeButtons={true}\n                                submitButtonLabel={\n                                    tekst?.okButton || arbIntl.intlText('arbeidstidPeriodeForm.submitButtonLabel')\n                                }\n                                cancelButtonLabel={\n                                    tekst?.cancelButton || arbIntl.intlText('arbeidstidPeriodeForm.cancelButtonLabel')\n                                }>\n                                <div style={{ maxWidth: '20rem' }}>\n                                    <FormBlock>\n                                        <FormComponents.DateIntervalPicker\n                                            fromDatepickerProps={{\n                                                label: arbIntl.intlText('arbeidstidPeriodeForm.fraOgMed.label'),\n                                                'data-testid': 'fra-dato',\n                                                name: FormFields.fom,\n                                                disableWeekend: true,\n                                                fullScreenOnMobile: true,\n                                                fullscreenOverlay: true,\n                                                disabledDaysOfWeek: disabledDaysOfWeekDayNumber,\n                                                dayPickerProps: {\n                                                    initialMonth: periode.from,\n                                                },\n                                                disabled: heleSøknadsperioden === true,\n                                                minDate: periode.from,\n                                                maxDate: to || periode.to,\n                                                validate: getDateRangeValidator({\n                                                    required: true,\n                                                    onlyWeekdays: false,\n                                                    toDate: to,\n                                                    fromDate: from,\n                                                    min: periode.from,\n                                                    max: to || periode.to,\n                                                }).validateFromDate,\n                                            }}\n                                            toDatepickerProps={{\n                                                label: arbIntl.intlText('arbeidstidPeriodeForm.tilOgMed.label'),\n                                                name: FormFields.tom,\n                                                'data-testid': 'til-dato',\n                                                disableWeekend: true,\n                                                disabledDaysOfWeek: disabledDaysOfWeekDayNumber,\n                                                fullScreenOnMobile: true,\n                                                fullscreenOverlay: true,\n                                                minDate: from || periode.from,\n                                                maxDate: periode.to,\n                                                disabled: heleSøknadsperioden === true,\n                                                dayPickerProps: {\n                                                    initialMonth: from || periode.from,\n                                                },\n                                                validate: getDateRangeValidator({\n                                                    required: true,\n                                                    onlyWeekdays: false,\n                                                    toDate: to,\n                                                    fromDate: from,\n                                                    min: from || periode.from,\n                                                    max: periode.to,\n                                                }).validateToDate,\n                                            }}\n                                        />\n                                        <Box>\n                                            <FormComponents.Checkbox\n                                                label={intlHelper(intl, 'arbeidstidPeriodeForm.velgHelePerioden')}\n                                                name={FormFields.heleSøknadsperioden}\n                                                afterOnChange={handleHeleSøknadsperiodenChange}\n                                            />\n                                        </Box>\n                                    </FormBlock>\n                                </div>\n\n                                {((fom && tom) || visAlleSpørsmål) && (\n                                    <>\n                                        <FormBlock>\n                                            <FormComponents.RadioPanelGroup\n                                                name={FormFields.arbeiderHvordan}\n                                                legend={intlHelper(\n                                                    intl,\n                                                    'arbeidstidPeriodeForm.arbeiderIPerioden.spm',\n                                                    intlValues\n                                                )}\n                                                radios={[\n                                                    {\n                                                        label: intlHelper(\n                                                            intl,\n                                                            'arbeidstidPeriodeForm.arbeiderIPerioden.svar.jobberIkke'\n                                                        ),\n                                                        value: ArbeiderIPeriodenSvar.heltFravær,\n                                                        'data-testid': 'helt-fravær',\n                                                    },\n                                                    {\n                                                        label: intlHelper(\n                                                            intl,\n                                                            'arbeidstidPeriodeForm.arbeiderIPerioden.svar.jobberRedusert'\n                                                        ),\n                                                        value: ArbeiderIPeriodenSvar.redusert,\n                                                        'data-testid': 'jobber-redusert',\n                                                    },\n                                                    {\n                                                        label: intlHelper(\n                                                            intl,\n                                                            'arbeidstidPeriodeForm.arbeiderIPerioden.svar.jobberVanlig'\n                                                        ),\n                                                        value: ArbeiderIPeriodenSvar.somVanlig,\n                                                        'data-testid': 'som-vanlig',\n                                                    },\n                                                ]}\n                                                validate={(value) => {\n                                                    const error = getRequiredFieldValidator()(value);\n                                                    return error\n                                                        ? {\n                                                              key: error,\n                                                              values: intlValues,\n                                                          }\n                                                        : undefined;\n                                                }}\n                                            />\n                                        </FormBlock>\n                                        {arbeiderHvordan === ArbeiderIPeriodenSvar.redusert && (\n                                            <FormBlock>\n                                                <FormComponents.InputGroup\n                                                    legend={arbIntl.intlText(\n                                                        'arbeidstidPeriodeForm.tidFasteUkedager.label',\n                                                        intlValues\n                                                    )}\n                                                    validate={() => {\n                                                        const error = validateFasteArbeidstimerIUke(tidFasteDager);\n                                                        return error\n                                                            ? {\n                                                                  key: error.key,\n                                                                  values: intlValues,\n                                                              }\n                                                            : undefined;\n                                                    }}\n                                                    name={'fasteDager.gruppe' as any}>\n                                                    <TidFasteUkedagerInput\n                                                        name={FormFields.tidFasteDager}\n                                                        disabledDays={utilgjengeligeUkedager}\n                                                        hideDisabledDays={skjulUtilgjengeligeUkedager}\n                                                        data-testid=\"tid-ukedager\"\n                                                        validateDag={(dag, value) => {\n                                                            const error = getArbeidstimerFastDagValidator()(value);\n                                                            return error\n                                                                ? {\n                                                                      key: `arbeidstidPeriodeForm.validation.tidFasteDager.tid.${error}`,\n                                                                      keepKeyUnaltered: true,\n                                                                      values: { ...intlValues, dag },\n                                                                  }\n                                                                : undefined;\n                                                        }}\n                                                    />\n                                                </FormComponents.InputGroup>\n                                            </FormBlock>\n                                        )}\n                                    </>\n                                )}\n                            </FormComponents.Form>\n                        );\n                    }}\n                />\n            </FormBlock>\n        </div>\n    );\n};\n\nexport default ArbeidstidPeriodeForm;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Modal from 'nav-frontend-modal';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport { getArbeidstidPeriodeIntl } from '../../i18n/arbeidstidPeriodeMessages';\nimport ArbeidstidPeriodeForm, { ArbeidstidPeriodeFormProps } from '../arbeidstid-periode-form/ArbeidstidPeriodeForm';\nimport './arbeidstidPeriodeDialog.less';\n\ninterface Props {\n    isOpen: boolean;\n    formProps: ArbeidstidPeriodeFormProps;\n}\n\nconst ArbeidstidPeriodeDialog: React.FunctionComponent<Props> = ({ isOpen, formProps }) => {\n    const { intlText } = getArbeidstidPeriodeIntl(useIntl());\n    return isOpen ? (\n        <Modal\n            isOpen={isOpen}\n            contentLabel={intlText('arbeidstidPeriodeDialog.contentLabel')}\n            onRequestClose={formProps.onCancel}\n            shouldCloseOnOverlayClick={false}\n            className=\"arbeidstidPeriodeDialog\">\n            <Normaltekst tag=\"div\">\n                <ArbeidstidPeriodeForm {...formProps} />\n            </Normaltekst>\n        </Modal>\n    ) : null;\n};\n\nexport default ArbeidstidPeriodeDialog;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { FormikInputGroup, FormikTimeInput, TestProps } from '@navikt/sif-common-formik';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport {\n    dateFormatter,\n    decimalDurationToDuration,\n    Duration,\n    durationToDecimalDuration,\n    DurationWeekdays,\n    isDateInDates,\n    isDateInWeekdays,\n    summarizeDurationInDurationWeekdays,\n    Weekday,\n} from '@navikt/sif-common-utils';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport LabelInputInfoLayout from '../../common/label-input-info-layout/LabelInputInfoLayout';\nimport TimerOgMinutter, { formatTimerOgMinutter } from '../../common/timer-og-minutter/TimerOgMinutter';\nimport { Daginfo, Ukeinfo } from '../../types';\nimport './arbeidstidUkeInput.less';\n\nexport type ArbeidstidUkeInputEnkeltdagValidator = (dato: Date) => (value: Duration) => ValidationError | undefined;\n\nexport interface ArbeidstidUkeTekster {\n    dag: React.ReactNode;\n    jobber: React.ReactNode;\n    fravær: React.ReactNode;\n    ariaLabelTidInput: (dato: string) => React.ReactNode;\n}\ninterface OwnProps {\n    ukeinfo: Ukeinfo;\n    visUkeTittel?: boolean;\n    getFieldName: (dag: Daginfo) => string;\n    getDagValue: (dag: Daginfo) => Duration | undefined;\n    beregnFravær?: boolean;\n    utilgjengeligeDatoer?: Date[];\n    utilgjengeligeUkedager?: Weekday[];\n    tekst: ArbeidstidUkeTekster;\n    normalarbeidstidUkedager?: DurationWeekdays;\n    enkeltdagValidator?: ArbeidstidUkeInputEnkeltdagValidator;\n}\n\ntype Props = OwnProps & TestProps;\n\nconst bem = bemUtils('arbeidstidUkeInput');\n\nconst ArbeidOgFraværOppsummering = ({\n    timerNormaltPerUke,\n    timerRegistrertIUke,\n}: {\n    timerNormaltPerUke: number;\n    timerRegistrertIUke: number;\n}) => {\n    const intl = useIntl();\n    const durationNormalt = decimalDurationToDuration(timerNormaltPerUke);\n\n    const durationRegistrert = decimalDurationToDuration(timerRegistrertIUke);\n    const durationFravær = decimalDurationToDuration(timerNormaltPerUke - timerRegistrertIUke);\n\n    if (timerRegistrertIUke === 0) {\n        return <>Ingen arbeidstid registrert</>;\n    }\n\n    return (\n        <>\n            {formatTimerOgMinutter(intl, durationRegistrert)} av normalt {formatTimerOgMinutter(intl, durationNormalt)}{' '}\n            registrert ({formatTimerOgMinutter(intl, durationFravær)} fravær)\n        </>\n    );\n};\n\nconst renderFraværInfo = (fravær: Duration | undefined, arbeidstid: Duration | undefined) => {\n    const heltFravær = fravær ? durationToDecimalDuration(fravær) === 0 : false;\n    if (fravær) {\n        return (\n            <>\n                {arbeidstid && (\n                    <span className=\"sr-only\">\n                        <TimerOgMinutter timer={arbeidstid.hours} minutter={arbeidstid.minutes} /> med jobb gir{' '}\n                    </span>\n                )}\n                {!heltFravær && (\n                    <>\n                        <TimerOgMinutter timer={fravær.hours} minutter={fravær.minutes} /> fravær\n                    </>\n                )}\n                {heltFravær && <>Fullt fravær</>}\n            </>\n        );\n    }\n\n    return undefined;\n};\n\nconst ArbeidstidUkeInput: React.FunctionComponent<Props> = ({\n    ukeinfo,\n    utilgjengeligeDatoer,\n    utilgjengeligeUkedager,\n    normalarbeidstidUkedager,\n    visUkeTittel,\n    getFieldName,\n    getDagValue,\n    enkeltdagValidator,\n    tekst,\n    beregnFravær,\n    'data-testid': testId,\n}) => {\n    const { dager } = ukeinfo;\n\n    const timerNormaltPerUke = normalarbeidstidUkedager\n        ? durationToDecimalDuration(summarizeDurationInDurationWeekdays(normalarbeidstidUkedager))\n        : undefined;\n\n    const timerRegistrertIUke = dager\n        .map((dag) => {\n            const timerPåDag = dag.weekday ? getDagValue(dag) : undefined;\n            return timerPåDag ? durationToDecimalDuration(timerPåDag) : 0;\n        })\n        .reduce((d, n) => d + n);\n\n    return (\n        <div className={bem.block}>\n            {visUkeTittel && (\n                <Normaltekst tag=\"h3\" className={bem.element('tittel')}>\n                    {getUkeTittel(ukeinfo)}\n                </Normaltekst>\n            )}\n            <div className={bem.element('uke__ukedager')}>\n                {dager.map((dag) => {\n                    const erUtilgjengeligDato = isDateInDates(dag.dato, utilgjengeligeDatoer);\n                    const erUtilgjengeligUkedag = utilgjengeligeUkedager\n                        ? isDateInWeekdays(dag.dato, utilgjengeligeUkedager)\n                        : false;\n                    if (erUtilgjengeligDato || erUtilgjengeligUkedag) {\n                        return null;\n                    }\n                    const dayDateString = inputDatoLabel(dag.dato);\n                    const normalarbeidstid =\n                        normalarbeidstidUkedager && dag.weekday ? normalarbeidstidUkedager[dag.weekday] : undefined;\n\n                    const value = getDagValue(dag);\n                    const fravær =\n                        beregnFravær && value && normalarbeidstid\n                            ? decimalDurationToDuration(\n                                  durationToDecimalDuration(normalarbeidstid) - durationToDecimalDuration(value)\n                              )\n                            : normalarbeidstid;\n\n                    return (\n                        <FormikInputGroup\n                            key={dag.isoDate}\n                            legend={<span className=\"sr-only\">{dayDateString}</span>}\n                            name={`arbeidstid_${dag.isoDate}`}\n                            className={bem.element('dag', erUtilgjengeligDato ? 'utilgjengelig' : undefined)}>\n                            <LabelInputInfoLayout\n                                narrowBreakpoint={860}\n                                label={\n                                    <div role=\"presentation\" aria-hidden=\"true\" className={bem.element('dagnavn')}>\n                                        {dayDateString}\n                                    </div>\n                                }\n                                input={\n                                    <FormikTimeInput\n                                        aria-describedby=\"iPerioden\"\n                                        name={getFieldName(dag)}\n                                        label={\n                                            <span className={'sr-only'}>{tekst.ariaLabelTidInput(dayDateString)}</span>\n                                        }\n                                        timeInputLayout={{\n                                            direction: 'horizontal',\n                                        }}\n                                        data-testid={`${testId}__dag.isoDate`}\n                                        validate={enkeltdagValidator ? enkeltdagValidator(dag.dato) : undefined}\n                                    />\n                                }\n                                info={beregnFravær ? renderFraværInfo(fravær, value) : undefined}\n                            />\n                        </FormikInputGroup>\n                    );\n                })}\n            </div>\n            {1 + 1 === 3 && timerNormaltPerUke !== undefined && timerRegistrertIUke !== undefined && (\n                <Box margin=\"s\" padBottom=\"s\">\n                    <ArbeidOgFraværOppsummering\n                        timerNormaltPerUke={timerNormaltPerUke}\n                        timerRegistrertIUke={timerRegistrertIUke}\n                    />\n                </Box>\n            )}\n        </div>\n    );\n};\n\nconst inputDatoLabel = (date: Date): string => dateFormatter.dayDateShortMonth(date);\n\nexport const getUkeTittel = ({ ukenummer, år }: Ukeinfo): string => {\n    return `Uke ${ukenummer}, ${år}`;\n};\n\nexport default ArbeidstidUkeInput;\n","import React from 'react';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport bemUtils from '@navikt/sif-common-core/lib/utils/bemUtils';\nimport { DateRange, TestProps } from '@navikt/sif-common-formik';\nimport { DurationWeekdays, InputDateDurationMap, isDateInDates, Weekday } from '@navikt/sif-common-utils/lib';\nimport Ekspanderbartpanel from 'nav-frontend-ekspanderbartpanel';\nimport { tidUkerInputUtils } from '../../tid/tid-uker-input/tidUkerUtils';\nimport { Daginfo, Ukeinfo } from '../../types';\nimport ArbeidstidUkeInput, {\n    ArbeidstidUkeInputEnkeltdagValidator,\n    ArbeidstidUkeTekster,\n    getUkeTittel,\n} from '../arbeidstid-uke-input/ArbeidstidUkeInput';\nimport './arbeidstidUkerInput.less';\n\nconst getTidKalenderFieldName = (fieldName: string, dag: Daginfo): string => `${fieldName}.${dag.isoDate}`;\n\ninterface OwnProps {\n    fieldName: string;\n    arbeidstid: InputDateDurationMap;\n    periode: DateRange;\n    utilgjengeligeDatoer?: Date[];\n    utilgjengeligeUkedager?: Weekday[];\n    tekster: ArbeidstidUkeTekster;\n    normalarbeidstidUkedager?: DurationWeekdays;\n    useExpandablePanel?: boolean;\n    beregnFravær?: boolean;\n    ukeTittelRenderer?: (uke: Ukeinfo) => React.ReactNode;\n    enkeltdagValidator?: ArbeidstidUkeInputEnkeltdagValidator;\n}\n\ntype Props = OwnProps & TestProps;\n\nconst bem = bemUtils('arbeidstidUkerInput');\n\nexport const ArbeidstidUkerInput: React.FunctionComponent<Props> = ({\n    fieldName,\n    periode,\n    arbeidstid,\n    utilgjengeligeDatoer,\n    utilgjengeligeUkedager,\n    normalarbeidstidUkedager,\n    tekster,\n    beregnFravær,\n    useExpandablePanel,\n    enkeltdagValidator,\n    'data-testid': testId,\n}) => {\n    const dager = tidUkerInputUtils.getDagInfoForPeriode(periode);\n    const uker = tidUkerInputUtils\n        .getUkerFraDager(dager)\n        .filter(\n            (uke) =>\n                uke.dager.filter((dag) => isDateInDates(dag.dato, utilgjengeligeDatoer)).length !== uke.dager.length\n        );\n\n    const renderUke = (uke: Ukeinfo, visUkeTittel: boolean) => (\n        <div key={uke.ukenummer} className={bem.element('ukeWrapper')}>\n            <ArbeidstidUkeInput\n                getFieldName={(dag) => getTidKalenderFieldName(fieldName, dag)}\n                getDagValue={(dag) => {\n                    const dur = arbeidstid[dag.isoDate];\n                    return {\n                        hours: dur?.hours || '0',\n                        minutes: dur?.minutes || '0',\n                    };\n                }}\n                data-testid={testId}\n                beregnFravær={beregnFravær}\n                visUkeTittel={visUkeTittel}\n                ukeinfo={uke}\n                utilgjengeligeDatoer={utilgjengeligeDatoer}\n                utilgjengeligeUkedager={utilgjengeligeUkedager}\n                normalarbeidstidUkedager={normalarbeidstidUkedager}\n                enkeltdagValidator={enkeltdagValidator}\n                tekst={tekster}\n            />\n        </div>\n    );\n\n    return (\n        <div className={bem.block}>\n            {uker.map((uke) => {\n                if (useExpandablePanel) {\n                    return (\n                        <div key={uke.ukenummer} className={bem.element('ukeWrapper', 'expandable')}>\n                            <Ekspanderbartpanel tittel={getUkeTittel(uke)}>\n                                <Box margin=\"m\">{renderUke(uke, false)}</Box>\n                            </Ekspanderbartpanel>\n                        </div>\n                    );\n                } else {\n                    return (\n                        <div key={uke.ukenummer} className={bem.element('ukeWrapper')}>\n                            {renderUke(uke, true)}\n                        </div>\n                    );\n                }\n            })}\n        </div>\n    );\n};\n\nexport default ArbeidstidUkerInput;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport { dateFormatter, dateToday } from '@navikt/sif-common-utils/lib';\nimport dayjs from 'dayjs';\nimport TidEnkeltdagDialog, { TidEnkeltdagDialogProps } from '../../tid/tid-enkeltdag-dialog/TidEnkeltdagDialog';\nimport { TidEnkeltdagFormProps } from '../../tid/tid-enkeltdag-dialog/TidEnkeltdagForm';\n\ninterface Props extends Omit<TidEnkeltdagDialogProps, 'dialogTitle' | 'formProps'> {\n    formProps: Omit<TidEnkeltdagFormProps, 'hvorMyeSpørsmålRenderer' | 'maksTid'>;\n}\n\nconst OmsorgstilbudEnkeltdagDialog: React.FunctionComponent<Props> = ({ isOpen, formProps }: Props) => {\n    const intl = useIntl();\n\n    const hvorMyeSpørsmålRenderer = (dato: Date): string => {\n        const erHistorisk = dayjs(dato).isBefore(dateToday, 'day');\n        return intlHelper(\n            intl,\n            erHistorisk ? 'omsorgstilbudEnkeltdagForm.tid.spm.historisk' : 'omsorgstilbudEnkeltdagForm.tid.spm',\n            { dato: dateFormatter.dayDateMonthYear(dato) }\n        );\n    };\n    return (\n        <TidEnkeltdagDialog\n            isOpen={isOpen}\n            dialogTitle={intlHelper(intl, 'omsorgstilbudEnkeltdagForm.tittel', {\n                dato: dateFormatter.full(formProps.dato),\n            })}\n            formProps={{ ...formProps, hvorMyeSpørsmålRenderer, maksTid: { hours: 7, minutes: 30 } }}\n        />\n    );\n};\n\nexport default OmsorgstilbudEnkeltdagDialog;\n","const omsorgstilbudEnkeltdagFormMessages = {\n    nb: {\n        'omsorgstilbudEnkeltdagForm.tittel': 'Tid i omsorgstilbud {dato}',\n        'omsorgstilbudEnkeltdagForm.tid.spm': 'Hvor mye skal barnet være i omsorgstilbud {dato}?',\n        'omsorgstilbudEnkeltdagForm.tid.spm.historisk': 'Hvor mye var barnet i omsorgstilbud {dato}?',\n    },\n};\n\nexport default omsorgstilbudEnkeltdagFormMessages;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport FormBlock from '@navikt/sif-common-core/lib/components/form-block/FormBlock';\nimport { DateRange, getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport datepickerUtils from '@navikt/sif-common-formik/lib/components/formik-datepicker/datepickerUtils';\nimport {\n    getDateRangeValidator,\n    ValidateDateError,\n    ValidateDateRangeError,\n} from '@navikt/sif-common-formik/lib/validation';\nimport getIntlFormErrorHandler from '@navikt/sif-common-formik/lib/validation/intlFormErrorHandler';\nimport { ValidationError } from '@navikt/sif-common-formik/lib/validation/types';\nimport { DurationWeekdays } from '@navikt/sif-common-utils/lib';\nimport { InputDateString } from 'nav-datovelger/lib/types';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport TidFasteUkedagerInput from '../../../../tid/tid-faste-ukedager-input/TidFasteUkedagerInput';\nimport { getOmsorgstilbudPeriodeIntl } from '../../i18n/omsorgstilbudPeriodeMessages';\nimport { getOmsorgstilbudFastDagValidator, validateOmsorgstilbudFasteDager } from './omsorgstilbudFormValidation';\n\nexport interface OmsorgstilbudPeriodeFormProps {\n    periode: DateRange;\n    onSubmit: (data: OmsorgstilbudPeriodeData) => void;\n    onCancel: () => void;\n}\n\nexport type OmsorgstilbudPeriodeData = {\n    fom: Date;\n    tom: Date;\n    tidFasteDager: DurationWeekdays;\n};\n\nenum FormFields {\n    'fom' = 'fom',\n    'tom' = 'tom',\n    'tidFasteDager' = 'tidFasteDager',\n    'tidFasteDager.gruppe' = 'tidFasteDager.gruppe',\n}\n\ninterface FormValues {\n    [FormFields.fom]: InputDateString;\n    [FormFields.tom]: InputDateString;\n    [FormFields.tidFasteDager]: DurationWeekdays;\n}\n\nconst initialFormValues: Partial<FormValues> = {};\n\nconst FormComponents = getTypedFormComponents<FormFields, FormValues, ValidationError>();\n\nconst OmsorgstilbudPeriodeForm: React.FC<OmsorgstilbudPeriodeFormProps> = ({ periode, onSubmit, onCancel }) => {\n    const intl = useIntl();\n    const { intlText } = getOmsorgstilbudPeriodeIntl(intl);\n\n    const onValidSubmit = (values: Partial<FormValues>) => {\n        const fom = datepickerUtils.getDateFromDateString(values.fom);\n        const tom = datepickerUtils.getDateFromDateString(values.tom);\n\n        if (!fom || !tom || !values.tidFasteDager) {\n            throw new Error('OmsorgstilbudPeriodeForm. Ugyldig fom/tom eller tidFasteDager ');\n        }\n\n        onSubmit({\n            fom,\n            tom,\n            tidFasteDager: values.tidFasteDager,\n        });\n    };\n\n    return (\n        <div>\n            <Undertittel tag=\"h1\" className=\"dialogFormTitle\">\n                {intlText('omsorgstilbudPeriodeForm.tittel')}\n            </Undertittel>\n            <FormBlock margin=\"xl\">\n                <FormComponents.FormikWrapper\n                    initialValues={initialFormValues}\n                    onSubmit={onValidSubmit}\n                    renderForm={({ values: { fom, tom, tidFasteDager } }) => {\n                        const from = datepickerUtils.getDateFromDateString(fom);\n                        const to = datepickerUtils.getDateFromDateString(tom);\n\n                        return (\n                            <FormComponents.Form\n                                onCancel={onCancel}\n                                formErrorHandler={getIntlFormErrorHandler(intl, 'omsorgstilbudPeriodeForm.validation')}\n                                includeValidationSummary={true}\n                                submitButtonLabel={intlText('omsorgstilbudPeriodeForm.submitButtonLabel')}\n                                cancelButtonLabel={intlText('omsorgstilbudPeriodeForm.cancelButtonLabel')}>\n                                <div style={{ maxWidth: '20rem' }}>\n                                    <FormBlock>\n                                        <FormComponents.DateIntervalPicker\n                                            fromDatepickerProps={{\n                                                label: intlText('omsorgstilbudPeriodeForm.fraOgMed.label'),\n                                                name: FormFields.fom,\n                                                disableWeekend: true,\n                                                fullscreenOverlay: true,\n                                                fullScreenOnMobile: true,\n                                                dayPickerProps: {\n                                                    initialMonth: periode.from,\n                                                },\n                                                minDate: periode.from,\n                                                maxDate: to || periode.to,\n                                                validate: getDateRangeValidator({\n                                                    required: true,\n                                                    onlyWeekdays: true,\n                                                    toDate: to,\n                                                    fromDate: from,\n                                                    min: periode.from,\n                                                    max: to || periode.to,\n                                                }).validateFromDate,\n                                            }}\n                                            toDatepickerProps={{\n                                                label: intlText('omsorgstilbudPeriodeForm.tilOgMed.label'),\n                                                name: FormFields.tom,\n                                                disableWeekend: true,\n                                                fullScreenOnMobile: true,\n                                                fullscreenOverlay: true,\n                                                minDate: from || periode.from,\n                                                maxDate: periode.to,\n                                                dayPickerProps: {\n                                                    initialMonth: from || periode.from,\n                                                },\n                                                validate: getDateRangeValidator({\n                                                    required: true,\n                                                    onlyWeekdays: true,\n                                                    toDate: to,\n                                                    fromDate: from,\n                                                    min: from || periode.from,\n                                                    max: periode.to,\n                                                }).validateToDate,\n                                            }}\n                                        />\n                                    </FormBlock>\n                                </div>\n\n                                <FormBlock>\n                                    <FormComponents.InputGroup\n                                        legend={intlText('omsorgstilbudPeriodeForm.tidFasteDager.label')}\n                                        validate={() => {\n                                            const error = validateOmsorgstilbudFasteDager(tidFasteDager);\n                                            return error\n                                                ? {\n                                                      key: `${error}`,\n                                                  }\n                                                : undefined;\n                                        }}\n                                        name={FormFields['tidFasteDager.gruppe']}>\n                                        <TidFasteUkedagerInput\n                                            name={FormFields.tidFasteDager}\n                                            validateDag={(dag, value) => {\n                                                const error = getOmsorgstilbudFastDagValidator()(value);\n                                                return error\n                                                    ? {\n                                                          key: `omsorgstilbudPeriodeForm.validation.tidFasteDager.tid.${error}`,\n                                                          keepKeyUnaltered: true,\n                                                          values: { dag },\n                                                      }\n                                                    : undefined;\n                                            }}\n                                        />\n                                    </FormComponents.InputGroup>\n                                </FormBlock>\n                            </FormComponents.Form>\n                        );\n                    }}\n                />\n            </FormBlock>\n        </div>\n    );\n};\n\nexport const OmsorgstilbudPeriodeFormErrors = {\n    [FormFields.fom]: {\n        [ValidateDateError.dateHasNoValue]: 'omsorgstilbudPeriodeForm.validation.fom.dateHasNoValue',\n        [ValidateDateError.dateIsAfterMax]: 'omsorgstilbudPeriodeForm.validation.fom.dateIsAfterMax',\n        [ValidateDateError.dateIsBeforeMin]: 'omsorgstilbudPeriodeForm.validation.fom.dateIsBeforeMin',\n        [ValidateDateError.dateHasInvalidFormat]: 'omsorgstilbudPeriodeForm.validation.fom.dateHasInvalidFormat',\n        [ValidateDateRangeError.fromDateIsAfterToDate]: 'omsorgstilbudPeriodeForm.validation.fom.fromDateIsAfterToDate',\n    },\n    [FormFields.tom]: {\n        [ValidateDateError.dateHasNoValue]: 'omsorgstilbudPeriodeForm.validation.tom.dateHasNoValue',\n        [ValidateDateError.dateIsAfterMax]: 'omsorgstilbudPeriodeForm.validation.tom.dateIsAfterMax',\n        [ValidateDateError.dateIsBeforeMin]: 'omsorgstilbudPeriodeForm.validation.tom.dateIsBeforeMin',\n        [ValidateDateError.dateHasInvalidFormat]: 'omsorgstilbudPeriodeForm.validation.tom.dateHasInvalidFormat',\n        [ValidateDateRangeError.toDateIsBeforeFromDate]:\n            'omsorgstilbudPeriodeForm.validation.tom.toDateIsBeforeFromDate',\n    },\n    [FormFields['tidFasteDager.gruppe']]: {\n        ['ingenTidRegistrert']: 'omsorgstilbudPeriodeForm.validation.tidFasteDager.gruppe.ingenTidRegistrert',\n        ['forMangeTimer']: 'omsorgstilbudPeriodeForm.validation.tidFasteDager.gruppe.forMangeTimer',\n    },\n};\n\nexport default OmsorgstilbudPeriodeForm;\n","import getTimeValidator from '@navikt/sif-common-formik/lib/validation/getTimeValidator';\nimport { ValidationError, ValidationResult } from '@navikt/sif-common-formik/lib/validation/types';\nimport { DurationWeekdays, summarizeDurationInDurationWeekdays } from '@navikt/sif-common-utils/lib';\n\nexport const getOmsorgstilbudFastDagValidator = () =>\n    getTimeValidator({ max: { hours: 7, minutes: 30 }, min: { hours: 0, minutes: 0 } });\n\nexport const validateOmsorgstilbudFasteDager = (\n    fasteDager: DurationWeekdays | undefined\n): ValidationResult<ValidationError> => {\n    let error;\n    const timer = fasteDager ? summarizeDurationInDurationWeekdays(fasteDager) : 0;\n    if (timer === 0) {\n        error = 'ingenTidRegistrert';\n    }\n    if (timer > 37.5) {\n        error = 'forMangeTimer';\n    }\n    return error;\n};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport intlHelper from '@navikt/sif-common-core/lib/utils/intlUtils';\nimport Modal from 'nav-frontend-modal';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport OmsorgstilbudPeriodeForm, {\n    OmsorgstilbudPeriodeFormProps,\n} from '../omsorgstilbud-periode-form/OmsorgstilbudPeriodeForm';\nimport './omsorgstilbudPeriodeDialog.less';\n\ninterface Props {\n    isOpen: boolean;\n    formProps: Pick<OmsorgstilbudPeriodeFormProps, 'periode' | 'onCancel' | 'onSubmit'>;\n}\n\nconst OmsorgstilbudPeriodeDialog: React.FC<Props> = ({ formProps, isOpen }) => {\n    const intl = useIntl();\n    return isOpen ? (\n        <Modal\n            isOpen={isOpen}\n            contentLabel={intlHelper(intl, 'omsorgstilbudPeriodeDialog.contentLabel')}\n            onRequestClose={formProps.onCancel}\n            shouldCloseOnOverlayClick={false}\n            className=\"omsorgstilbudPeriodeDialog\">\n            <Normaltekst tag=\"div\">\n                <OmsorgstilbudPeriodeForm {...formProps} />\n            </Normaltekst>\n        </Modal>\n    ) : null;\n};\n\nexport default OmsorgstilbudPeriodeDialog;\n","import React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { DateRange, dateToISOString, InputTime } from '@navikt/sif-common-formik/lib';\nimport { DateDurationMap, durationIsZero, getDurationsInDateRange } from '@navikt/sif-common-utils';\nimport dayjs from 'dayjs';\nimport Ekspanderbartpanel from 'nav-frontend-ekspanderbartpanel';\nimport { Element, Normaltekst } from 'nav-frontend-typografi';\nimport { DurationText, OmsorgstilbudEnkeltdagDialog, TidsbrukKalender } from '../..';\nimport { TidEnkeltdagEndring } from '../../tid/tid-enkeltdag-dialog/TidEnkeltdagForm';\n\ninterface Props {\n    måned: DateRange;\n    tidOmsorgstilbud: DateDurationMap;\n    utilgjengeligeDatoer?: Date[];\n    månedTittelHeadingLevel?: number;\n    periode: DateRange;\n    åpentEkspanderbartPanel?: boolean;\n    onEnkeltdagChange?: (evt: TidEnkeltdagEndring) => void;\n}\n\nconst OmsorgstilbudMåned: React.FunctionComponent<Props> = ({\n    måned,\n    tidOmsorgstilbud,\n    utilgjengeligeDatoer,\n    månedTittelHeadingLevel = 2,\n    periode,\n    åpentEkspanderbartPanel,\n    onEnkeltdagChange,\n}) => {\n    const [editDate, setEditDate] = useState<{ dato: Date; tid: Partial<InputTime> } | undefined>();\n\n    const dager: DateDurationMap = getDurationsInDateRange(tidOmsorgstilbud, måned);\n    const dagerMedRegistrertOmsorgstilbud: string[] = Object.keys(dager).filter((key) => {\n        const datoTid = dager[key];\n        return datoTid !== undefined && datoTid !== undefined && durationIsZero(datoTid) === false;\n    });\n\n    return (\n        <Ekspanderbartpanel\n            renderContentWhenClosed={false}\n            apen={åpentEkspanderbartPanel}\n            tittel={\n                <>\n                    <Element tag={`h${månedTittelHeadingLevel}`}>\n                        <FormattedMessage\n                            id=\"omsorgstilbudMåned.ukeOgÅr\"\n                            values={{ ukeOgÅr: dayjs(måned.from).format('MMMM YYYY') }}\n                        />{' '}\n                        <Normaltekst tag=\"div\">\n                            {dagerMedRegistrertOmsorgstilbud.length === 0 ? (\n                                <FormattedMessage id=\"omsorgstilbudMåned.dagerRegistrert.ingenDager\" />\n                            ) : (\n                                <FormattedMessage\n                                    id=\"omsorgstilbudMåned.dagerRegistrert.dager\"\n                                    values={{ dager: dagerMedRegistrertOmsorgstilbud.length }}\n                                />\n                            )}\n                        </Normaltekst>\n                    </Element>\n                </>\n            }>\n            <TidsbrukKalender\n                periode={måned}\n                dager={dager}\n                utilgjengeligeDatoer={utilgjengeligeDatoer}\n                skjulTommeDagerIListe={true}\n                visOpprinneligTid={false}\n                tidRenderer={({ tid, prosent }) => {\n                    if (prosent !== undefined && prosent > 0) {\n                        return (\n                            <>\n                                <div>{prosent} %</div>\n                                {1 + 1 === 2 && (\n                                    <div className=\"beregnetTid\">\n                                        (<DurationText duration={tid} />)\n                                    </div>\n                                )}\n                            </>\n                        );\n                    }\n                    if (tid.hours === '0' && tid.minutes === '0') {\n                        return <></>;\n                    }\n                    return <DurationText duration={tid} />;\n                }}\n                onDateClick={\n                    onEnkeltdagChange\n                        ? (dato) => {\n                              const tid: Partial<InputTime> = dager[dateToISOString(dato)] || {\n                                  hours: '',\n                                  minutes: '',\n                              };\n                              setEditDate({ dato, tid });\n                          }\n                        : undefined\n                }\n            />\n            {editDate && onEnkeltdagChange && (\n                <OmsorgstilbudEnkeltdagDialog\n                    isOpen={editDate !== undefined}\n                    formProps={{\n                        periode,\n                        dato: editDate.dato,\n                        tid: editDate.tid,\n                        onSubmit: (evt) => {\n                            setEditDate(undefined);\n                            setTimeout(() => {\n                                /** TimeOut pga komponent unmountes */\n                                onEnkeltdagChange(evt);\n                            });\n                        },\n                        onCancel: () => setEditDate(undefined),\n                    }}\n                />\n            )}\n        </Ekspanderbartpanel>\n    );\n};\n\nexport default OmsorgstilbudMåned;\n","import { IntlShape } from 'react-intl';\nimport { typedIntlHelper } from '@navikt/sif-common-core/lib/utils/intlUtils';\n\nconst omsorgstilbudPeriodeFormMessages = {\n    nb: {\n        'omsorgstilbudPeriodeForm.tittel': 'Oppgi periode med omsorgstilbud',\n        'omsorgstilbudPeriodeForm.submitButtonLabel': 'Ok',\n        'omsorgstilbudPeriodeForm.cancelButtonLabel': 'Avbryt',\n        'omsorgstilbudPeriodeForm.fraOgMed.label': 'Fra og med',\n        'omsorgstilbudPeriodeForm.tilOgMed.label': 'Til og med',\n        'omsorgstilbudPeriodeForm.tidFasteDager.label': 'Fyll ut tiden i omsorgstilbudet som er fast og regelmessig:',\n    },\n};\n\nconst omsorgstilbudPeriodeFormValidationMessages = {\n    nb: {\n        'omsorgstilbudPeriodeForm.validation.fom.dateHasNoValue': 'Du må fylle ut periodens fra-dato.',\n        'omsorgstilbudPeriodeForm.validation.fom.dateHasInvalidFormat':\n            'Du må oppgi periodens fra-dato i et gyldig datoformat. Gyldig format er dd.mm.åååå.',\n        'omsorgstilbudPeriodeForm.validation.fom.fromDateIsAfterToDate':\n            'Fra-datoen kan ikke være etter til-datoen. Skriv inn eller velg dato fra kalenderen.',\n        'omsorgstilbudPeriodeForm.validation.fom.dateIsBeforeMin':\n            'Fra-datoen kan ikke være før perioden du har søkt om.',\n        'omsorgstilbudPeriodeForm.validation.tom.dateIsBeforeMin':\n            'Til-datoen kan ikke være før perioden du har søkt om.',\n        'omsorgstilbudPeriodeForm.validation.fom.dateIsAfterMax':\n            'Fra-datoen kan ikke være etter perioden du har søkt for.',\n        'omsorgstilbudPeriodeForm.validation.fom.dateIsNotWeekday':\n            'Fra-dato må være en ukedag, det kan ikke være en lørdag eller søndag. Skriv inn eller velg dato fra kalenderen.',\n        'omsorgstilbudPeriodeForm.validation.tom.dateHasNoValue': 'Du må fylle ut periodens til-dato.',\n        'omsorgstilbudPeriodeForm.validation.tom.dateHasInvalidFormat':\n            'Du må oppgi periodens til-dato i et gyldig datoformat. Gyldig format er dd.mm.åååå.',\n        'omsorgstilbudPeriodeForm.validation.tom.toDateIsBeforeFromDate':\n            'Til-datoen kan ikke være før fra-datoen. Skriv inn eller velg dato fra kalenderen.',\n        'omsorgstilbudPeriodeForm.validation.tom.dateIsAfterMax':\n            'Til-datoen kan ikke være etter perioden du har søkt for.',\n        'omsorgstilbudPeriodeForm.validation.tom.dateIsNotWeekday':\n            'Til-dato må være en ukedag, det kan ikke være en lørdag eller søndag. Skriv inn eller velg dato fra kalenderen.',\n        'omsorgstilbudPeriodeForm.validation.tidFasteDager.gruppe.ingenTidRegistrert':\n            'Du må fylle ut tiden i omsorgstilbudet som er fast og regelmessig.',\n        'omsorgstilbudPeriodeForm.validation.tidFasteDager.gruppe.forMangeTimer':\n            'Du kan ikke oppgi mer enn 37 timer og 30 minutter for en uke.',\n        'omsorgstilbudPeriodeForm.validation.tidFasteDager.tid.timeHasNoValue':\n            'Du må fylle ut timer og minutter for {dag}.',\n        'omsorgstilbudPeriodeForm.validation.tidFasteDager.tid.hoursAreInvalid':\n            'Antall timer på {dag} er ikke et gyldig tall.',\n        'omsorgstilbudPeriodeForm.validation.tidFasteDager.tid.minutesAreInvalid':\n            'Antall minutter på {dag} er ikke et gyldig tall.',\n        'omsorgstilbudPeriodeForm.validation.tidFasteDager.tid.tooManyHours':\n            'Antall timer på {dag} kan ikke overstige 7 timer og 30 minutter.',\n        'omsorgstilbudPeriodeForm.validation.tidFasteDager.tid.tooManyMinutes':\n            'Antall minutter på {dag} kan ikke overstige 59 minutter.',\n        'omsorgstilbudPeriodeForm.validation.tidFasteDager.tid.durationIsTooLong':\n            'Antall timer og minutter registrert {dag} er for høyt. Tiden kan ikke overstige 7 timer og 30 minutter hver ukedag.',\n        'omsorgstilbudPeriodeForm.validation.tidFasteDager.tid.durationIsTooShort':\n            'Antall timer og minutter {dato} {hvor} kan ikke være mindre enn 0 timer og 0 minutter.',\n        'omsorgstilbudPeriodeForm.validation.tidFasteDager.tid.minutesAreNegative':\n            'Antall timer og minutter {dag}  kan ikke være mindre enn 0 timer og 0 minutter.',\n        'omsorgstilbudPeriodeForm.validation.tidFasteDager.tid.hoursAreNegative':\n            'Antall timer og minutter {dag}  kan ikke være mindre enn 0 timer og 0 minutter.',\n    },\n};\n\nexport const omsorgstibudPeriodeMessages = {\n    nb: {\n        ...omsorgstilbudPeriodeFormMessages.nb,\n        ...omsorgstilbudPeriodeFormValidationMessages.nb,\n        'omsorgstilbudMåned.ukeOgÅr': 'Omsorgstilbud {ukeOgÅr}',\n        'omsorgstilbudMåned.dagerRegistrert.dager':\n            '{dager, plural, one {# dag} other {# dager}} med omsorgstilbud registrert.',\n        'omsorgstilbudMåned.dagerRegistrert.ingenDager': 'Ingen dager med omsorgstilbud registrert.',\n        'omsorgstilbudPeriodeDialog.contentLabel': 'Registrer tid i omsorgstilbud',\n        'omsorgstilbudPeriode.part.skalVære': 'skal være',\n    },\n};\n\ntype OmsorgstilbudPeriodeMessagesType = keyof typeof omsorgstibudPeriodeMessages.nb;\n\nexport const getOmsorgstilbudPeriodeIntl = (intl: IntlShape) => typedIntlHelper<OmsorgstilbudPeriodeMessagesType>(intl);\n","import api from \"!../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./navFrontendOverride.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import React from 'react';\nimport '../styles/navFrontendOverride.css';\n\nexport const withDialogWrapperSmall = (Story) => {\n    return (\n        <DialogWrapper>\n            <Story />\n        </DialogWrapper>\n    );\n};\n\nexport const withDialogWrapperMedium = (Story) => {\n    return (\n        <DialogWrapper width=\"640px\">\n            <Story />\n        </DialogWrapper>\n    );\n};\n\nexport const withDialogWrapperWide = (Story) => {\n    return (\n        <DialogWrapper width=\"800px\">\n            <Story />\n        </DialogWrapper>\n    );\n};\n\ninterface Props {\n    width?: string;\n}\n\nconst DialogWrapper: React.FunctionComponent<Props> = ({ children, width }) => (\n    <div\n        style={{\n            maxWidth: width || '480px',\n            border: '2px solid #ccc',\n            borderRadius: '.25rem',\n            padding: '1.5rem',\n            boxShadow: '0 0 10px rgba(0,0,0,.2)',\n        }}>\n        {children}\n    </div>\n);\n\nexport default DialogWrapper;\n","export const timerOgMinutterMessages = {\n    nb: {\n        timer: '{timer, plural, one {# time} other {# timer}}',\n        minutter: '{minutter, plural, one {# minutt} other {# minutter}}',\n        timerOgMinutter:\n            '{timer, plural, one {# time} other {# timer}} og {minutter, plural, one {# minutt} other {# minutter}}',\n    },\n};\n","const arbeidstidMånedMessages = {\n    nb: {\n        'arbeidstidMånedTittel.ukeOgÅr': '{ukeOgÅr}',\n        'arbeidstidMånedTittel.iPeriodePanel.info': '{dager, plural, one {# dag} other {# dager}} med jobb registrert.',\n        'arbeidstidMånedTittel.iPeriodePanel.info.ingenDager': 'Ingen dager med jobb registrert.',\n    },\n};\n\nexport default arbeidstidMånedMessages;\n","const tidEnkeltdagFormMessages = {\n    nb: {\n        'tidEnkeltdagForm.endretFra': 'Endret fra',\n        'tidEnkeltdagForm.gjelderFlereDager.label': 'Gjenta disse timene for flere dager',\n        'tidEnkeltdagForm.gjelderFlereDager.info':\n            'Velg hvilke andre dager i søknadsperioden du ønsker at disse timene skal registreres på:',\n        'tidEnkeltdagForm.gjentagelse.helUke': 'Alle dager i uke {ukeNavn}',\n        'tidEnkeltdagForm.gjentagelse.delAvUke': 'Alle dager i uke {ukeNavn}',\n        'tidEnkeltdagForm.gjentagelse.helMåned': 'Alle dager i {månedNavn}',\n        'tidEnkeltdagForm.gjentagelse.delAvMåned': 'Alle dager i {månedNavn}',\n        'tidEnkeltdagForm.gjentagelse.dagerFremover': 'Alle {dagerNavn} fra og med {fra}',\n        'tidEnkeltdagForm.gjentagelse.periode': '({fra} - {til})',\n        'tidEnkeltdagForm.stoppGjentagelse.label': 'Velg en annen til og med dato',\n        'tidEnkeltdagForm.stopDato.label': 'Velg til og med dato',\n        'tidEnkeltdagForm.validation.gjentagelse.noValue':\n            'Du må velge hvilke flere dager tiden skal gjelde, eller velge bort valget om at det gjelder flere dager.',\n        'tidEnkeltdagForm.validation.stopDato.dateHasNoValue': 'Du må fylle ut til og med dato.',\n        'tidEnkeltdagForm.validation.stopDato.dateHasInvalidFormat':\n            'Du må oppgi til og med dato i et gyldig datoformat. Gyldig format er dd.mm.åååå.',\n        'tidEnkeltdagForm.validation.stopDato.dateIsBeforeMin': 'Du kan ikke sette til og med dato til før fra-datoen.',\n        'tidEnkeltdagForm.validation.stopDato.dateIsNotWeekday':\n            'Til og med datoen må være en lørdag eller søndag. Skriv inn eller velg dato fra kalenderen.',\n        'tidEnkeltdagForm.validation.stopDato.dateIsAfterMax':\n            'Til og med dato kan ikke være etter perioden du søker for.',\n        'tidEnkeltdagForm.validation.tid.timeHasNoValue': 'Du må fylle ut timer og minutter.',\n        'tidEnkeltdagForm.validation.tid.hoursAreInvalid': 'Antall timer er ikke et gyldig tall.',\n        'tidEnkeltdagForm.validation.tid.hoursAreNegative': 'Antall timer kan ikke være et negativt tall.',\n        'tidEnkeltdagForm.validation.tid.minutesAreInvalid': 'Antall minutter er ikke et gyldig tall.',\n        'tidEnkeltdagForm.validation.tid.minutesAreNegative': 'Antall minutter kan ikke være et negativt tall.',\n        'tidEnkeltdagForm.validation.tid.tooManyHours':\n            'Antall timer og minutter kan ikke overstige {maksTimer} timer og {maksMinutter} minutter.',\n        'tidEnkeltdagForm.validation.tid.tooManyMinutes':\n            'Antall timer og minutter kan ikke overstige {maksTimer} timer og {maksMinutter} minutter.',\n        'tidEnkeltdagForm.validation.tid.durationIsTooLong':\n            'Antall timer og minutter kan ikke overstige {maksTimer} timer og {maksMinutter} minutter.',\n        'tidEnkeltdagForm.validation.tid.durationIsTooShort':\n            'Antall timer og minutter kan ikke være mindre enn {minTimer} timer og {minMinutter} minutter.',\n    },\n};\n\nexport default tidEnkeltdagFormMessages;\n","import { calendarGridMessages } from '../common/calendar-grid/calendarGridMessages';\nimport { dagerMedTidMessages } from '../common/dager-med-tid-liste/dagerMedTidMessages';\nimport { timerOgMinutterMessages } from '../common/timer-og-minutter/timerOgMinutterMessages';\nimport { omsorgstilbudEnkeltdagFormMessages } from '../';\nimport arbeidstidEnkeltdagFormMessages from '../arbeidstid/arbeidstid-enkeltdag-dialog/arbeidstidEnkeltdagMessages';\nimport arbeidstidMånedMessages from '../arbeidstid/arbeidstid-kalender/i18n/arbeidstidMånedMessages';\nimport { arbeidstidPeriodeMessages } from '../arbeidstid/arbeidstid-periode-dialog/i18n/arbeidstidPeriodeMessages';\nimport { omsorgstibudPeriodeMessages } from '../omsorgstilbud/omsorgstilbud-periode/i18n/omsorgstilbudPeriodeMessages';\nimport tidEnkeltdagFormMessages from '../tid/tid-enkeltdag-dialog/i18n/tidEnkeltdagMessages';\n\nexport type ComponentMessages<Messages> = Record<string, Messages>;\n\nexport const sifCommonPleiepengerMessages = {\n    nb: {\n        ...arbeidstidPeriodeMessages.nb,\n        ...omsorgstibudPeriodeMessages.nb,\n        ...omsorgstilbudEnkeltdagFormMessages.nb,\n        ...timerOgMinutterMessages.nb,\n        ...tidEnkeltdagFormMessages.nb,\n        ...arbeidstidEnkeltdagFormMessages.nb,\n        ...calendarGridMessages.nb,\n        ...arbeidstidMånedMessages.nb,\n        ...dagerMedTidMessages.nb,\n    },\n};\n","export const calendarGridMessages = {\n    nb: {\n        'calendarGrid.Mandag': 'Mandag',\n        'calendarGrid.Tirsdag': 'Tirsdag',\n        'calendarGrid.Onsdag': 'Onsdag',\n        'calendarGrid.Torsdag': 'Torsdag',\n        'calendarGrid.Fredag': 'Fredag',\n        'calendarGrid.uke': 'uke',\n        'calendarGrid.Uke': 'Uke',\n        'calendarGrid.måned': 'måned',\n        'calendarGrid.Måned': 'Måned',\n    },\n};\n","export const dagerMedTidMessages = {\n    nb: {\n        'dagerMedTid.mandager': 'Mandager',\n        'dagerMedTid.tirsdager': 'Tirsdager',\n        'dagerMedTid.onsdager': 'Onsdager',\n        'dagerMedTid.torsdager': 'Torsdager',\n        'dagerMedTid.fredager': 'Fredager',\n        'dagerMedTid.ingenDagerRegistrert': 'Ingen dager registrert.',\n        'dagerMedTid.normaltTimer': 'Normalt {timer}',\n        'dagerMedTid.uke': 'Uke {uke}',\n    },\n};\n","import React from 'react';\nimport { IntlProvider } from 'react-intl';\n\nimport '@formatjs/intl-numberformat/polyfill-force';\nimport '@formatjs/intl-numberformat/locale-data/nb';\nimport '@formatjs/intl-datetimeformat/polyfill-force';\nimport '@formatjs/intl-datetimeformat/add-all-tz';\nimport '@formatjs/intl-datetimeformat/locale-data/nb';\n\nimport { MessageFileFormat } from '@navikt/sif-common-core/lib/dev-utils/intl/devIntlUtils';\nimport { sifCommonPleiepengerMessages } from '../../sif-common-pleiepenger/i18n';\nimport { arbeidstidPeriodeMessages } from '../../sif-common-pleiepenger/arbeidstid/arbeidstid-periode-dialog/i18n/arbeidstidPeriodeMessages';\nimport { arbeidstidEnkeltdagMessage } from '../../sif-common-pleiepenger';\nimport tidEnkeltdagFormMessages from '../../sif-common-pleiepenger/tid/tid-enkeltdag-dialog/i18n/tidEnkeltdagMessages';\nimport { timerOgMinutterMessages } from '../../sif-common-pleiepenger/common/timer-og-minutter/timerOgMinutterMessages';\n\nexport interface IntlProviderProps {\n    locale: string;\n    onError?: (error: any) => void;\n}\n\nconst allMessages: MessageFileFormat = {\n    nb: {\n        ...sifCommonPleiepengerMessages.nb,\n        ...arbeidstidPeriodeMessages.nb,\n        ...arbeidstidEnkeltdagMessage.nb,\n        ...tidEnkeltdagFormMessages.nb,\n        ...timerOgMinutterMessages.nb,\n    },\n};\n\nconst withIntlProvider = (Story: any) => {\n    return (\n        <IntlProvider locale={'nb'} messages={allMessages.nb}>\n            <Story />\n        </IntlProvider>\n    );\n};\n\nexport default withIntlProvider;\n","var map = {\n\t\"./storybook/stories/delskjema/ArbeidstidKalender.stories.tsx\": \"./src/storybook/stories/delskjema/ArbeidstidKalender.stories.tsx\",\n\t\"./storybook/stories/delskjema/TidFasteUkedagerInput.stories.tsx\": \"./src/storybook/stories/delskjema/TidFasteUkedagerInput.stories.tsx\",\n\t\"./storybook/stories/enkeltkomponenter/DurationText.stories.tsx\": \"./src/storybook/stories/enkeltkomponenter/DurationText.stories.tsx\",\n\t\"./storybook/stories/oppsummering/ArbeidstidEnkeltdagerOppsummering.stories.tsx\": \"./src/storybook/stories/oppsummering/ArbeidstidEnkeltdagerOppsummering.stories.tsx\",\n\t\"./storybook/stories/oppsummering/ArbeidstidFasteDagerOppsummering.stories.tsx\": \"./src/storybook/stories/oppsummering/ArbeidstidFasteDagerOppsummering.stories.tsx\",\n\t\"./storybook/stories/skjema/ArbeidstidPeriodeForm.stories.tsx\": \"./src/storybook/stories/skjema/ArbeidstidPeriodeForm.stories.tsx\",\n\t\"./storybook/stories/skjema/TidEnkeltdagForm.stories.tsx\": \"./src/storybook/stories/skjema/TidEnkeltdagForm.stories.tsx\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./src sync recursive ^\\\\.(?:(?:^%7C\\\\/%7C(?:(?:(?%21(?:^%7C\\\\/)\\\\.).)*?)\\\\/)(?%21\\\\.)(?=.)[^/]*?\\\\.stories\\\\.(js%7Cjsx%7Cts%7Ctsx))$\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = \"./src sync recursive ^\\\\.(?:(?:^%7C\\\\/%7C(?:(?:(?%21(?:^%7C\\\\/)\\\\.).)*?)\\\\/)(?%21\\\\.)(?=.)[^/]*?\\\\.stories\\\\.mdx)$\";\nmodule.exports = webpackEmptyContext;"],"names":["___CSS_LOADER_EXPORT___","push","module","id","parameters","actions","argTypesRegex","controls","matchers","color","date","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","apply","_defineProperty","obj","key","value","defineProperty","configurable","writable","config","forEach","logger","JSON","stringify","decorator","addDecorator","loader","addLoader","addParameters","_objectSpread","target","i","arguments","length","source","getOwnPropertyDescriptors","defineProperties","enhancer","addArgTypesEnhancer","addArgsEnhancer","setGlobalRender","v","console","log","require","configure","Fields","title","component","ArbeidstidKalender","decorators","withIntlProvider","getTypedFormComponents","FormikWrapper","Form","renderStoryWrapper","Story","intialValues","initialValues","onSubmit","values","renderForm","includeButtons","Template","args","Default","bind","arbeidsforholdType","ArbeidsforholdType","arbeidsstedNavn","måned","ISODateRangeToDateRange","periode","tidArbeidstid","utilgjengeligeDatoer","ISODateToDate","åpentEkspanderbartPanel","arbeiderNormaltTimerFasteUkedager","friday","hours","minutes","tid","formik","storySource","TidFasteUkedagerInput","defaultFormProps","name","validateDag","dag","defaultInitialValues","monday","tuesday","wednesday","thursday","WithInitialValues","WidthDisabledDays","disabledDays","Weekday","HiddenDisabledDays","hideDisabledDays","DurationText","duration","DurationText1","ArbeidstidEnkeltdagerOppsummering","dager","arbeidstimer","normalTimer","faktiskTimer","dato","visNormaltid","IngenDagerRegistrert","ArbeidstidFasteDagerOppsummering","fasteDager","mandag","tirsdag","onsdag","torsdag","fredag","ArbeidstidPeriodeForm","withDialogWrapperMedium","from","to","intlValues","fra","til","hvor","iPerioden","skalEllerHarJobbet","timer","visAlleSpørsmål","TidEnkeltdagForm","withDialogWrapperSmall","testSøknadsperiode","hvorMyeSpørsmålRenderer","nb","arbeidstidPeriodeMessages","getArbeidstidPeriodeIntl","intl","typedIntlHelper","fullText","hideEmptyValues","type","minutter","useIntl","FormattedNumber","durationToDecimalDuration","ensureDuration","maximumFractionDigits","style","whiteSpace","intlHelper","marginLeft","sortDays","d1","d2","dayjs","isSameOrBefore","bem","bemUtils","DagerMedTidListe","dagerMedTid","viseUke","visMåned","weeksWithDays","groupBy","getFullYear","isoWeek","className","block","Undertittel","format","element","map","days","Element","tag","uke","sort","idx","normaltid","mapArbeidstidEnkeltdagApiDataToDagMedTid","ISODurationToDuration","ingenDagerRegistrertMelding","months","getMonth","margin","tittel","textTransform","fontSize","getDagerMedInterval","interval","ukedag","isoWeekday","getDatesInDateRange","_","index","nthItemFilter","getDagerMedNyTid","endringsperiode","varighet","gjentagelse","datoerMedTid","datoerSomSkalEndres","getGjentagendeDager","gjentagendeDatoer","tom","gjentagelsetype","GjentagelseType","hverUke","hverAndreUke","heleUken","getWeekDateRange","getMonthDateRange","isDateWeekDay","dateToISODate","isoDate","getGjentagelseEnkeltdagFraFormValues","skalGjentas","stopDato","datepickerUtils","undefined","getDateRangeWithinDateRange","range","limitRange","toDate","trimDateRangeToWeekdays","getFirstWeekdayOnOrAfterDate","getLastWeekdayOnOrBeforeDate","getTidEnkeltdagFormTidValidator","maksTid","minTid","time","error","getTimeValidator","required","max","min","keepKeyUnaltered","maksTimer","maksMinutter","minTimer","minMinutter","minMax","FormFields","FormComponents","tidOpprinnelig","onCancel","erEndret","durationsAreEqual","dagNavn","dagerNavn","valgtDatoTxt","dateFormatter","ukePeriode","ukeErHel","månedPeriode","månedErHel","isBefore","isAfter","ukePeriodeStartTxt","ukePeriodeSluttTxt","månedPeriodeStartTxt","månedPeriodeSluttTxt","ukeNavn","månedNavn","sluttDatoTxt","skalViseValgetGjelderFlereDager","getNumberOfDaysInDateRange","renderGjentagelseRadioLabel","enableReinitialize","onValidSubmit","stoppGjentagelse","formErrorHandler","getIntlFormErrorHandler","includeValidationSummary","submitButtonLabel","cancelButtonLabel","TimeInput","label","validate","timeInputLayout","justifyContent","compact","direction","Checkbox","RadioGroup","legend","getRequiredFieldValidator","radios","heleMåneden","TidEnkeltdagDialog","isOpen","dialogTitle","formProps","contentLabel","onRequestClose","shouldCloseOnOverlayClick","ArbeidstidEnkeltdagDialog","erHistorisk","dateToday","navn","når","formatTime","ukedager","day","marginTop","durationFaktiskTimer","durationNormalTimer","marginBottom","CalendarGridDate","dateRendererShort","dateRendererFull","content","classNames","utc","getWeeks","dates","month","datesToRender","getFullWeeksForDates","dayOfWeek","getUTCDay","firstDateInWeek","startOf","isSame","subtract","weeksAndDays","weeks","weekDates","some","d","weekNumber","CalendarGrid","disabledDates","disabledDateInfo","renderAsList","hideEmptyContentInListMode","hideWeeksWithOnlyDisabledContent","onDateClick","dateContentRenderer","allDaysInWeekDisabledContentRenderer","weekdatesInMonth","getDatesInMonth","renderDate","dateKey","toDateString","dateIsDisabled","isDateInDates","renderAsButton","ButtonOrDivComponent","onClick","evt","stopPropagation","preventDefault","child","modifierConditional","modifier","renderWeek","week","datesInWeek","weekNum","areAllDaysInWeekDisabledOrOutsideMonth","role","LabelInputInfoLayout","narrowBreakpoint","input","info","isNarrow","useMediaQuery","query","formatTimerOgMinutter","TimerOgMinutter","numTimer","parseInt","numMinutter","tidUkerdagerInputMessages","Mandager","Tirsdager","Onsdager","Torsdager","Fredager","getTidFasteUkerdagerInputMessages","locale","nn","ArbeidstidFasteUkedagerInput","fieldName","tidPerDagValidator","utilgjengeligeUkedager","skjulUtilgjengeligeUkedager","tekst","testId","txt","renderWeekdayTimeInput","weekday","weekdayLabel","erUtilgjengeligUkedag","FormikInputGroup","FormikTimeInput","ariaLabelTidInput","toLowerCase","ArbeidstidEnkeltdagTekst","prosent","skjulIngenTid","desimaltid","ArbeidstidMånedTittel","headingLevel","antallDagerMedTid","ukeOgÅr","Normaltekst","månedTittelHeadingLevel","skjulIngenTidEnkeltdag","månedTittelRenderer","onEnkeltdagChange","useState","editDate","setEditDate","getDurationsInDateRange","getDatesWithDurationLongerThanZero","getWeekdayFromDate","renderContentWhenClosed","apen","skjulTommeDagerIListe","visOpprinneligTid","tidRenderer","handleKalenderDatoClick","dateToISOString","getNumberDurationForWeekday","removeDatesFromDateDurationMap","setTimeout","TidEnkeltdager","TidFasteDager","validationDayName","disabled","isWeekdayDisabled","hasHiddenDays","getWeekdayFromISOWeekday","getDagInfo","dayjsDato","ukenummer","år","year","årOgUke","labelDag","labelDato","labelFull","tidUkerInputUtils","getDagInfoForPeriode","add","getForegåendeDagerIUke","getEmptyElements","num","Array","React","firstDayOfWeek","c","getUkerFraDager","ukerOgDager","dagerIUke","renderDagLabel","customRenderer","TidUkeInput","ukeinfo","visSomListe","getFieldName","dagLabelRenderer","ukeTittelRenderer","isWide","erUtilgjengelig","TidUkerInput","brukPanel","opprinneligTid","maxWidth","minWidth","uker","getTidKalenderFieldName","FormField","weekOfYear","TidKalenderForm","intro","mapDatoTidToFormDatoTid","data","onFormikSubmit","getValidDurations","getFormErrorHandler","formFooter","align","htmlType","Systemtittel","TidsbrukKalenderDag","opprinneligTidRenderer","footerRenderer","renderTid","Undertekst","renderOpprinneligTid","TidsbrukKalender","dagerOpprinnelig","utilgjengeligDagInfo","tomUkeContentRenderer","kalenderdager","percentage","visibleText","ariaText","ArbeiderIPeriodenSvar","initialFormValues","arbIntl","disabledDaysOfWeekDayNumber","getWeekdayDOW","intlText","introduksjon","fom","Error","arbeiderHvordan","somVanlig","redusert","tidFasteDager","ensureCompleteDurationWeekdays","heleSøknadsperioden","setFieldValue","okButton","cancelButton","DateIntervalPicker","fromDatepickerProps","disableWeekend","fullScreenOnMobile","fullscreenOverlay","disabledDaysOfWeek","dayPickerProps","initialMonth","minDate","maxDate","getDateRangeValidator","onlyWeekdays","fromDate","validateFromDate","toDatepickerProps","validateToDate","afterOnChange","handleHeleSøknadsperiodenChange","velgHeleSøknadsperioden","RadioPanelGroup","InputGroup","validateFasteArbeidstimerIUke","summarizeDurationInDurationWeekdays","getArbeidstimerFastDagValidator","ArbeidstidPeriodeDialog","Modal","renderFraværInfo","fravær","arbeidstid","heltFravær","ArbeidstidUkeInput","normalarbeidstidUkedager","visUkeTittel","getDagValue","enkeltdagValidator","beregnFravær","timerPåDag","reduce","n","getUkeTittel","erUtilgjengeligDato","isDateInWeekdays","dayDateString","inputDatoLabel","normalarbeidstid","decimalDurationToDuration","ArbeidstidUkerInput","tekster","useExpandablePanel","renderUke","dur","OmsorgstilbudEnkeltdagDialog","OmsorgstilbudPeriodeForm","getOmsorgstilbudPeriodeIntl","validateOmsorgstilbudFasteDager","getOmsorgstilbudFastDagValidator","ValidateDateError","ValidateDateRangeError","OmsorgstilbudPeriodeDialog","OmsorgstilbudMåned","tidOmsorgstilbud","dagerMedRegistrertOmsorgstilbud","datoTid","durationIsZero","omsorgstibudPeriodeMessages","options","DialogWrapper","width","withDialogWrapperWide","children","border","borderRadius","padding","boxShadow","timerOgMinutterMessages","timerOgMinutter","sifCommonPleiepengerMessages","omsorgstilbudEnkeltdagFormMessages","tidEnkeltdagFormMessages","arbeidstidEnkeltdagFormMessages","arbeidstidMånedMessages","allMessages","arbeidstidEnkeltdagMessage","messages","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","code","webpackContextKeys","resolve","exports","webpackEmptyContext"],"sourceRoot":""}